
<section 
	title="News: Wine Releases and Slashdotting"
	subject="Wine"
	archive="#"
	posts="0"
>
<topic>Wine</topic>
<p>
Dan Kegel made a quick <a href="http://wiki.winehq.org/AppsThatSupportWine">wiki list</a> of applications that officially support "Wine" as a platform.  This list quickly caught the eye of slashdot editors and it went up on front page of the tech section.  Thanks to the publicity the list began to grow!  Be sure to add any applications or developer studios that you know of to the list!
</p>
<p>
GeekZone has <a href="http://www.geekzone.co.nz/foobar/6201">published</a> a list of several reasons to switch to Linux.  Reason number 9:
</p>
<quote>
<p>
You can run Linux along with Windows: You can run Linux along with Windows on a different partition. You can boot to Windows wherever you want. It is also possible to run Linux in Windows using emulator software like VMWare or MS Virtual PC. Likewise, it is also possible to run Windows applications in Linux using emulators like Wine (This Wine is different!).
</p><p>
That's all true. Even though your mileage may vary when trying to run Windows software under Wine.
</p>
</quote>
<p>The "Loobin' the tubes" blog over at wordpress had two posts recently highlighting his perception of Wine of late.  Always good to run across positive user stories!  <a href="http://loobin.wordpress.com/2009/01/13/wine-ascendant/">Wine Ascendant</a> and <a href="http://loobin.wordpress.com/2009/02/03/wine-going-production/">Wine Going Production</a> stories.
</p> 
<p>
Several Wine releases:
</p>
<pre>
 The Wine development release 1.1.14 is now available.
 What's new in this release:

    * Various bug fixes for Internet Explorer 7.
    * Many crypt32 improvements, including new export wizard.
    * Better support for windowless Richedit.
    * Improvements to the print dialog.
    * Many fixes to the regression tests on Windows.
    * Various bug fixes.
</pre>
<pre>
 The Wine development release 1.1.13 is now available.
 What's new in this release:

    * Freedesktop.org-compliant startup notifications.
    * Many fixes for 64-bit application support.
    * Improved graphics support in Internet Explorer.
    * Various Richedit improvements.
    * Better certificate manager dialog.
    * Various bug fixes.
</pre>
</section>
<section 
	title="Wine Test Suite passing on Windows!"
	subject="Test Suite"
	archive="http://www.winehq.org/pipermail/wine-devel/2009-January/072559.html"
	posts="6"
>
<topic>Test Suite</topic>
<p>
Reece Dunn has emailed in to Wine Devel for some major news.  For the second WWN Issue in a row I have the privilege of announcing that another platform is passing the test suite: Windows XP.
</p>
<quote>
<p>
Hi,<br />
The Wine tests are now passing on a Windows XP machine
(http://test.winehq.org/data/4b27dfec939d131c9d7e09f97f14dfc7dabe8843/#group_XP).
Two of the other four only have 2 or 3 failures.
</p><p>
The 2003 group has 3 machines with 1 failure each (urlmon:protocol on
one, user32:menu on the others).
</p><p>
Congratulations to everyone involved fixing the tests!
</p><p>
- Reece
</p>
</quote>
<p>
Dan Kegel writes in with a history of the test suite:
</p>
<quote>
<p>
Wow, that's awesome!   A day seven years in the making...
</p><p>
2002: the C test suite is started:<br />
 <a href="http://source.winehq.org/git/wine.git/?a=commit;h=caa03388bcccc64f444f9b4ef664ec5039d5bf72">http://source.winehq.org/git/wine.git/?a=commit;h=caa03388bcccc64f444f9b4ef664ec5039d5bf72</a> 
</p><p>
2003: winetest committed:<br />
 <a href="http://www.winehq.org/wwn/199#Winetest%20Integrated%20&amp;%20Future%20Steps">http://www.winehq.org/wwn/199#Winetest%20Integrated%20&amp;%20Future%20Steps</a> 
</p><p>
2004: server to build winetest and parse winetest results set up<br />
 <a href="http://www.winehq.org/wwn/216#A%20Distributed%20Test%20Environment">http://www.winehq.org/wwn/216#A%20Distributed%20Test%20Environment</a> 
</p><p>
2009: the test suite passes for somebody besides Alexandre on Wine:<br />
 <a href="http://www.winehq.org/wwn/355#Test%20Suite%20Passes!">http://www.winehq.org/wwn/355#Test%20Suite%20Passes!</a> 
</p><p>
Anyone have a graph of test suite size vs. time?
</p>
</quote>
<p>
Paul Vriens writes in with a minor update, that the suite had actually already passed just a few days prior.  
</p>
<quote>
<p>
It's not the first one though. We had one or two the last weeks. The biggest 
problem besides getting to 0 is consistency.
</p><p>
Have a look at Alasdair's Wine box. It succeeded a few times but also has tests 
that intermittently fail. The same is true for a lot of Windows boxes.
</p><p>
Nonetheless, we are in a far better position than a few months ago. And after 
Juan's batch it will be even better.
</p><p>
Having a low rate of failures also lowers the burden for people to fix the last 
remaining ones instead of staring at a red page ;)
</p><p>
Just some numbers for my W95, W98, NT4, W2K, W2K3 and Vista boxes:
</p><p>
June-24-2008  : 21.7% test failures<br />
Aug-26-2008   : 19.7%<br />
Nov-14-2008   : 9.8%<br />
And yesterday : 6.1%<br />
<br />
-- <br />
Cheers,<br />
<br />
Paul.
</p>
</quote>
<p>
Ge van Geldorp writes in with links to the tests Paul mentions:
</p>
<quote>
<p>
Actually, that was not the first time. On 20 Jan an XP machine passed:
 <a href="http://test.winehq.org/data/e9d8c9f572998054b1f9c386ea81a3570c65f2d2/#group_">http://test.winehq.org/data/e9d8c9f572998054b1f9c386ea81a3570c65f2d2/#group_</a> 
XP<br />
And on 27 Jan a 2009 machine:
 <a href="http://test.winehq.org/data/8f829034f3fe4da3e7adce2f4685e10ba2e2fe82/#group_2003">http://test.winehq.org/data/8f829034f3fe4da3e7adce2f4685e10ba2e2fe82/#group_2003</a> 
</p>
</quote>
</section>
<section 
	title="Wine running IE7"
	subject="Internet Explorer 7"
	archive="http://www.winehq.org/pipermail/wine-devel/2009-January/072120.html"
	posts="1"
>
<topic>Internet Explorer 7</topic>
<p>
Hans Leidekker, the same mastermind who worked out the crucial bugs needed to make <a href="http://www.codeweavers.com/services/ports/chromium/">Crossover Chromium</a> possible has performed another feet of cross platform web browser liberation.  Hans's story on making Internet Explorer 7 work in Wine:
</p>
<quote>
<p>
Well, sort of. I found bugs in shell32, rpcrt4, comctl32 and wininet
that I had to implement, stub and override my way past before it would
render a page, but finally, here's the obligatory screenshot.
</p>
</quote>
<p>
<img src="http://www.winehq.org/pipermail/wine-devel/attachments/20090115/2432fb19/attachment-0001.png"/>
</p>
</section>
<section 
	title="Finding static functions"
	subject="Static Analysis"
	archive="http://www.winehq.org/pipermail/wine-devel/2008-December/071273.html"
	posts="1"
>
<topic>Static Analysis</topic>
<p>
Francois Gouget has been doing some work with some static analysis of the code base to find functions which should be static (Only accessible locally.  Reducing the number of global symbols).
</p>

<quote>
<p>
I have attached a script that identifies functions that should be made 
static (among other things). There are approximately 450 of them, there 
should be pretty efw false positives, and I will look into them 
eventually. But if someone beats me to it I sure won't complain *g*.
</p>
<p>
So if you do try to tackle them you are likely to find that they fall 
into one of the following categories:
</p>
<p>
 1) Unused debug functions.<br />
    For instance for dumping the contents of a structure to stderr. 
    Although these are unused we probably want to keep them. Let me know 
    about these and I will put them in an exception list.
</p>
<p>
 2) Functions that should be exported by a spec file<br />
    It happens. Sometimes the developer implementing a function just 
    forgets to add it to the spec file!
</p>
<p>
 3) Generated functions<br />
    This typically happens with widl: it generates a bunch of functions 
    for the client / server and proxy cases, but these functions may be 
    unused. I have special code to not warn about these, but there may 
    be other cases. For instance in the list below you will find a 
    number of yy*() functions generated by lex. Either we can tell lex 
    to make them static or to not generate them, or I should make 
    another special case. If you find some of these, let me know.
</p>
<p>
 4) Assembly functions<br />
    I believe there should not be any of these in the list below.
    So if you find one let me know.
</p>
<p>
 5) Functions declared in a private header file but implemented and used 
    from a single C file.<br />
    I'm in favor of removing these functions from the private header and 
    making them static.
</p>
<p>
 6) All the others should be pretty clear-cut.
</p>
</quote>
<p>
Francois also attached the code and a list of functions that it outputted.  Several Wine developers wrote in with some information about functions in their areas, hopefully leading to some more effective cleanups.  Patches have slowly been trickling in to reduce the number of should-be-static functions hanging around.
</p></section>
<section 
	title="Wine and Python"
	subject="Advanced uses of Wine"
	archive="http://www.winehq.org/pipermail/wine-devel/2009-January/072159.html"
	posts="1"
>
<topic>Advanced uses of Wine</topic>
<p>
Luke Kenneth Casson Leighton wrote into the Wine-devel mailing list with an interesting story about how he was finally able to cross-compile python 2.5.2.
</p>
<quote>
<p>
hi folks,
i promised i'd get python built under wine - and i'm happy to report
that this goal has been successfully achieved.
</p><p>
 <a href="http://bugs.python.org/issue4954">http://bugs.python.org/issue4954</a> if anyone's interested.  what has
been achieved is that a python.exe, libpython2.5.dll, an implib
libpython2.5.dll.a and a python2.5.def have all been successfully
created using an entirely free software toolchain, along with the
dynamic libraries (such as pyexpat.pyd - python for win32's convention
is .pyd not .so).
</p><p>
running the regression testing has been... interesting :)  several
bugs in wine have been detected, along with faults in the header-files
that need to be corrected.  tmpfile() is faulty; MAX_LONG and MIN_INT
#defines cause problems; the default file format CRLF instead of LF
causes the builtin regression test to fail; _ctypes _utterly_ borks on
c structure creation and manipulation but is using assembly-stuff (a
copy of libffi is included in python) - there are a few more, but out
of 350 tests, the majority of them succeed.
amazingly.
</p><p>
anyway, the point of this message is primarily to let people know that
this successful compile shows just how far along wine is coming, and
it's like a really big hairy deal that python can now be compiled for
win32 platforms, for native use on windows or on wine, _without_
having to have a proprietary operating system or a proprietary
compiler to do it.
</p><p>
now it's possible to port things like pygtk2, pyqt4, pywebkit-gtk and
numpy to win32 etc. (because of the header files and the implibs) -
again, _without_ requiring proprietary technology.
which is absolutely fantastic.<br />
thank you to everyone on the wine team.<br />
l.
</p>
</quote></section>
<section 
	title="Fixing AppDB Ratings"
	subject="AppDB"
	archive="http://www.winehq.org/pipermail/wine-devel/2009-February/072724.html"
	posts="12"
>
<topic>AppDB</topic>
<p>
Zach Goldberg (should I be referring to myself in the third person here?  Hmm, this is an odd situation.  They don't teach this scenario in grade school.) wrote in to Wine-devel with a somewhat adrenaline filled action-packed thriller of an email with the intent of finally silencing all of the (apparently internet-wide) criticism of the AppDB rating system.  The email:
</p>
<quote>
<p>
All,
</p><p>
So it seems to be almost every other day now when somebody mentions
how broken the appdb rating system is.  This "broken-ness" has had
several high level discussions on Wine-Devel.  There have also been
many, many proposed solutions to this problem.
</p><p>
I do not wish to discuss these problems or these solutions in this
thread.  It is time something was done about this.  By done I mean
agreed upon (probably the harder part) then implemented in code and
published to the winehq server(s).
</p><p>
I'd like to arrange an IRC discussion for all those interested in
finalizing an attack plan, and then assigning the responsibility of
doing it to somebody who is capable and has the time (perhaps myself).
</p><p>
Lets (arbitrarily) set a time for the chat at:
</p><p>
When: 11PM UTC (6PM EST) 2/6/09 (Friday)<br />
Where: #winehackers
</p><p>
If this arbitrary time seems to be poorly chosen for a large number of
people then please propose an alternative well in advance so all are
aware of it.
</p><p>
--Zach
</p>
</quote>
<p>
James Mckenzie then writes in asking (among other things) if there will be a transcript posted.  This gives me the idea to make a wiki page for the event:
</p>
<quote>
<p>
I have made a wiki on winehq with an agenda which will be updated with
the results (and maybe transcript?) of the conversation.
 <a href="http://wiki.winehq.org/AppDBUpgrades">http://wiki.winehq.org/AppDBUpgrades</a> 
</p>
</quote>
<p>
James also mentioned that it might not work for people on the West Coast of the USA but quickly comes to the conclusion (which I agree with) that scheduling a meeting for people in every time zone on the planet simply cannot accommodate everybody perfectly.  
</p>
<p>
Several others wrote in indicating that they will attend, and several further who cannot attend but eagerly await the outcome of the meeting.  Until next issue!
</p>
</section>