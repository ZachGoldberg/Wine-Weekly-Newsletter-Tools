<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="210" date="02/13/2004" />
<intro> <p>This is the 210th issue of the Wine Weekly News publication.
Its main goal is to revel in Purgatory It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="183" size="522" contrib="65" multiples="29" lastweek="30">

<person posts="26" size="69" who="Dimitrie O. Paun" />
<person posts="13" size="31" who="Alexandre Julliard" />
<person posts="12" size="42" who="Mike Hearn" />
<person posts="10" size="37" who="Fabian Cenedese" />
<person posts="7" size="26" who="Abdul-Haseeb Ahmad" />
<person posts="7" size="22" who="Shachar Shemesh" />
<person posts="7" size="17" who="Mike McCormack" />
<person posts="5" size="12" who="Dmitry Timoshkov" />
<person posts="5" size="11" who="Tom" />
<person posts="5" size="10" who="Steven Edwards" />
<person posts="4" size="19" who="Troy Rollo" />
<person posts="4" size="14" who="Huw D M Davies" />
<person posts="4" size="12" who="Christian Costa" />
<person posts="4" size="8" who="Juan Lang" />
<person posts="4" size="8" who="Chris Seaton" />
<person posts="3" size="7" who="Mike Kost" />
<person posts="3" size="7" who="Rein Klazes" />
<person posts="3" size="6" who="Robert Shearman" />
<person posts="3" size="6" who="gslink" />
<person posts="2" size="9" who="Brian Vincent" />
<person posts="2" size="7" who="(ATMRD)" />
<person posts="2" size="7" who="Michael Stefaniuc" />
<person posts="2" size="5" who="cedric" />
<person posts="2" size="5" who="Robert Lunnon" />
<person posts="2" size="5" who="Ryan Underwood" />
<person posts="2" size="4" who="Ove Kaaven" />
<person posts="2" size="4" who="Zimler Attila" />
<person posts="2" size="3" who="Boaz Harrosh" />
<person posts="1" size="6" who="Carl Sopchak" />
<person posts="1" size="5" who="MediaHost \(TM\)" />
<person posts="1" size="3" who="saravanan" />
<person posts="1" size="3" who="Chris Morgan" />
<person posts="1" size="3" who="Joerg Mayer" />
<person posts="1" size="3" who=" (Frank Schruefer)" />
<person posts="1" size="3" who="Frank Schruefer" />
<person posts="1" size="3" who="Marcus Meissner" />
<person posts="1" size="2" who="Jeremy White" />
<person posts="1" size="2" who="Geoffrey" />
<person posts="1" size="2" who="Viktor Nilsson" />
<person posts="1" size="2" who="=?ISO-8859-1?Q?=22Crist=F3v=E3o_B=2E_B=2E_Dalla_Costa=22?=" />
<person posts="1" size="2" who="Terence Scott" />
<person posts="1" size="2" who="Aric Stewart" />
<person posts="1" size="2" who="Urivan Saaib" />
<person posts="1" size="2" who="Jason Edmeades" />
<person posts="1" size="2" who="(juergen.schmied)" />
<person posts="1" size="2" who="Kuba Ober" />
<person posts="1" size="2" who="Vizzini" />
<person posts="1" size="2" who="Ferenc Wagner" />
<person posts="1" size="2" who="Lars Segerlund" />
<person posts="1" size="2" who="Michael Ost" />
<person posts="1" size="2" who="Martin Fuchs" />
<person posts="1" size="2" who="Alfons Hoogervorst" />
<person posts="1" size="2" who="Dan Timis" />
<person posts="1" size="2" who="Jeremy Newman" />
<person posts="1" size="2" who="Kevin Koltzau" />
<person posts="1" size="2" who="Rolf Kalbermatter" />
<person posts="1" size="1" who="Sami Aario" />
<person posts="1" size="1" who="Geoff Thorpe" />
<person posts="1" size="1" who="Francois Gouget" />
<person posts="1" size="1" who="Leonardo Quijano Vincenzi" />
<person posts="1" size="1" who="Gerald Pfeifer" />
<person posts="1" size="1" who="lazybones" />
<person posts="1" size="1" who="Jonathan Wilson" />

</stats>
<section 
	title="News: Wine20040213, PR" 
	subject="News"
	archive="http://cvs.winehq.org/cvsweb/wine/ANNOUNCE?rev=1.85&amp;content-type=text/x-cvsweb-markup" 
	posts="3"
	startdate="02/07/2004"
	enddate="02/13/2004"
>
<topic>News</topic>
<p>Alexandre released Wine-20040213 on Friday.  The announcement
noted the following changes:</p>
<quote who="Alexandre Julliard"><p>
WHAT'S NEW with Wine-20040213: (see 
<a href="http://cvs.winehq.org/cvsweb/wine/ChangeLog?rev=1.80&amp;content-type=text/x-cvsweb-markup">ChangeLog</a>
for details)
<ul>
	<li> Improved support for screen resolution changes.</li>
        <li> More shell32 improvements.</li>
        <li> Several Winelib compatibility fixes.</li>
        <li> Beginnings of support for typelib creation.</li>
        <li> Lots of bug fixes.</li></ul></p></quote>

<p>Go to SourceForge to 
<a href="http://sourceforge.net/project/showfiles.php?group_id=6241">download</a>
the latest release.</p>

<p>Looks like while I was on vacation
<a href="http://developers.slashdot.org/article.pl?sid=04/02/12/1442240&amp;mode=thread&amp;tid=125&amp;tid=185">we
got Slashdotted</a>.  </p>

<p>Also found this week was a 
<a href="http://www.philly.com/mld/inquirer/business/technology/7932675.htm">short review</a>
of Xandros 2.0 Deluxe.  Normally I skip over such short reviews, especially
ones that barely discuss Windows' compatibility.  What's interesting about
this one is it seems to have appeared in dead tree format on newstands.</p>

</section>

<section 
	title="Prelinking and Exec Shield Problems" 
	subject="Prototype for PE area preloader"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/02/0285.html" 
	posts="1"
	startdate="02/13/2004"
>
<topic>Memory Management</topic>
<p>One problem on the radar screen deals with supporting two new
Linux-isms: exec shield and prelinking.  
<a href="http://lwn.net/Articles/31032/">Exec shield</a> is a security
mechanism to prevent overflows from being exploited.  It relies on 
changing the memory layout of an executable... unfortunately Wine
requires a very particular layout. 
<a href="http://www.crast.us/james/articles/prelink.php">Prelinking</a>
is a method to speed up application startup time by having a preferred
memory layout.  Mike Hearn started thinking about how to solve these
problems and posted a proof-of-concept to wine-devel. Below he also
describes exactly what problems Wine faces and how he solved them:</p>
<quote who="Mike Hearn"><p>

Attached is a prototype of a technique we can use to solve the problems
caused by exec-shield and prelink. Yes, it's complicated. I wish it
wasn't, but simpler attempts at this haven't worked. I can't think of
another way to do it, given my limited knowledge. It's possible
Alexandre can figure something out, but as that hasn't happened yet here
is my contribution.
</p><p>
This is not useful inside Wine. It's a prototype only - it requires a
C99 compiler, the code is a mess, and all it shows is the loader app
running "target" which just prints out the mappings. Some more work
would be needed to turn this into a patch, but I don't know when I'll
get time to do this, so here is my work for others to pick up the baton
if they want to.
</p><p>
You can see if it's working by ensuring there is only one /dev/zero
entry every time when exec-shield-randomize is on. When it is on, the
output of "loader" should be different each time, use diff to see this.
When exec-shield is off, there should be no differences.
</p><p>
Prelink has the same effect but the addresses are randomized in a cron
job, not on every program load.
</p><p>
Don't worry if you don't fully understand this code, neither do I ;)
It's some pretty hardcore voodoo, at least by my standards.....
</p><p>
Here is the README contained within:
</p><p>
Mike Hearn
<ul>
<li> OK, so what is this?

This is a prototype of some code that will allow
us to solve the problems exec-shield and prelink are giving
Wine. They stop us working because they randomize the load addresses
of DSOs, so any linux libraries we link against might get dropped in
the middle of the load area we need. This is Bad News.

By default EXE files on Windows have their relocation records stripped
(to save space). They must be loaded at 0x400000. Because an EXE is
always the first thing into an address space, this is no
problem. Unfortunately on Wine of course the EXE isn't the first
thing into memory - Wine is.

Basically, the problem is that the dynamic linker thinks we have a
clear and empty address space. In fact we don't, we want a specific
region reserved for later use. The dynamic linker (rtld or "elf
interpreter") is the first thing that runs in a dynamically linked
binary, so we have a problem. Wine doesn't get control until the
damage is already done.

</li><li> How does it work?<br />

We have a stub binary, the preloader, which is statically linked. It
gets control direct from the kernel, and the rtld isn't run.<br />

We mmap the PE load area, with the MAP_FIXED (so we grab the exact
range of addresses we need) and MAP_NORESERVE (so we don't try and
allocate the memory, which is what scuppered earlier attempts to fix
the issue).<br />

That's the easy part. It's, what, 4 lines of code? Nothing. It's
piffling. The hard part, which is what takes up the other 320 lines
of code is restarting the standard boot process. We must do what the
kernel would normally do - map in the target (wine-pthread/kthread),
relocate the sections to the right place, set up the entry stack for
the ELF interpreter and then jump into it in order to convert our
static binary, into a dynamic one.<br />

Once we reach the other side of the dynamic linker rollercoaster, we
can then unmap the load area and tada! we now have a space we can map
PE binaries into.<br />

This works, for a simple target binary. Will it work once we start
throwing more complex stuff (TLS initialization etc)? I just don't
know. Only time will tell. I expect so, but there's no way to be 100%
sure. This sort of stuff is simply not done anywhere else.

</li><li> Did you really write this all yourself?<br />

Nope, I was aided by the sources to ul_exec (BSD licensed):
 <a href="http://lists.netsys.com/pipermail/full-disclosure/2004-January/015143.html">
 http://lists.netsys.com/pipermail/full-disclosure/2004-January/015143.html</a><br />

The rtld and kernel sources were valuable references but I didn't use
any code from them.

</li><li> How portable is it?<br />

I only tested this on Linux. The problem only manifests itself on
Linux - other UNIXy platforms don't have technologies like
exec-shield (for security) or prelink (for speed), so it's not a
problem there. It's possible they will develop them in future though,
so portability is still a concern.<br />

In theory it's 100% portable. ELF is a standard, and even though it
embedded asm and such, it should still work. MAP_NORESERVE *might* be
a GNU extension, I'm not sure, but I don't think it is. We can't work
reliably without this flag anyway so it's a moot point.</li></ul>
</p></quote>

</section>



<section 
	title="Darwine Update" 
	subject="Darwine Update, Question"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/02/0259.html" 
	posts="3"
	startdate="02/12/2004"
	enddate="02/14/2004"
>
<topic>Status Updates</topic>
<p>The Darwine team had another release on their port to Mac OS X.  Their
biggest to-do item right now seems to be integrating an x86 emulator so
they can actually run Windows programs out of the box.  Sanjay Connare
provided an update:</p>
<quote who="Sanjay Connare"><p>
     I have updated Darwine binary to version 1.06 and it is being released 
as a Developer Preview.  It does not yet support the running of x86 exe's, 
however we are begging to work on this feature.  The binary should be downloaded 
from either the home page link here 
<ul><a href="http://darwine.sourceforge.net/download.php">
 http://darwine.sourceforge.net/download.php</a></ul></p><p>
or the projects file release page here 
<ul><a href="http://sourceforge.net/project/showfiles.php?group_id=69890">
http://sourceforge.net/project/showfiles.php?group_id=69890</a></ul>  
</p><p>
to insure that the latest version is being used. 
</p><p>
     The binary requires Mac OS X 10.3 or higher and for the X11 SDK to be 
installed.  The new installer checks for these before installs, fixes a numerous 
amount of bugs, including installation of default configuration that were 
present with the first release and now includes the wine headers.
</p></quote>

</section>

<section 
	title="Crypto and RSABASE.DLL" 
	subject="Re: RSABASE: enough implementation to get Steam to login"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/02/0279.html" 
	posts="3"
	startdate="02/13/2004"
>
<topic>Integration</topic>
<p>Mike McCormack stubbed out a new DLL,
<quote who="Mike McCormack">
 This patch allows Steam to login.  It also provides a framework for 
 implementing the rest of rsabase.dll correctly using libcrypto.so
</quote></p>

<p>Geoff Thorpe thought it might be a good way to get involved,
<quote who="Geoff Thorpe">
Cool, I've been looking for an excuse to do something useful on Wine, and 
as one of the developers of libcrypto.so (www.openssl.org) perhaps this 
might be the place? Does anyone have good refs/links to the corresponding 
win32 side of this?</quote></p>

<p>Mike had some pointers:</p>
<quote who="Mike McCormack"><p>
Having a look at the documentation for the CP* functions on MSDN would 
be a good start.
<ul><a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/security/security/cpacquirecontext.asp">
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/security/security/cpacquirecontext.asp</a>
</ul></p><p>
The next thing to do would be to write your own test program that works 
in Windows, and uses those functions.   Maybe just start by encrypting a 
few bytes, then check they're encrypted right, then decrypting them 
again, and checking they come out to the right thing.
</p><p>
Once your test program works on Windows, run it in Wine, and start 
implementing FIXMEs.
</p><p>
It looks like the CryptXxxx functions are wrappers for each dll's CPXxxx 
functions... eg. ADVAPI32's CryptGenRandom() calls to the CPGenRandom() 
function in the crypt provider's DLL.
</p></quote>


</section>

<section 
	title="Making Better Icons" 
	subject="Want to Help with Wine Icons"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/02/0174.html" 
	posts="2"
	startdate="02/09/2004"
	enddate="02/10/2004"
>
<topic>Graphics</topic>
<p>Terry Scott offered to improve Wine's icons but needed
some help getting started,
<quote who="Terry Scott">
I'm an illustrator who has been working in the Web
Designing/Programming world for a while and would like to help out
with drawing icons for Wine.  Is there a list of what needs to be
drawn and who to send the icons to?</quote></p>

<p>Dimi explained the process and exactly what the files are:</p>
<quote who="Dimitrie Paun"><p>
Perfect! We need a guy like you on the team, we're not that
graphically inclined :)
</p><p>
There is no official list of things that need work. But you can
try by reviewing what we already have in there, and see what
needs love (I'm sure you'll find stuff &lt; g &gt;).
</p><p>
Here are the list of icons:
(Please note that to get these you'll need to build wine. These
resources are not included "as is" in the code, rather they are
hex encoded as text in resource files (.rc). The build process
extracts them from there into the files listed below, via a tool
of ours (tools/bin2res). If you modify these extracted files, 
this same tool can be later used to encode them back into the
.rc files where they belong. Once there, you can just create
a regular patch and send it over to wine-patches_at_winehq.org
for inclusion into the tree)
<ul>
./dlls/commdlg/cdrom.ico<br />
./dlls/commdlg/floppy.ico<br />
./dlls/commdlg/folder2.ico<br />
./dlls/commdlg/folder.ico<br />
./dlls/commdlg/hdisk.ico<br />
./dlls/commdlg/network.ico<br />
./dlls/commdlg/pd32_collate.ico<br />
./dlls/commdlg/pd32_landscape.ico<br />
./dlls/commdlg/pd32_nocollate.ico<br />
./dlls/commdlg/pd32_portrait.ico<br />
./dlls/shell32/desktop.ico<br />
./dlls/shell32/document.ico<br />
./dlls/shell32/drive.ico<br />
./dlls/shell32/folder.ico<br />
./dlls/shell32/folder_open.ico<br />
./dlls/shell32/mycomputer.ico<br />
./dlls/shell32/000.ico<br />
./dlls/shell32/003.ico<br />
./dlls/shell32/004.ico<br />
./dlls/shell32/008.ico<br />
./dlls/shell32/015.ico<br />
./dlls/shell32/034.ico<br />
./dlls/user/resources/oic_bang.ico<br />
./dlls/user/resources/oic_hand.ico<br />
./dlls/user/resources/oic_note.ico<br />
./dlls/user/resources/oic_ques.ico<br />
./dlls/user/resources/oic_sample.ico<br />
./dlls/user/resources/oic_winlogo.ico<br />
./dlls/user/oic_bang.ico<br />
./dlls/user/oic_hand.ico<br />
./dlls/user/oic_note.ico<br />
./dlls/user/oic_ques.ico<br />
./dlls/user/oic_sample.ico<br />
./dlls/user/oic_winlogo.ico<br />
./programs/cmdlgtst/about.ico<br />
./programs/uninstaller/uninstaller.ico<br />
./programs/wcmd/wcmd.ico<br />
./programs/winefile/winefile.ico<br />
./programs/winemine/winemine.ico</ul></p><p>

And the list of bitmaps:
<ul>
./dlls/comctl32/idb_hist_large.bmp<br />
./dlls/comctl32/idb_hist_small.bmp<br />
./dlls/comctl32/idb_std_large.bmp<br />
./dlls/comctl32/idb_view_large.bmp<br />
./dlls/comctl32/idb_view_small.bmp<br />
./dlls/commdlg/800.bmp<br />
./dlls/commdlg/fontpics.bmp<br />
./dlls/user/resources/obm_btncorners.bmp<br />
./dlls/user/resources/obm_btsize.bmp<br />
./dlls/user/resources/obm_check.bmp<br />
./dlls/user/resources/obm_checkboxes.bmp<br />
./dlls/user/resources/obm_close.bmp<br />
./dlls/user/resources/obm_combo.bmp<br />
./dlls/user/resources/obm_dnarrow.bmp<br />
./dlls/user/resources/obm_dnarrowd.bmp<br />
./dlls/user/resources/obm_dnarrowi.bmp<br />
./dlls/user/resources/obm_lfarrow.bmp<br />
./dlls/user/resources/obm_lfarrowd.bmp<br />
./dlls/user/resources/obm_lfarrowi.bmp<br />
./dlls/user/resources/obm_mnarrow.bmp<br />
./dlls/user/resources/obm_old_close.bmp<br />
./dlls/user/resources/obm_old_dnarrow.bmp<br />
./dlls/user/resources/obm_old_lfarrow.bmp<br />
./dlls/user/resources/obm_old_reduce.bmp<br />
./dlls/user/resources/obm_old_restore.bmp<br />
./dlls/user/resources/obm_old_rgarrow.bmp<br />
./dlls/user/resources/obm_old_uparrow.bmp<br />
./dlls/user/resources/obm_old_zoom.bmp<br />
./dlls/user/resources/obm_reduce.bmp<br />
./dlls/user/resources/obm_reduced.bmp<br />
./dlls/user/resources/obm_restore.bmp<br />
./dlls/user/resources/obm_restored.bmp<br />
./dlls/user/resources/obm_rgarrow.bmp<br />
./dlls/user/resources/obm_rgarrowd.bmp     <br />
./dlls/user/resources/obm_rgarrowi.bmp<br />
./dlls/user/resources/obm_size.bmp<br />
./dlls/user/resources/obm_trtype.bmp<br />
./dlls/user/resources/obm_uparrow.bmp<br />
./dlls/user/resources/obm_uparrowd.bmp<br />
./dlls/user/resources/obm_uparrowi.bmp<br />
./dlls/user/resources/obm_zoom.bmp<br />
./dlls/user/resources/obm_zoomd.bmp<br />
./dlls/user/obm_btncorners.bmp<br />
./dlls/user/obm_btsize.bmp<br />
./dlls/user/obm_check.bmp<br />
./dlls/user/obm_checkboxes.bmp<br />
./dlls/user/obm_close.bmp<br />
./dlls/user/obm_combo.bmp<br />
./dlls/user/obm_dnarrow.bmp<br />
./dlls/user/obm_dnarrowd.bmp<br />
./dlls/user/obm_dnarrowi.bmp<br />
./dlls/user/obm_lfarrow.bmp<br />
./dlls/user/obm_lfarrowd.bmp<br />
./dlls/user/obm_lfarrowi.bmp<br />
./dlls/user/obm_mnarrow.bmp<br />
./dlls/user/obm_old_close.bmp<br />
./dlls/user/obm_old_dnarrow.bmp<br />
./dlls/user/obm_old_lfarrow.bmp<br />
./dlls/user/obm_old_reduce.bmp<br />
./dlls/user/obm_old_restore.bmp<br />
./dlls/user/obm_old_rgarrow.bmp<br />
./dlls/user/obm_old_uparrow.bmp      <br />
./dlls/user/obm_old_zoom.bmp<br />
./dlls/user/obm_reduce.bmp<br />
./dlls/user/obm_reduced.bmp<br />
./dlls/user/obm_restore.bmp<br />
./dlls/user/obm_restored.bmp<br />
./dlls/user/obm_rgarrow.bmp<br />
./dlls/user/obm_rgarrowd.bmp<br />
./dlls/user/obm_rgarrowi.bmp<br />
./dlls/user/obm_size.bmp<br />
./dlls/user/obm_trtype.bmp<br />
./dlls/user/obm_uparrow.bmp<br />
./dlls/user/obm_uparrowd.bmp<br />
./dlls/user/obm_uparrowi.bmp<br />
./dlls/user/obm_zoom.bmp<br />
./dlls/user/obm_zoomd.bmp<br />
./programs/regedit/folder1.bmp<br />
./programs/regedit/folder2.bmp<br />
./programs/regedit/folder3.bmp<br />
./programs/winecfg/idb_wine.bmp<br />
./programs/winefile/drivebar.bmp<br />
./programs/winefile/images.bmp<br />
./programs/winefile/toolbar.bmp<br />
./programs/winemine/faces.bmp<br />
./programs/winemine/leds.bmp<br />
./programs/winemine/mines.bmp</ul></p></quote>

<p>Anyone wanting to help Terry may want to contact him, 
his email address is on his
<a href="http://www.winehq.org/hypermail/wine-devel/2004/02/0174.html">original post</a>.
</p>

</section>

<section 
	title="VisualAge Smalltalk as a Test Program" 
	subject="An excellent test program for Wine"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/02/0202.html" 
	posts="1"
	startdate="02/10/2004"
>
<topic>Testing</topic>
<p>Someone wrote to the list to give mention a good program to
test Wine with:</p>
<quote who="Unknown"><p>
I find the following program to be an excellent test program for 
anything that acts like Windows.  The program is Vast and may be 
downloaded from 
<a href="http://www-306.ibm.com/software/awdtools/smalltalk/">http://www-306.ibm.com/software/awdtools/smalltalk/</a>. 
The program you want is the 6.0.2 fixpack which is also a fully 
operational evaluation version of Vast.  It gives an evaluation notice 
on startup but is not disabled and has no timeout.  The value of this 
program is that it runs on everything from Win 95 on and uses just about 
every feature in a Windows system.  It is one of the best tests of 
system integrity I have been able to find.  It almost installs and runs 
on Wine.
</p></quote>

<p>Vast is IBM's "VisualAge Smalltalk".  </p>

</section></kc>
