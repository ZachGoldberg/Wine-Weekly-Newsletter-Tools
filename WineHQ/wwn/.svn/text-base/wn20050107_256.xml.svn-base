<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="256" date="01/07/2005" />
<intro> <p>This is the 256th issue of the Wine Weekly News publication.
Its main goal is to recover from the holidays. It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="196" size="969" contrib="72" multiples="42" lastweek="27">

<person posts="24" size="115" who="Mike Hearn" />
<person posts="12" size="43" who="Ivan Leo Puoti" />
<person posts="12" size="34" who="Dimitrie O. Paun" />
<person posts="12" size="29" who="Alexandre Julliard" />
<person posts="9" size="56" who="Robert Shearman" />
<person posts="8" size="29" who="Mike McCormack" />
<person posts="6" size="14" who="Scott Ritchie" />
<person posts="5" size="17" who="Vincent B&#233;ron" />
<person posts="4" size="28" who="Gabriel de Perthuis" />
<person posts="4" size="10" who="Eric Pouech" />
<person posts="3" size="76" who="Bill Medland" />
<person posts="3" size="37" who="MediaHost (TM)" />
<person posts="3" size="23" who="Bryce McKinlay" />
<person posts="3" size="20" who="(pageexec)" />
<person posts="3" size="9" who="Tony Lambregts" />
<person posts="3" size="8" who="Dmitry Timoshkov" />
<person posts="3" size="8" who="Marcus Meissner" />
<person posts="3" size="7" who="Andreas Mohr" />
<person posts="3" size="7" who="Rein Klazes" />
<person posts="3" size="7" who="Jeremy Newman" />
<person posts="2" size="112" who="=?ISO-8859-1?Q?R=E9mi_Assailly?=" />
<person posts="2" size="59" who="Aneurin Price" />
<person posts="2" size="9" who="Dan Kegel" />
<person posts="2" size="9" who="Christian Costa" />
<person posts="2" size="9" who="Stefan Leichter" />
<person posts="2" size="8" who="Udo Rader" />
<person posts="2" size="7" who="Paul van Schayck" />
<person posts="2" size="7" who="Peter Berg Larsen" />
<person posts="2" size="6" who="Paul Vriens" />
<person posts="2" size="6" who="Michael Jung" />
<person posts="2" size="6" who="Jacek Caban" />
<person posts="2" size="6" who="Michael Stefaniuc" />
<person posts="2" size="5" who="Boaz Harrosh" />
<person posts="2" size="5" who="Kuba Ober" />
<person posts="2" size="5" who="Francois Gouget" />
<person posts="2" size="5" who="Tobias Burnus" />
<person posts="2" size="5" who="Juan Lang" />
<person posts="2" size="4" who="Dripple" />
<person posts="2" size="4" who="Paul Vriens" />
<person posts="2" size="3" who="Vitaly Lipatov" />
<person posts="1" size="7" who="Jasper van Veghel" />
<person posts="1" size="4" who="Rick Romero" />
<person posts="1" size="4" who="Maxime Bellenge" />
<person posts="1" size="3" who="Daniel Jacobowitz" />
<person posts="1" size="3" who="Eric Frias" />
<person posts="1" size="3" who="StartCom Ltd." />
<person posts="1" size="3" who="Ingo Molnar" />
<person posts="1" size="3" who="Jeremy White" />
<person posts="1" size="3" who="David =?iso-8859-1?q?G=FCmbel?=" />
<person posts="1" size="3" who="Holly Bostick" />
<person posts="1" size="3" who="Kenneth Porter" />
<person posts="1" size="3" who="Walt Ogburn" />
<person posts="1" size="3" who="Troy Rollo" />
<person posts="1" size="2" who="Thomas Sailer" />
<person posts="1" size="2" who="luis lenders" />
<person posts="1" size="2" who="Andrew Morton" />
<person posts="1" size="2" who="Jon Griffiths" />
<person posts="1" size="2" who="Shachar Shemesh" />
<person posts="1" size="2" who=" &lt;jumbomail_admin1@libero.it&gt;" />
<person posts="1" size="2" who="Ferenc Wagner" />
<person posts="1" size="2" who="Jakob Eriksson" />
<person posts="1" size="2" who="Tom" />
<person posts="1" size="2" who="Chris Morgan" />
<person posts="1" size="2" who="Dietrich Teickner" />
<person posts="1" size="2" who="Tony Lambregts" />
<person posts="1" size="2" who="Lionel Ulmer" />
<person posts="1" size="2" who="Joris Huizer" />
<person posts="2" size="3" who="Gerald Pfeifer" />

</stats>
<section 
	title="News: 'Trouble-Free Computing'" 
	subject="News"
	archive="http://searchenterpriselinux.techtarget.com/originalContent/0,289142,sid39_gci1041942,00.html"
	posts="1"
	startdate="01/01/2005"
	enddate="01/07/2005"
>
<topic>News</topic>
<p>Robin Miller has written a new book published by Prentice Hall, PTR titled
<i>"Point &amp; Click Linux: Your Guide to Trouble-Free Computing"</i>.
Apparently using CrossOver Office is discussed in the book and
<a href="http://searchenterpriselinux.techtarget.com/originalContent/0,289142,sid39_gci1041942,00.html">SearchEnterpriseLinux.com covered that aspect</a>
briefly in an article.  This seems to be the second part of a series,
but I was unable to find the first part.</p>

</section>
<section 
	title="Wine - A Look Ahead" 
	subject="December 2004 - more patches than you can shake a stick at"
	archive="http://www.winehq.org/hypermail/wine-devel/2005/01/0014.html" 
	posts="6"
	startdate="01/02/2005"
	enddate="01/03/2005"
>
<topic>Status Updates</topic>
<p>There's a lot of work being done on Wine right
now, just about more than we've ever seen.  Mike 
Hearn put together a really nice summary of things
going on and where we're headed going into 2005:</p>

<quote who="Mike Hearn"><p>

Happy new year everybody!
</p><p>
Being the patch fetishist that I am, I couldn't help noticing that in
December 2004 we cleared 8MB of patches: that's by far the largest since
the current archives began in October 2000.
</p><p>
The extra traffic came from a lot of places:
<ul>
<li>  Huge improvements to the Application Database.</li>

<li>  The number was also pushed higher by an MSI merge from CodeWeavers.</li>

<li>  Some big janitorial patches went in from Michael Stefaniuc</li>

<li>  Finally Rob and I were cranking out DCOM patches, and there are of
   course lots more in the pipeline.</li>
</ul></p><p>
Now time for some crystal ball gazing. Here are some interesting patches
we might be seeing in 2005:
<ul>
<li><p>  Completion of the WM rewrite work. Alexandre seems to be making great
   progress on this, which will let us fix many of the odd visual
   corruption problems we've been plagued with for so long. It'll also 
   let us remerge Alex's winedesktop patch, giving us a real desktop window
   that is used for all apps, at last. 
   </p><p>
   It should have many other benefits too: fixing the flickering in 
   the Half Life menus and allowing us to support the NETWM fullscreen
   protocol. This should let us resolve many instances of the "my game
   starts but I can't type" problem.</p></li>

<li><p>  Lots more DCOM code. Huw Davies is hacking on getting widl to produce
   a stdole32.tlb file, once that's in we can start really nailing 
   InstallShield to the wall. We will hopefully get this and the
   thread-affinity patches in the next few months, which should mean 
   for the first time we can run InstallShield 6 installers perfectly, out
   of the box.
   </p><p>
   Support for newer InstallShields will come as time permits of course.
   </p></li>

<li>  More MSI improvements! CodeWeavers are continuing to work on
   this so it should develop nicely even though the iTunes installer 
   work has been completed. Office 2003 will also motivate this. It's
   being used by at least one commercial app porting project as well.</li>

<li>  Support for running Winelib apps directly, so we can get rid of the
   .exe.so extensions/shell wrapper scripts, and produce "raw" ELF
   binaries. They'll still need the wine loader app to be present of
   course, but it should all be invisible and behind the scenes. Vincent
   Beron and I have been working on this in the last week or so, and we
   just need to finish it off and convince Alexandre the extra assembly
   is worth it! :)</li></ul>
</p><p>
Who knows what the new year will bring? More apps working out of the box,
that's for sure! Have fun!
</p></quote>

<p> Rein Klazes put together a graph showing how much Wine's
codebase has grown:</p>
<quote who="Rein Klazes"><p>
For those that like such statistics:
<ul>
 <a href="http://home.wanadoo.nl/wijn/wine/cvssize.png">
 http://home.wanadoo.nl/wijn/wine/cvssize.png</a></ul></p></quote>

</section>
<section
        title="DCOM Status Update and Roadmap"
        subject="DCOM roadmap"
        archive="http://www.winehq.org/hypermail/wine-devel/2005/01/0163.html"
        posts="1"
        startdate="01/06/2005"
>
<topic>Status Updates</topic>

<p>Wine's DCOM implementation has been a thorn in the side for
quite a while.  It's an extremely difficult area to work on and
it's not exactly something you can just blindly jump into.  For
that reason, you'll find a lot of suggestions for downloading
Microsoft's DCOM implementation for Windows9x and use that.  Since
InstallShield installers need it, you'll find it's a common 
suggestion.  A rewrite of Wine's DCOM has been planned for well
over a year, work began last month, and patches have been coming
in almost daily.  Mike Hearn dropped a note to let everyone know 
what's going on:</p>
<quote who="Mike Hearn"><p>

I thought I'd post an update on where Rob and I are up to, and where
we're going. This is the plan that I have in my head, Rob may want to do
things in a slightly different order etc so don't be surprised if we
change some stuff around as a result of this email.
</p><p>
We're currently reworking, extending and in some cases rewriting the
code Marcus wrote originally to work more like native DCOM does. This
means that new features and major improvements are *not* going to happen
for a while, because before we can extend our support for DCOM we have
to migrate to the same architecture that Microsoft uses internally. This
has several benefits:
<ol>
 <li> It saves us design work, because MS already did it</li>
 <li> It's the only way to be wire compatible in the long run</li>
 <li> It means the documentation (like Essential COM etc) is already
  written</li></ol></p><p>

Getting to a more native-style architecture has already been started,
but won't be finished for a while. Here are the steps we need to take,
the ones marked with a * are already done, - [<i>ed note: or a bullet</i>]
means they are still to do.
</p><p>
<ul>
<li> Replace the wine_marshal_id structure with [STD]OBJREF. This is
 necessary because the Microsoft internal interfaces like IOXIDResolver
 and IRemoteActivation operate in terms of OBJREFs. An OBJREF is a
 marshalled interface pointer, so by using the same structure we're
 able to be wire-compatible with MS.
 <ul>
     * Switch apartments to be identified by OXIDs<br />
     * Refactor and extend the stub manager, identified by OIDs<br />
     * Refactor and extend the proxy manager
     <ul>
          - Make all system interface proxies support aggregation</ul>
     - Identify interface stubs by IPID not IID<br />
     - Do a search and replace of wine_marshal_id with STDOBJREF</ul></li>

<li> Alexandre has stated that he won't allow any more midl generated
 code in WineHQ. Enhance widl until it can generate raw RPC marshallers
 for at least IRemUnknown.</li>

<li> Generate unique names for the pipes we currently use in communication
 and pull the right name from the OBJREF DUALSTRINGARRAY. In real
 DCOM this contains the RPC string binding for the OXID Resolver
 endpoint. This should be the first enhanced feature, as at this
 point you can run two apps at once that happen to marshal the same
 interface, and they won't interfere.</li>

<li> Implement IRemUnknown, using custom marshalling for now. Use this
 to nail distributed refcounting, at the moment we have a bunch of
 bad hacks for that.</li>

<li> Flip DCOM on top of the RPC transport layer, replacing the current
 named pipe based IRpcChannelBuffer implementation. Not necessarily
 using NDR marshalling at this point, though we may find it's
 necessary (?)</li>

<li> Rework RPC dispatch to be more Windows-like, so call re-entrancy
 works.</li>

<li> Implement RPC thread affinity. This will fix the InstallShield
 painting problems ... yes it's a long way off :(</li>

<li> Begin rewriting/moving the typelib marshaller to rpcrt4 and to use NDR
 (in Windows this is done by generating MOPs at runtime from the type
 data)</li>

<li>.... this point is so far off I don't really care about it ....</li>
</ul></p><p>

I probably forgot some items as well. But as you can see we only just
begun. Also remember that Rob may want to modify it and also we may
change direction at any point to make stuff we want internally work
(like native MSIv2 ...)
</p></quote>

<p>Huw Davies is doing a lot of the work on widl, and this week posted
an interesting patch:</p> 
<quote who="Huw Davies"><p>

This adds preliminary support for typelib generation to widl.  It's
not enough to generate stdole32.tlb mainly because it doesn't cope
with some of the builtin types, like VARIANT, properly yet.  However
it should be possible to generate simple typelibs (for testing the
typelib marshaller for instance).  I'm going to continue to work on
this so let me know if you're interested in helping out.</p></quote>

</section>

<section
        title="Removing DCOM From SourceForge"
        subject="dcom95.exe removed from sf.net"
        archive="http://www.winehq.org/hypermail/wine-devel/2005/01/0040.html"
        posts="17"
        startdate="01/03/2005"
	enddate="01/04/2005"
>
<topic>Status Updates</topic>

<p>Jeremy Newman found someone had made some changes to SourceForge
and wondered why:</p>
<quote who="Jeremy Newman"><p>
Somebody removed dcom95.exe from sf.net. Was there a reason for that? We
really need to keep that file mirrored. It's an essential file for many
programs to run under wine.
</p><p>
I've re-added the file as a hidden file for the moment. It won't show up
in the download list, but we can still link to it.
</p></quote>

<p>Ivan Leo Puoti took responsibility,
<quote who="Ivan Leo Puoti">
There is a very precise reason for that, according to the sf rules you must
provide the source code of all binaries hosted there, and all files must
comply to the open source definition. I think that ignoring this rule would
be an abuse of sf resources, and disrespectful to other projects. I can host the file
elsewhere if you think we must have a mirror for it.</quote></p>

<p>Ivan mirrored the file on his own site, but Newman wanted reliable
US and international mirrors.  Shachar Shemesh suggested just asking
SourceForge if we could host it there, so Ivan tried.  The response he
got back was a definitive <i>no</i>.  A lot of people were mad at Ivan,
including Mike Hearn:</p>

<quote who="Mike Hearn"><p>

Really Ivan, you may be technically in the right here, but the fact is
you should absolutely have discussed this on wine-devel first. That file
is referenced by various third party scripts/howtos and such, I know this
because I've written these things before. By taking this matter into your
own hands and not discussing it first you went behind the backs of the
community and broke a lot of code and documentation by doing so. My IE
installer script is one example iirc, but I'm sure there are others.
</p><p>
Your admin access on Sourceforge is so you can upload the Mandrake RPMs,
it is *not* so you can interfere with decisions that were made a long
time ago at will. Please remember that in future.</p></quote>

<p>Ivan pointed out he did ask,
<quote who="Ivan Leo Puoti">
Hem, Mike I did ask about this on wine-devel and got no answers.
I am *not* the sort of person that would take decisions like that one without discussing it first,
but as nobody answered I thought nobody cared, it is not my intent to interfere with anything.
I just don't think it's nice to violate the sf.net rules, and I believe it's disrespectful to other 
projects. Closed source files can be useful to linux users, but this is no excuse.
If the wine community thinks the sf TOS isn't important, fine, but I disassociate myself from 
such a decision.
</quote></p>

<p>Jeremy White apologized:</p>

<quote who="Jeremy White"><p>
I was puzzled by this, because I shared Mike's concern that you
unilaterally removed this file, and it seemed abrupt and unannounced
to me as well.
</p><p>
So I searched around, and I see that you brought this up in April,
and then nicely followed through by submitting patches to change
Wine to not point to SF, but instead to Microsoft.
</p><p>
So, I guess that the only thing we could have asked is if you had
posted a note saying something to the effect 'okay, guys, now that
I cleaned up the code to not point to SF, I'm removing the file now...',
which would have wacked us with the clue bat.  And it's a bit tough
to ask us to remember things 8 months out of context...
</p><p>
But it is clear to me that you did try to do 'the right thing',
and we jumped down your throat a bit too quickly.
</p><p>
Sorry about that.
</p></quote>

<p>As it stands, SourceForge no longer hosts the dcom95.exe archive
and several alternative sites have been provided, including:
<ul><li><a href="http://lisas.de/~andi/wine_files/dcom95.exe">
http://lisas.de/~andi/wine_files/dcom95.exe</a> 
[<a href="http://lisas.de/~andi/wine_files/dcom95.exe.md5">MD5</a>]</li>
<li>http://spazioinwind.libero.it/nonsolomicrosoft/dcom95.exe</li>
</ul></p>

</section>

<section 
	title="Another Kernel Issue" 
	subject="Re: ptrace single-stepping change breaks Wine"
	archive="http://www.winehq.com/hypermail/wine-devel/2005/01/0006.html" 
	posts="6"
	startdate="01/01/2005"
	enddate="01/05/2005"
>
<topic>Integration</topic>
<p>We've covered some kernel related problems over the past
few months and last week 
(<a href="http://www.winehq.com/?issue=255#Kernel%20Problem%20Solved%20(con't)">WWN #255</a>) 
it seemed like all the issues were taken care of.  One issue, 
reported by Thomas Sailer and fixed by Mike Hearn, remains open
though.  Mike explained the problem with his solution:</p>
<quote who="Mike Hearn"><p>
I'm afraid Alexandre has decided not to apply this patch (the ABI
personality syscall). His reasoning is as follows:
<ul>
<li> There are a million kernel patches out there which use the ABI 
  personality system to break stuff, which means that realistically
  we have no idea what it does</li>

<li> Therefore, using it would be a big support problem as it may
  even switch off stuff (new features etc) we want, so this system
  doesn't really scale</li>

<li> It'd be a lot better to provide a "disable this mmap
  feature/behaviour" flag for each thing that changes it, or *even*
  better to make it opt-in as having to change the sources to make
  old apps work again kind of defeats the point of backwards
  compatibility (ie, old apps should continue to work as-is)</li>

<li> Another possibility would be to create a new mmap API that lets
  us ask for exactly what we want, instead of second-guessing the
  kernel. I don't know exactly what sort of an API Alexandre has in
  mind here, perhaps he could describe it.</li>

<li> So rather than apply the patch, we have to figure out why 
  flex-mmap is breaking this program and add yet more magic VM code
  to stop it from happening :(</li></ul></p><p>

Could you upload a +relay,+tid,+seh,+msgbox trace somewhere please? Of
course if you could investigate it yourself that'd be the best thing.
</p><p>
I wasn't sure whether to CC some kernel people or not, but it seems from
previous threads that the ABI personality syscall system is meant for
people like us who are trying to keep "legacy" binaries working.
Unfortunately this sort of unbreak-me-please flag isn't really what we
need/want from the kernel.
</p><p>
Also a precise description of what flex-mmap does would be good. Google
wasn't too informative, best I could get was that it means mmap
allocates from the "top" of the address space down. But where is the top
exactly?
</p></quote>

<p>Andrew Morton explained the new mmap procedure:</p>
<quote who="Andrew Morton"><p>

Ingo has described it thus:
</p><p>

before:
<ul>
  0x08000000 ... binary code<br />
  0x08xxxxxx ... brk area<br />
  0x40000000 ... start of mmap, new mmaps go after old ones<br />
  0xbfxxxxxx ... stack</ul>
</p><p>
after:
<ul>
  0x08000000 ... binary code<br />
  0x08xxxxxx ... brk area<br />
  0xbfxxxxxx ... _end_ of all mmaps, new mmaps go below old ones<br />
  0xbfyyyyyy ... stack</ul>
</p><p>
the 'after' layout guarantees that brk area (malloc()) can grow
unlimited and mmap() can grow unlimited - they will meet somewhere
inbetween when almost all of the VM is used up. [the 'top' of the mmaps
in the 'after' layout is constrained by the stack ulimit - the stack
must still fit and we never allocate into the stack's yet unallocated
and growable hole.]
</p><p>
with the 'before' layout we've got 900 MB for brk() and 1.9GB for
mmaps() - a rigid limit.
</p></quote>

<p>Ingo Molnar offered a workaround:</p>
<quote who="Ingo Molnar"><p>
another workaround to switch off flex-mmap is to set the stack ulimit to
'unlimited':<ul><code>


 saturn:~&gt; cat /proc/self/maps | tail -7<br />
 b7db3000-b7db4000 r--p 00cfd000 03:41 3735973    /usr/lib/locale/locale-archive<br />
 b7db4000-b7de1000 r--p 00ccc000 03:41 3735973    /usr/lib/locale/locale-archive<br />
 b7de1000-b7de7000 r--p 00cc3000 03:41 3735973    /usr/lib/locale/locale-archive<br />
 b7de7000-b7fe7000 r--p 00000000 03:41 3735973    /usr/lib/locale/locale-archive<br />
 b7fe7000-b7fe8000 rw-p b7fe7000 00:00 0<br />
 bff2c000-c0000000 rw-p bff2c000 00:00 0<br />
 ffffe000-fffff000 ---p 00000000 00:00 0<br /><br />

 saturn:~> ulimit -s unlimited<br /><br />

 saturn:~> cat /proc/self/maps | tail -7<br />
 42188000-4218a000 rw-p 00014000 03:41 3433982    /lib/ld-2.3.3.so<br />
 4218c000-422aa000 r-xp 00000000 03:41 3434006    /lib/tls/libc-2.3.3.so<br />
 422aa000-422ac000 r--p 0011d000 03:41 3434006    /lib/tls/libc-2.3.3.so<br />
 422ac000-422ae000 rw-p 0011f000 03:41 3434006    /lib/tls/libc-2.3.3.so<br />
 422ae000-422b0000 rw-p 422ae000 00:00 0<br />
 bfea0000-c0000000 rw-p bfea0000 00:00 0<br />
 ffffe000-fffff000 ---p 00000000 00:00 0</code></ul></p><p>

e.g. SuSE defaults to an unlimited stack so flex-mmap is effectively
disabled there.
</p><p>
To set the VM to legacy, for all apps, set /proc/sys/vm/legacy_va_layout
to 1.
</p></quote>

<p>With regards to creating a new mmap API mentioned by Mike, Alexandre
described what he'd like to see:</p>
<quote who="Alexandre Julliard"><p>
Probably the easiest would be to have a way for an app to specify the
mmap range it wants. So instead of having the kernel try to guess from
brk and stack ulimit, both of which are meaningless for Win32 apps, we
could set the range from "end of win32 exe" to 0x7ff0000. This would
also avoid the need to preallocate everything above 0x80000000 that we
currently do and that plays havoc with address space limits.</p></quote>
</section></kc>
