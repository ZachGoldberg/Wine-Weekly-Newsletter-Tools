<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="331" date="05/14/2007" />
<intro> <p>This is the 331th issue of the Wine Weekly News publication.
Its main goal is to moonlight. It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="340" size="672" contrib="93" multiples="52" lastweek="53">

<person posts="33" size="36" who="julliard at winehq.org (Alexandre Julliard)" />
<person posts="25" size="39" who="speeddymon at gmail.com (Tom Spear)" />
<person posts="19" size="120" who="mounir.idrassi at idrix.fr (Mounir IDRASSI)" />
<person posts="18" size="18" who="dmitry at codeweavers.com (Dmitry Timoshkov)" />
<person posts="14" size="23" who="truiken at gmail.com (James Hawkins)" />
<person posts="11" size="28" who="eric.pouech at wanadoo.fr (Eric Pouech)" />
<person posts="19" size="78" who="stefan at codeweavers.com (Stefan D&#246;singer)" />
<person posts="8" size="19" who="wine-devel at kievinfo.com (Vitaliy Margolen)" />
<person posts="8" size="14" who="vbudovski at gmail.com (Vitaly Budovski)" />
<person posts="8" size="10" who="lich at math.spbu.ru (Kirill K. Smirnov)" />
<person posts="8" size="8" who="winehacker at gmail.com (Steven Edwards)" />
<person posts="8" size="7" who="wine.dev at web.de (Detlef Riekenberg)" />
<person posts="8" size="6" who="hverbeet at gmail.com (H. Verbeet)" />
<person posts="7" size="14" who="billmedland at shaw.ca (Bill Medland)" />
<person posts="8" size="8" who="dank at kegel.com (Dan Kegel)" />
<person posts="5" size="17" who="markus.amsler at oribi.org (Markus Amsler)" />
<person posts="5" size="8" who="m.b.lankhorst at gmail.com (Maarten Lankhorst)" />
<person posts="5" size="6" who="rob at codeweavers.com (Robert Shearman)" />
<person posts="5" size="6" who="scott at open-vote.org (Scott Ritchie)" />
<person posts="4" size="17" who="kai.blin at gmail.com (Kai Blin)" />
<person posts="4" size="8" who="patrol at sinus.cz (Pavel Troller)" />
<person posts="4" size="8" who="r.kalbermatter at hccnet.nl (Rolf Kalbermatter)" />
<person posts="4" size="6" who="mk144210 at bcm.edu (Misha Koshelev)" />
<person posts="4" size="5" who="paul.vriens.wine at gmail.com (Paul Vriens)" />
<person posts="4" size="4" who="ead1234 at hotmail.com (EA Durbin)" />
<person posts="3" size="8" who="jkburges at gmail.com (Jon Burgess)" />
<person posts="3" size="6" who="kuba at mareimbrium.org (Kuba Ober)" />
<person posts="3" size="6" who="thunder.m at czela.net (Mirek)" />
<person posts="3" size="5" who="the3dfxdude at gmail.com (Jesse Allen)" />
<person posts="3" size="4" who="damjan.jov at gmail.com (Damjan Jovanovic)" />
<person posts="3" size="3" who="jwhite at codeweavers.com (Jeremy White)" />
<person posts="3" size="3" who="juan_lang at yahoo.com (Juan Lang)" />
<person posts="3" size="2" who="dsh at linux.ucla.edu (Dan Hipschman)" />
<person posts="3" size="2" who="xerox_xerox2000 at yahoo.co.uk (Louis Lenders)" />
<person posts="2" size="6" who="andrewriedi at gmail.com (Andrew Riedi)" />
<person posts="2" size="4" who="richardvoigt at gmail.com" />
<person posts="2" size="4" who="sol11x86 at comcast.net (Ben Taylor)" />
<person posts="4" size="4" who="marcus at jet.franken.de (Marcus Meissner)" />
<person posts="2" size="2" who="mstefani at redhat.com (Michael Stefaniuc)" />
<person posts="2" size="2" who="x-amy-fox-x at hotmail.co.uk (Amy Fox)" />
<person posts="2" size="2" who="mschaadt at gmail.com (Mike Schaadt)" />
<person posts="2" size="2" who="hto at mail.cnt.ru" />
<person posts="2" size="2" who="chris.kcat at gmail.com (Chris Robinson)" />
<person posts="2" size="1" who="laurent at vromman.org (Laurent Vromman)" />
<person posts="2" size="1" who="jan.wine at zerebecki.de (Jan Zerebecki)" />
<person posts="2" size="1" who="frank.richter at gmail.com (Frank Richter)" />
<person posts="2" size="1" who="kevin at plop.org (Kevin Koltzau)" />
<person posts="2" size="1" who="Andrew.Talbot at talbotville.com (Andrew Talbot)" />
<person posts="1" size="7" who="sebastien.gripon at googlemail.com (=?ISO-8859-1?Q?S=E9bastien?= GRIPON)" />
<person posts="1" size="3" who="rfairlie at kylebank.com (Robert Fairlie)" />
<person posts="1" size="3" who="beebix at gmx.net (Thorsten Kani)" />
<person posts="1" size="2" who="andreas.bierfert at lowlatency.de (Andreas Bierfert)" />
<person posts="1" size="2" who="ales.rom at kabelnet.net (=?ISO-8859-2?Q?Ale=B9_Rom?=)" />
<person posts="1" size="2" who="zalmaygul at yahoo.com (Zalmay A-khaliq)" />
<person posts="1" size="2" who="dfelinto at gmail.com (Dalai Felinto)" />
<person posts="1" size="2" who="kingofallhearts999 at gmail.com (Bryan Haskins)" />
<person posts="1" size="2" who="sh at sourcecode.de (Stephan Hermann)" />
<person posts="1" size="2" who="alex at thehandofagony.com (Alexander Nicolaysen =?utf-8?q?S=C3=B8rnes?=)" />
<person posts="1" size="2" who="andrey.turkin at gmail.com (Andrey Turkin)" />
<person posts="1" size="2" who="vincent.fourmond at 9online.fr (Vincent Fourmond)" />
<person posts="1" size="1" who="mrmessiah at gmail.com (Chris Howe)" />
<person posts="1" size="1" who="jacek at codeweavers.com (Jacek Caban)" />
<person posts="1" size="1" who="aric at codeweavers.com (Aric Stewart)" />
<person posts="1" size="1" who="ivg231 at gmail.com (Ivan Gyurdiev)" />
<person posts="1" size="1" who="mikolaj at zalewski.pl (=?UTF-8?B?TWlrb8WCYWogWmFsZXdza2k=?=)" />
<person posts="1" size="1" who="jwhite at winehq.org (Jeremy White)" />
<person posts="1" size="1" who="jnewman at codeweavers.com (Jeremy Newman)" />
<person posts="1" size="1" who="tony.lambregts at gmail.com (Tony Lambregts)" />
<person posts="1" size="1" who="fpga at pacbell.net (Duane Clark)" />
<person posts="1" size="1" who="kumbayo84 at arcor.de (Peter Oberndorfer)" />
<person posts="1" size="1" who="chmorgan at gmail.com (Chris Morgan)" />
<person posts="1" size="1" who="mahanuu at free.fr (Emmanuel Maillard)" />
<person posts="1" size="0" who="doctormo at gmail.com (Martin Owens)" />
<person posts="1" size="0" who="ceggers at gmx.de (Christian Eggers)" />
<person posts="1" size="0" who="us at edmeades.me.uk (Ann &amp; Jason Edmeades)" />
<person posts="1" size="0" who="mikolaj at zalewski.pl (=?ISO-8859-2?Q?Miko=B3aj_Zalewski?=)" />
<person posts="1" size="0" who="thestig at google.com (Lei Zhang)" />
<person posts="1" size="0" who="lats at yless4u.com.au (Jeff L)" />
<person posts="1" size="0" who="lurchi at kawo1.rwth-aachen.de (Stefan =?ISO-8859-15?Q?Br=FCns?=)" />
<person posts="1" size="0" who="rmh at aybabtu.com (Robert Millan)" />
<person posts="1" size="0" who="EJGYBOGOIPSJ at spammotel.com (Raymond Barbiero)" />
<person posts="1" size="0" who="dimi at lattica.com (Dimi Paun)" />
<person posts="1" size="0" who="marco at mandrivaclub.nl (marco)" />
<person posts="1" size="0" who="alisson.gomesc at gmail.com (Alisson Gomes)" />

</stats>
<section 
	title="News: Wine 0.9.37, No Wine on Dells, Kidney Stones Suck"
	subject="News"
	archive="http://cvs.winehq.com/cvsweb/wine/ANNOUNCE?rev=1.141&amp;content-type=text/x-cvsweb-markup"
	posts="2"
>
<topic>News</topic>
<p>Last Friday Wine 0.9.27 came out.  New improvements you'll find are:</p>
<quote who="Alexandre Julliard"><p>
<ul>
<li> MSI automation with JScript/VBScript support.</li>
<li> Various MSHTML improvements.</li>
<li> The usual assortment of Direct3D fixes.</li>
<li> Support for a few more exe protection schemes.</li>
</ul>
</p></quote>
<p>


Unless you were living in a cave a few weeks ago, or at least ignoring every
Linux news website, you probably heard Dell is preloading Linux now on desktop 
machines.  I'm still trying to figure out why this is big news since pre-loaded
Linux has been around for a while.  Anyway, other people think it's big news so
we'll play along.  Apparently it was big enough news that eWeek wondered if 
Wine would be shipped on those machines.  There's a decent article,
<a href="http://www.eweek.com/article2/0,1895,2125848,00.asp"><i>Ubuntu 
Founder: No Emulation Software for Dell Systems</i></a>, that explained 
Wine wouldn't be part of the package.  There's also a nice quote by 
Mark Shuttleworth:</p>
<quote who="Mark Shuttleworth"><p>
"While Linux is an alternative to Windows, it is not cheap Windows. Linux has 
its own strengths, and users should want it because of those strengths and not 
because it's a cheap copy of Windows."</p></quote>

<p>To make this non-newsworthy event even an even bigger sensation,
Slashdot decided 
<a href="http://linux.slashdot.org/article.pl?sid=07/05/11/1220219">to 
run with it</a> as well.  If for some reason you have a Debian based
system and you can't figure out how to install Wine, check out our
<a href="http://www.winehq.org/site/download-deb">Debian download</a> page.</p>

<p>In a hilarious press release (and for the record, <i>hilarious press 
release</i> is an oxymoron) Jon Parshall of CodeWeavers postulates that 
developing Wine
<a href="http://www.codeweavers.com/about/general/press/20070501/">may lead to 
kidney stones</a>:</p>
<quote who="CodeWeavers"><p>
Forty-four year old Jon Parshall, chief operating officer for CodeWeavers 
(www.codeweavers.com) - a leading developer of Wine and other Linux programming
solutions, which allows users to run Windows applications without purchasing a 
license from Microsoft - recently suffered two weeks of mind-numbing agony and 
extraordinary urethral discomfort as a result of at least one or possibly more 
kidney stones that suddenly appeared within his urinary system. 
</p><p>
"It was like I was descending into the eighth level of hell," Parshall 
explained. "My days were filled with mouth-drying, white-hot shards of torment 
that stretched from my lower back across to my abdomen and beyond. Sweat-soaked
nights were spent rolling in bed in agony. I pled for a second of respite in 
the form of sleep that never came."
</p></quote>

<p>Oh, and a new version of CrossOver Mac is expected soon that will support
more apps.</p>
</section>
<section 
	title="Direct3D Milestone"
	subject="Small Direct3D milestone"
	archive="http://www.winehq.org/pipermail/wine-devel/2007-May/056777.html"
	posts="13"
>
<topic>DirectX</topic>
<p>Stefan D&#246;singer wanted to let everyone know Direct3D as of Wine
0.9.37 had reached a milestone:</p>
<quote who="Stefan Dosinger"><p>

With Wine 0.9.37 we've achieved something that I allow myself to call a small 
milestone - All Direct3D7 Immediate mode SDK demos successfully perform their 
intended rendering. I have some screenshots on my university junk server:
<ul>
<li><a href="http://stud4.tuwien.ac.at/~e0526822/sdkdemos1.png">
http://stud4.tuwien.ac.at/~e0526822/sdkdemos1.png</a></li>
<li><a href="http://stud4.tuwien.ac.at/~e0526822/sdkdemos2.png">
http://stud4.tuwien.ac.at/~e0526822/sdkdemos2.png</a></li></ul>
</p><p>
Two major problems are left though, namely windowed opengl rendering (see the 
junk where a menu bar should be) and GetDC (there should be a little bit of 
text rendered, I disabled render target locking to get proper performance).
</p><p>
Some demos have a few smaller problems too. The bump earth and bump waves need 
vendor specific extensions (GL_NV_texture_shader2 / GL_ATI_envmap_bumpmap) and 
the bend demo needs GL_ARB_vertex_blend which nvidia does not support. So I 
took that screenshot on my mac running linux (ati radeon X1600). The mipmap 
demo renders the mipmaped texture garbled, although this works on nvidia 
cards. The Z buffer demo says w buffers aren't supported, but the normal z 
buffer does what the w buffer is supposed to do.
</p><p>
What does that mean for gamers? Nothing fancy really, the features used by 
games were implemented a long time ago, the ones we used to miss (fixed 
function bump mapping, vertex blending) aren't really important for games. 
Other DirectDraw features like Overlays aren't implemented either, but we are 
Direct3D 7 feature complete.
</p><p>
Where to go from here? I am currently fixing the DirectDraw rewrite 
regressions I can get hold of, and I am trying to make D3D thread safe 
finally. From the application point of view my focus will stay on fixing 
older apps first, which somewhat includes getting thread safety, render 
target locking and GetDC working properly. My hope is also to fix the other 
related DX7 sdk demos, like the DDraw demos (except overlays, they are highly 
tricky with the current wined3d-x11drv integration) and getting native 
d3drm.dll working.
</p><p>
I also want to say thanks to all the small and big helpers who help with 
technical advice, debugging and regression testing. Special thanks goes to 
Henri without whom I'd be totally lost and who has to be credited for a huge 
majority of the shader work in the last half year, and a lot of other things 
too.
</p><p>
Thanks and continue the good work :-)
</p><p>
PS: As for the screenshots, my space on that server is limited, so they will 
be gone sooner or later. I didn't want to send huge screenshots as 
attachments, not even as jpgs.</p></quote>

<p>Henri Verbeet then suggested D3D8 be the next target, although a lot of
it is implemented.  Stefan explained a little more about future DirectX work:
</p><quote who="Stefan Dosinger"><p>
Yeah, that's the other thing of course :-) But as I said even d3d7 and ddraw
had a few biggies I want to fix. Of course I may grab some low hanging fruits
like kicking out the fvf code from d3d8 and wined3d :-) Or get the sdk demos
going, they should all work now by looking at their names.
</p><p>
The plan is still to sort as many biggies out before the 1.0 freeze. The
sole difference between .36 and .37 from that regard are a few little fixes
specific to the d3d7 sdk and bumpenv mapping implemented. Nothing that gets us
as far as working multithreaded d3d.</p></quote>

<p>After that, several people put in requests for what they'd like to see
working with regard to Direct3D.</p>

</section>
<section 
	title="Activation Context"
	subject="[PATCH 00/27] Activation context (Part I, take 2)"
	archive="http://www.winehq.org/pipermail/wine-patches/2007-May/038947.html"
	posts="28"
>
<topic>Architecture</topic>
<p>A largish patch arrived this week and before we get into it, we'll step 
back and give a little introduction.</p>

<p>Some new features added to Windows in the past few years require learning
some new terminolgy.  Some of this functionality is used by .NET, though
it's not strictly a .NET technology.
So let's say you've got an <i>assembly</i>, a collection of PE files like
DLLs, and you want to describe how they all interelate and what version of
DLL you want to use.  What 
you'd do is create a <i>manifest</i> composed of an XML structure that defines 
how the different classes are bound together, dependencies, versioning info, 
etc.  To get fancier, you can have <i>side-by-side</i> assemblies (SxS) that
allow different versions of the same DLL to exist on the system.  Furthermore,
those libraries can be installed either in private directories, such as the
application directory, or in c:\windows\winsxs.  You can also do things like 
enable different features of the DLL based on the assembly. 
</p>

<p>(Now, if you're thinking that Microsoft has once again tried to engineer
itself out of a DLL-hell, you'd be correct.  No longer does a library need
to worry about backwards compatibility because you can simply ship a
slightly tweaked version of the same library.  The different manifests will
take care of the versioning.)
</p>

<p>Okay, so how much of that infrastructure exists in Wine.. um.. lesse..
not a whole hell of a lot.  What is it needed for?  Well, pretty much
any app requiring version 8 of the Microsoft C runtime libraries (msvcr80.dll).
These changes require modifications of Wine's loader
mechanism, something that's been considered stable for quite a few
years.  Fortunately, the changes shouldn't be too invasive and don't
require rearchitecting such a core component.
</p>
<p>Eric Pouech and Jacek Caban posted the initial patch for some of this 
stuff.  It consists of 2800+ lines of code spread across 27 different 
patches.  By way of introduction, Eric explained what's been implemented
so far:</p>
<quote who="Eric Pouech"><p>
The following series provides a first real implementation of activation 
contexts. It has been written by Jacek Caban and myself. Even if individual 
patches show only one of the two names (for ease of packaging), reality is 
different. In many cases, ideas, implementation, bug fix(es), improvements have 
been done by both of us.
</p><p>
Basically, this first series of patches implements:
<ul>
<li> searching and building the hierarchy of manifests needed by an application</li>
<li> parsing of such manifests</li>
<li> implementation of the Query function on this hierarchy of manifests</li>
<li> core activation context manipulation APIs (add/release ref, stacking...)</li>
</ul></p><p>
This doesn't allow yet to let an application with manifest being successfully 
run in Wine. This will require:
<ul>
<li> implementing the Find functions</li>
<li> patching the DLL loader (for both DLL lookup at first step; name prefixing
 will come later on)</li>
<li> enhancing the process loader a bit</li>
</ul></p><p>
The core idea of this set would be to let an app with a manifest and linked to 
msvcrt80 be successfully run under Wine.
</p><p>
Jacek and I have preliminary work on this, but this is not fully ready, so 
let's start with committing this first set.
</p><p>
What will still have to be done afterwards includes:
<ul>
<li> moving code from kernel32 to ntdll (no doc exists on the Web currently 
  for those)</li>
<li> all the COM, window class, name prefixing that's allowed </li></ul>
</p></quote>

<p>Alexandre had some technical comments about the patch series and ended
it with:</p>
<quote who="Alexandre Julliard"><p>
I don't think this patch series is quite ready to go in; this is the
third resend and all patches still have obvious bugs. You need to
spend more time on it, this is kernel stuff, it needs to be correct.
</p></quote>
</section>
<section 
	title="USB Support in Wine"
	subject="USB device support in wine"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-May/056531.html"
	posts="13"
>
<topic>Architecture</topic>
<p>This topic hasn't come up for a while, so it's probably useful to go
over it again.  Jon Burgess asked a question about USB support in Wine:</p>
<quote who="Jon Burgess"><p>
I have found some talk of implementing USB device support in wine in this
list some time ago (2005), but as far as I know, nothing ever came of it.
</p><p>
I would perhaps be interested in getting this going again, as I have an
application (Serato Scratch Live: http://www.rane.com/scratch.html) for
which the software appears to run ok under wine (not that I am able to test
much of its functionality on the other hand), but is utterly useless without
support for its associated USB hardware device.
</p><p>
Any ideas, or anyone else who would be interested in helping me?
</p></quote>

<p>Damjan Jovanovic replied with an excellent description of the problem at 
hand:</p>
<quote who="Damjan Jovanovic"><p>
There is no "standard" driver for your USB device (like for
example there is just 1 driver for all USB flash disks, because
they're all in the same device class). You have the use the
vendor-supplied .SYS file.
</p><p>
Will it work on wine right now? Not even remotely.
Will it ever? Read on...
</p><p>
There is no standard user-mode interface for accessing USB hardware -
there is no equivalent of Linux's libusb on Windows (there is
apparently some user-space USB stuff in mingw's headers, but I
couldn't find any official docs on it, and it's not enough to write a
user-space driver because there is no bulk/interrupt/isochronous pipe
support, so I doubt anybody actually uses it). There is only
kernel-mode interfaces for talking to USB - and different kernel mode
drivers will export different user-mode interfaces (if any).
</p><p>
So user-space software uses a kernel-mode driver. If that driver is
documented, like USBSCAN.SYS and USBPRINT.SYS, its interface can be
done in wine, and wine can be connected to USB in a number of ways
(which I'll discuss later). If that driver is undocumented, either you
have to document it by reverse-engineering (very hard) and continue
with the first way, or (the second way:) make wine's not-yet-existing
NTOSKRNL.EXE load that driver, *and* provide NTOSKRNL.EXE with all the
USB interfaces that Windows has.
</p><p>
<u>CONNECTING WINE TO USB: A HOW-TO GUIDE</u>
</p><p>
There are 4 ways to do it:
<ol>
<li> Make a kernel module in your OS (eg. a Linux kernel module) that
exports the same interface that the software expects and works the
same way as the Windows driver. Using USBSCAN.SYS as an example,
reading does a USB bulk read, writing does a USB bulk write, and 13 or
so i/o control codes do various other things, among them USB control
and interrupt transfers. Change kernel32's CreateFileW() to open the
/dev device node used by the kernel module and send it to the wine
server using wine_server_fd_to_handle(), then reading and writing will
go to your kernel module, where you can implement them by doing USB
reads and writes. Change ntdll's file.c's NtDeviceIoControlFile to
capture i/o control codes used by your device, call
wine_server_handle_to_fd(), and do an ioctl() on that fd to send that
i/o control call to the kernel module, which then reacts
appropriately. This way has been tested by me, it works and it's fast,
but it's non-portable (eg. Linux-only, and Linux's USB interface keeps
changing so an out-of-tree module will only work on some versions, the
usual problems...), difficult (kernel-mode code is hard to write), and
generally a royal PITA.
</li>
<li> Like (1) but use a framework like FUSD (the xiph.org version works
on 2.6 kernels) to write the driver in user-space and then do USB I/O
using libusb. I'm currently testing this approach, I suspect it's slow
(how significantly remains to be seen), but at least it's more
portable between Linux versions and easier to write and maintain.
</li>
<li> Integrate your device into wine directly the way eg. serial ports
have been done. This is hard, and requires introducing a new FD_TYPE,
changing ntdll's file.c's NtReadFile, NtWriteFile, and
NtDeviceIoControlFile (and asynchronous versions of those) to use
special behavior for that FD_TYPE, and managing global device state
(eg. i/o timeouts) in wineserver (look at server/serial.c). With a lot
of time, and some changes to both wine and libusb, you could get it to
work properly. This should IMO only be done for generally useful
drivers, not drivers for just 1 type of device.
</li>
<li> Integrate NTOSKRNL.EXE into wine, add USB infrastructure to
NTOSKRNL.EXE so that kernel-mode drivers can access USB (probably
through libusb), and modify ntdll to forward the appropriate reads,
writes, and i/o control requests to NTOSKRNL.EXE so that the .SYS file
can handle them. This is the only way that works with .SYS files
out-of-the-box, the others all require a rewrite of the .SYS driver's
functionality. Architecturally, this is the best way, you wouldn't
need to change any code in wine to add a new driver.</li>
</ol></p><p>
Way 4 is probably the best and I hope it works at some stage, but it's
still a long way off seeing as how NTOSKRNL.EXE itself still isn't in
wine.</p></quote>

<p>A dedicated person could probably pull this off over a few months.  One
of the tricky things will be to get it accepted into Wine.  An ntoskrnl.exe
was written a couple of years ago to load drivers, specifically the Safedisc
Windows kernel driver, but it still hasn't been accepted.  Apparently there's
some low-level internal Wine issues and Alexandre wants those fixed before
accepting the patch.</p>

<p>A few people pointed out that different methods on Windows do exist that
allow device drivers to be written to a standard framework.</p>
</section>
<section 
	title="Mandriva RPMs"
	subject="mandriva rpm wine 0.9.37"
	archive="http://www.winehq.org/pipermail/wine-devel/2007-May/056788.html"
	posts="1"
>
<topic>Packaging</topic>
<p>Marco Meijer packaged updated Mandriva RPMs and announced them:</p>
<quote who="Marco Meijer"><p>
As I have still no way to upload the mandriva wine rpm to the
official winehq download server, I put it on my own website.
</p><p>
So Mandriva users you can download the latest wine binaries here:
<ul><a href="http://www.xs4all.nl/~meijer2/wine/">
http://www.xs4all.nl/~meijer2/wine/</a>
</ul></p></quote>

</section>
<section 
	title="Improving Debugging Performance"
	subject="dbghelp performance"
	archive="http://www.winehq.org/pipermail/wine-patches/2007-May/039342.html"
	posts="14"
>
<topic>Debugging</topic>
<p>Markus Amsler felt the time it took to load debug symbols was way too
long.  For example, in World of Warcraft it's 100 seconds or so.  He
came up with a patch to use Wine's Heap memory functions directly and it
reduced the load time to 18 seconds.  There was some back and forth
discussion with Eric Pouech, the resident dbghelp.dll guru, and some
new patches were generated.  Markus benchmarked all the patches and
concluded:</p>
<quote who="Markus Amsler"><p>
I've played around with dbghelp performance. My test case was breaking 
at an unknown symbol (break gaga) while WoW was loaded in the debugger 
(wine winedbg WoW.exe).</p><p>
Conclusions:
<ul>
 <li> current git wins with small debug files (&lt;2M or so), pool_heap wins 
with bigger files. insert_first, process_heap are out.</li>
 <li> small pools have less memory overhead than small heaps</li>
 <li> big pools have more memory overhead than big heaps.</li>
 <li> big pools are a lot slower than big heaps.</li>
</ul></p><p>
IMO the best results would be removing the pools (like in 
process_heap) and freeing unused memory manually, the other way round it 
was allocated. But at a first glance it looks like quite a bit of work, 
which I'm not sure is worth the result. I think the best approach would 
be to code some destroy functions in storage.c which would free the 
allocated vector, sparse_array and hash_table memory. And then gradually 
replace pool_alloc calls with HeapAlloc/HeapFree pairs.
</p></quote>

<p>After more discussion, Markus sent four patches and explained 
how well they performed:</p>
<quote who="Markus Amsler"><p>
I tried several approaches to avoid the memory leak still present after 
this patch. But all of them used more memory, were more complex and 
slower. I tried HeapCreate for pools, separate HeapAlloc, HeapReAlloc 
for buckets, using HeapAlloc for pool_alloc with storing the pointer in 
the pool. I even implemented a simple radix tree for the bucket storage.
</p><p>
The initial bucket size has no measurable effect, so I left it at 1 to 
save some bytes.
</p><p>
Here are the stats for this series:
</p><p>
<table>
<tr><td>&#120; </td><td>Memory after startup(kB)</td><td>  Memory normal 
symbol(kB) </td><td>   Time to load big debug file(s)  </td><td> Memory after 
big debug file loaded(kB)</td></tr>

<tr><td>orig</td><td>10920</td><td>55036</td><td>115</td><td>146388</td>
</tr>
<tr><td>dbghelp[1]</td><td>10664</td><td>52372</td><td>48 </td><td>92448</td>
</tr>
<tr><td>dbghelp[2]</td><td>10668</td><td>52604</td><td>16 </td><td>92632</td>
</tr>
<tr><td>dbghelp[3]</td><td>10632</td><td>52604</td><td>7 </td><td>92632</td>
</tr>
<tr><td>dbghelp[4]</td><td>7444</td><td>50256</td><td>7</td><td>90452</td>

</tr></table></p></quote>


</section></kc>
