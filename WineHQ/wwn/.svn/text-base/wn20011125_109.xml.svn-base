<?xml version="1.0" ?>
<kc>

<title>Kernel Cousin Wine</title>

<author email="vinn@theshell.com">Brian Vincent</author>

<issue num="109" date="11/25/2001" />

<intro>
<p>
This is the 109th release of the Wine's kernel cousin publication. Its main 
goal is to distribute widely what's going on around Wine (the Un*x Windows 
emulator). </p>

<p>There's a new website out there with lots of screenshots and info
on using Wine with various applications and games.  Check out
<a href="http://www.frankscorner.org/">http://www.frankscorner.org/</a>
for lots of eye candy and good info.  For instance, here's the
page on Macromedia's  Macromedia Dreamweaver MX: <a href="http://www.frankscorner.org/dreamweavermx.html">
http://franksworld.net/wine/pages/apps21.html</a>.</p>

<p>Also worth mentioning again is the official Wine 
<a href="http://appdb.winehq.org/">apps 
database</a>. Have you gotten a Wine application to run 
(or not run!) under a recent release?  
<a href="http://appdb.winehq.org/appsubmit.php">Add</a>
it to the database!</p>

</intro>

<stats posts="170" size="544" contrib="50" multiples="29" lastweek="20">

<person posts="15" size="85" who="Lawson Whitney &lt;lawson_whitney@juno.com&gt;" />
<person posts="14" size="33" who="Alexandre Julliard &lt;julliard@winehq.org&gt;" />
<person posts="12" size="41" who="Francois Gouget &lt;fgouget@free.fr&gt;" />
<person posts="9" size="25" who="Andreas Mohr &lt;andi@rhlx01.fht-esslingen.de&gt;" />
<person posts="10" size="24" who="Ove Kaaven &lt;ovehk@ping.uio.no&gt;" />
<person posts="9" size="23" who="Eric Pouech &lt;eric.pouech@wanadoo.fr&gt;" />
<person posts="8" size="18" who="Gerard Patel &lt;gerard.patel@nerim.net&gt;" />
<person posts="7" size="28" who="Martin Wilck &lt;Martin.Wilck@fujitsu-siemens.com&gt;" />
<person posts="5" size="15" who="Jukka Heinonen &lt;jhei@iki.fi&gt;" />
<person posts="5" size="14" who="Joshua Thielen &lt;thielen@netprince.net&gt;" />
<person posts="5" size="14" who="Dave Hawkes &lt;daveh-wine@cadlink.com&gt;" />
<person posts="5" size="14" who="Steve Kargl &lt;sgk@troutmask.apl.washington.edu&gt;" />
<person posts="5" size="13" who="Andriy Palamarchuk &lt;apa3a@yahoo.com&gt;" />
<person posts="6" size="14" who="Bill Medland &lt;medbi01_1@accpac.com&gt;" />
<person posts="4" size="8" who="Marcus Meissner &lt;marcus@jet.franken.de&gt;" />
<person posts="3" size="21" who="Peter Bortas &lt;peter@idonex.se&gt;" />
<person posts="3" size="15" who="Glenn Schrader &lt;geschrader@mediaone.net&gt;" />
<person posts="3" size="9" who="Dmitry Timoshkov &lt;dmitry@baikal.ru&gt;" />
<person posts="3" size="9" who="Lionel Elie Mamane &lt;lionel@mamane.lu&gt;" />
<person posts="3" size="7" who="Dan Kegel &lt;dank@kegel.com&gt;" />
<person posts="3" size="5" who="Simon Britnell &lt;ughbash@yahoo.com&gt;" />
<person posts="2" size="7" who="John Alvord &lt;jalvo@mbay.net&gt;" />
<person posts="2" size="5" who="Guy L. Albertelli &lt;galberte@neo.lrun.com&gt;" />
<person posts="2" size="5" who="Mike McCormack  &lt;mike_mccormack@start.com.au&gt;" />
<person posts="2" size="4" who="Ori Pessach &lt;ori_pessach_blah@yahoo.com&gt;" />
<person posts="2" size="4" who="Ulrich Weigand &lt;weigand@immd1.informatik.uni-erlangen.de&gt;" />
<person posts="2" size="4" who="Michael Stefaniuc &lt;mstefani@redhat.de&gt;" />
<person posts="2" size="4" who="Christoph Hellwig &lt;hch@ns.caldera.de&gt;" />
<person posts="1" size="8" who="Marco Bizzarri &lt;m.bizzarri@icube.it&gt;" />
<person posts="1" size="5" who="Peter Hunnisett &lt;hunnise@yahoo.com&gt;" />
<person posts="1" size="5" who="Gavriel State &lt;gav@transgaming.com&gt;" />
<person posts="1" size="4" who="Ganesh.S &lt;ganesh@hclp.com&gt;" />
<person posts="1" size="3" who="Patrik Stridvall &lt;ps@leissner.se&gt;" />
<person posts="1" size="3" who="geschrader &lt;geschrader@mediaone.net&gt;" />
<person posts="1" size="3" who="Ralf Nolden &lt;nolden@kde.org&gt;" />
<person posts="1" size="3" who="Roger Fujii &lt;rmf@lookhere.com&gt;" />
<person posts="1" size="2" who="Uwe Bonnes &lt;bon@elektron.ikp.physik.tu-darmstadt.de&gt;" />
<person posts="1" size="2" who="Ancient Computers &lt;arcadepreserv@hotmail.com&gt;" />
<person posts="1" size="2" who="Huw D M Davies &lt;h.davies1@physics.ox.ac.uk&gt;" />
<person posts="1" size="2" who="Chuck Fischer &lt;fischer@fs.fujitsu.com&gt;" />
<person posts="1" size="2" who="Igor &lt;furlan@telocity.com&gt;" />
<person posts="1" size="2" who="James Juran &lt;james@juran.dhs.org&gt;" />
<person posts="1" size="2" who="Chris Green &lt;chris_e_green@yahoo.com&gt;" />
<person posts="1" size="2" who="Duane Clark &lt;dclark@akamail.com&gt;" />
<person posts="1" size="2" who="lee &lt;lee@imyourhandiman.com&gt;" />
<person posts="1" size="1" who="Gerald Pfeifer &lt;pfeifer@dbai.tuwien.ac.at&gt;" />

</stats>






<section
  title="Running 3D Studio Max"
  subject="3D Studio 4 notes"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0118.html"
  posts="5"
  startdate="11/14/2001"
  enddate="11/15/2001"
>

<p>Peter Bortas took a quick look at running 3D Studio Max v4 with 
Wine.  His initial report wasn't too promising,
<quote who="Peter Bortas">
 I took a quick look at running 3DS Max v4 in Wine. It pretty quickly
 chokes when when feeding RegSetValueExA with a null pointer as the
 data for the key "NullFile". The appended hack will go around
 that. Unfortunately the executable dies later on</quote></p>.

<p>Gerard Patel thought the error looked like something that might be
fixed in the latest version from CVS, but Peter verified that he was
running the latest.  From there Gerard suggested using the native
mscvrt.dll rather than the builtin one.</p>



</section>  









<section
  title="MIDL and COM"
  subject="MIDL and COM"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0130.html"
  posts="4"
  startdate="11/15/2001"
  enddate="11/20/2001"
>

<p>Ove K&aring;ven wanted some thoughts on a few different subjects:</p>

<quote who="Ove Kaaven">
	<p>
	 OK, since list traffic is low at the moment (which might be because &#047;var
	 on WineHQ got full again, and as usual the secondary MX provided by Corel
	 seems to have the functionality of a black hole, so I've now moved the
	 apache logs off &#047;var), I thought I'd try to liven it up a bit with a
	 couple of things I'm wondering about...
	</p>
	<p>
	 Problem 1: MIDL-generated code.<br />
	 midl.exe is Microsoft's IDL compiler, it reads .idl files which describe
	 RPC and COM interface, from which it generates .c files, .h files, and
	 typelibs. (It is possible to find copies of midl.exe floating on the net,
	 as some people have put together "COM kits" for Borland C++ that contains
	 midl.exe and some standard .idl files and put them on the web)
	</p>
	<p>
	 But can the machine-generated sources that MIDL outputs be put into the
	 official Wine source?
	</p>
	<p>
	 And how about source IDL files? Can we put into Wine IDL extracted from
	 real Windoze .tlb files with a tool like oleview.exe, or IDL parsed from
	 MIDL-generated Windows SDK .h files, like objidl.h, with a script?
	</p>
	<p>
	 Problem 2: RPCSS<br />
	 rpcss.exe is the place that keeps track of which process owns which RPC
	 endpoints, exported COM objects, and object activation tables.
	 The IRunningObjectTable interface, for example, is managed by rpcss.exe,
	 and keeps track of certain kinds of COM objects on the computer, so that
	 other processes can connect to running COM objects. We probably don't want
	 Wine to have to run a separate process for this? If not, can we put this
	 kind of COM stuff into the wineserver?
	</p>
</quote>

<p>Alexandre Julliard replied with some answers.  As far as
including .idl files, Alexandre preferred not to, but
<quote who="Alexandre Julliard">
 If we want to use .idl files we'll have to come up
 with our own compiler, and then we can put the .idl source in the tree
 and compile it at build time.</quote>  As far as extracting IDL,
<quote who="Alexandre Julliard">
 No, anything generated from a Windows file is copyrighted by
 Microsoft, so we cannot distribute it. We need to rewrite these files
 from scratch, just like we do for the normal headers.</quote>  And
finally, to Ove's last point Alexandre felt it would be best to have
the COM management stuff in a separate process for the first 
implementation.</p>

<p>Francois Gouget wondered, <quote who="Francois Gouget">
 Now where are all the usual non-lawyers on this list who 
 would argue that API definitions, like prototypes in header files (which of 
 course IDL, as a formalized API spec format, is all about), cannot be copyrighted?
 Oh well...</quote></p>  <p>Patrik Stridvall stepped up and 
threw out some more ideas:</p>
<quote who="Patrik Stridvall"><p>

  I'm here. :-)
</p><p>
  Well, I wouldn't really go quite that far. The API definitions in themselves
 can't be copyrighted, true. But a specific way of expressing them is,
 so compiling any Microsoft file will generate create a derived work
 copyrighted by Microsoft as the main rule.
</p><p>
 However it is not quite that easy, since only the specific expression
 is protected, the compilation result is only a derived work if it
 still contains any protected expression.
</p><p>
 In light of this you could argue that since, I presume, MIDL removes
 whitespace and commments which is IIRC the only really expression,
 since the rest the API definitions are just facts, that the MIDL
 compiled files just contains facts not any part of the protected
 expression.
</p><p>
 However that is a little thin line to walk, since there is quite
 of lack of real cases in the area, so I would recommend that we
 do as Alexandre suggest. Beside having the real .idl files in the
 Wine tree might be useful for other things as well.
</p></quote>

<p>Patrik also added that, <quote who="Patrik Stridvall">
 There already are a multitude of open souce (GPL and otherwise)
 CORBA .idl compilers. Of course Wine have probably slightly 
 different requirements but I should guess that we could save 
 90% of the work compared to writing it from scratch.</quote></p>


</section>  







<section
  title="Screensaver Settings"
  subject="Re: SystemParametersInfo: Screen Save actions"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0134.html"
  posts="12"
  startdate="11/16/2001"
  enddate="11/17/2001"
>
<p>
Andreas Mohr saw a patch come across wine-patches and wondered why
Andriy Palamarchuk had submitted it:</p>
<quote who="Andreas Mohr"><p>
 Hmm, why did you remove X11 screen saving completely ??
</p><p>
 Probably because it was horribly broken, right ?
 (<code>SPI_SETSCREENSAVEACTIVE</code> *activated* screen saver 
 instead of *enabling* it - doh !)
</p><p> 
 Why don't you fix this strange code instead of removing it ?
 I guess I should do it...
</p></quote>

<p>Andriy replied that he'd had a discussion with Alexandre and
decided system parameters would be independent from X settings.  
So in this case there would be no integration with how an application
wants the screensaver settings to behave compared the actual X
settings.  Francois Gouget explained in more detail:</p>
<quote who="Francois Gouget"><p> 
   I don't know for <code>SETSCREENSAVETIMEOUT</code> but an application would want
 to get <code>SETSCREENSAVEACTIVE</code> and <code>SPI_GETSCREENSAVERRUNNING</code> right.
 </p><p>
   <code>SPI_GET/SETSCREENSAVEACTIVE</code> seems to be typically used by movie
 players. Imagine, you start palying a DVD, relax, and every five minutes
 the screensaver kicks in. This is why many movie players disable the
 screensaver when you start playing the movie and restore its initial
 state when the movie is finished. This is the case of mplayer for
 instance (and yes, it's a pain if they crash).
 </p><p>
   I don't see why we should prevent Windows applications from doing so.
 Similarly, <code>SPI_GETSCREENSAVERRUNNING</code> could be used by an application to
 stop its slide-show since no one will be able to see it. But actually, it
 now occurs to me that it may also be used by distributed-computing
 applications to know when to start their computations (for those that
 are not screen-savers).
   <code>SPI_SETSCREENSAVERRUNNING</code> seems pure evil though (and according to
 the doc applications are not supposed to use it anyway).
 </p><p>
   In fact, I disagree with Alexandre when he says:
 </p><p>
 &gt; If users want to reconfigure X behavior, they have to use the X
 &gt; configuration programs.
 </p><p>
   I think Wine is about more than just running Windows applications on
 Linux. It's about integrating Windows and Linux applications and thus
 they should be able to manipulate these kind of settings. Otherwise Wine
 would only support the 'desktop mode' or it would not exist at all and
 everyone would be happy with running Windows in a sand-box ala VMware. 
 </p><p>
   So it may make sense to maintain some parameters separately from the
 X settings (especially when there is no corresponding X setting), but I
 think the above parameters should be 100% backed by the corresponding X
 setting.</p></quote>

<p>
Alexandre clarified his position, <quote who="Alexandre Julliard">
 I also said there could be exceptions... I agree temporarily disabling
 the screen saver can be useful, so we probably want to allow at least
 that. I'm not sure we want to allow messing with the timeout though.
</quote> From there the discussion centered around whether to support
the screensaver timeout or not.    
Andreas felt the optimal solution would be to have a configurable 
parameter that allowed changing the timeout.  Francois felt there 
were a lot worse things an application could do, so why not let
them mess with the timeouts too.  Andriy said he would begin working
on an implementation in a few days.</p>




</section>  




<section
  title="Source Code Graph: x=sqrt(|y|)"
  subject="I've been too damn bored today..."
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0216.html"
  posts="2"
  startdate="11/17/2001"
  enddate="11/17/2001"
>

<p>Andreas Mohr got bored and posted a graph of Wine growth:
<a href="http://home.nexgo.de/andi.mohr/download/nicegraph.png">
http://home.nexgo.de/andi.mohr/download/nicegraph.png</a></p>



</section>  






<section
  title="Loading mmsystem"
  subject="mmsystem should be loaded at startup "
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0236.html"
  posts="7"
  startdate="11/23/2001"
  enddate="11/24/2001"
>
<p>Josh Thielen wanted some comments on a solution to a problem
he was having, <quote who="Josh Thielen">
 Finale expects mmsystem to be present without having to call LoadLibrary 
 on it. It does a GetModuleHandle on mmsystem.dll to find out if the mm 
 extensions are available. I checked out windows 95, and it has mmsystem 
 and winmm loaded when no apps are running besides the desktop / 
 explorer. This patch links wine with winmm and makes winmm load mmsystem 
 on init. Finale gets by this ok now. I don't know if this the correct 
 approach, though.  Could someone (Eric or Alexandre?) please take a look 
 at it before I send it to wine-patches?</quote></p>

<p>Andreas Mohr noted that the King's Quest 2 installer had the same
problem.  Alexandre thought that was best to only load mmsystem in
wine_initial_task since that way it would only impact 16-bit apps.
Eric Pouech agreed and posted some error reporting changes to Josh's
patch.</p>

</section>  








<section
  title="shlwapi Improvements"
  subject="New level of Shlwapi (parts 1 &amp; 2)"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0216.html"
  posts="1"
  startdate="11/21/2001"
  enddate="11/21/2001"
>

<p>Guy Albertelli posted some patches to wine-patches and explained:</p>
<quote who="Guy Albertelli">
<p>Most of the shlwapi upgrades have been driven by my desire to be able to run
 Outlook Express under Wine. (I know that there are other mail packages, but
 the rest of the home uses Windows - anyway it is a great test vehicle, uses
 everything ever implemented).  The current status is as follows:</p>

<p>With V4 or IE and OE - with builtin shlwapi,commctrl,comctl32
 <ul>
    <li>IE displays page, can even do www.cnn.com, even runs javascript.</li>
        <ul>
	    <li>Certain menu popups either fail to display, or bomb.</li>
            <li>Needs work in comctl32 rebar for extra space.</li>
	</ul>
    <li>OE seems to basically work.</li>
        <ul>
	    <li>Can display messages, change folders, and create messages.</li>
            <li>Cannot invoke address book, but can request address list
                when creating new message.</li>
	</ul>
 </ul>
</p>

<p>V5 of OE - requires native commctrl, comctl32:
     <ul> <li>With builtin comctl32: OE fails to startup</li>
          <li>With native commctrl, comctl32: OE comes up but is mostly 
           non-functional. Bombs on shutdown due to shlwapi.208 and shlwapi.210</li>
     </ul>
</p>

<p>V5 of IE - Does not start up yet. Requires native shlwapi

      <ul> <li>With native shlwapi, builtin comctl32:
             IE has black toolbars with white lines. Menu line real small.</li>
           <li>With native shlwapi and comctl32:
             IE has black bitmaps for button bar. Mostly functional, however
             cannot access dropdown arrow for address bar.</li>
      </ul>
</p>

<p>
 <code>&lt;sarcasm&gt;</code><br />
 I really appreciate the MS developer that decided to implement menus in OE5
 with objects and put some of his "common" code in shlwapi.<br />
 <code>&lt;/sarcasm&gt;</code>
</p>
</quote>

</section>  


</kc>
