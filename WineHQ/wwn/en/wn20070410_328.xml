<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="328" date="04/10/2007" />
<intro> <p>This is the 328th issue of the Wine Weekly News publication.
Its main goal is to buy a house. It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="211" size="418" contrib="81" multiples="39" lastweek="47">

<person posts="13" size="16" who="dmitry at codeweavers.com (Dmitry Timoshkov)" />
<person posts="13" size="12" who="dank at kegel.com (Dan Kegel)" />
<person posts="12" size="20" who="wjsqudtlr at gmail.com (Byeong-Sik Jeon)" />
<person posts="9" size="28" who="stefandoesinger at gmx.at (Stefan D&#246;singer)" />
<person posts="9" size="17" who="speeddymon at gmail.com (Tom Spear)" />
<person posts="9" size="13" who="julliard at winehq.org (Alexandre Julliard)" />
<person posts="8" size="36" who="stefandoesinger at gmx.at (Stefan D&#246;singer)" />
<person posts="8" size="6" who="hverbeet at gmail.com (H. Verbeet)" />
<person posts="6" size="9" who="wine.dev at web.de (Detlef Riekenberg)" />
<person posts="6" size="8" who="jan.wine at zerebecki.de (Jan Zerebecki)" />
<person posts="6" size="7" who="ead1234 at hotmail.com (EA Durbin)" />
<person posts="4" size="35" who="klaus.layer at gmx.de (Klaus Layer)" />
<person posts="4" size="9" who="tony.lambregts at gmail.com (Tony Lambregts)" />
<person posts="4" size="7" who="paul.vriens.wine at gmail.com (Paul Vriens)" />
<person posts="4" size="6" who="scott at open-vote.org (Scott Ritchie)" />
<person posts="4" size="4" who="wine-devel at kievinfo.com (Vitaliy Margolen)" />
<person posts="3" size="14" who="kai.blin at gmail.com (Kai Blin)" />
<person posts="3" size="5" who="billmedland at shaw.ca (Bill Medland)" />
<person posts="3" size="3" who="shachar at shemesh.biz (Shachar Shemesh)" />
<person posts="3" size="1" who="us at edmeades.me.uk (Ann &amp; Jason Edmeades)" />
<person posts="2" size="8" who="xixsimplicityxix at gmail.com (John Smith)" />
<person posts="2" size="7" who="devurandom at gmx.net (Dennis Schridde)" />
<person posts="2" size="7" who="p.beutner at gmx.net (Peter Beutner)" />
<person posts="2" size="5" who="eric.pouech at wanadoo.fr (Eric Pouech)" />
<person posts="2" size="4" who="Stefan.Leichter at camline.com (Stefan Leichter)" />
<person posts="2" size="4" who="chris.kcat at gmail.com (Chris Robinson)" />
<person posts="2" size="4" who="mk144210 at bcm.tmc.edu (Misha Koshelev)" />
<person posts="2" size="3" who="stephan at kochen.nl (=?UTF-8?B?U3TDqXBoYW4gS29jaGVu?=)" />
<person posts="2" size="3" who="infyquest at gmail.com (Vijay Kiran Kamuju)" />
<person posts="2" size="3" who="cjstimpson at utwire.net (Clinton Stimpson)" />
<person posts="2" size="3" who="alex at thehandofagony.com (Alexander Nicolaysen =?utf-8?q?S=C3=B8rnes?=)" />
<person posts="2" size="2" who="jim at pagesmiths.com (Jim White)" />
<person posts="2" size="2" who="rob at codeweavers.com (Robert Shearman)" />
<person posts="2" size="2" who="the3dfxdude at gmail.com (Jesse Allen)" />
<person posts="2" size="2" who="timschmidt at gmail.com (Tim Schmidt)" />
<person posts="2" size="2" who="redman61 at netzero.com (Marty Schmidt)" />
<person posts="2" size="1" who="twickline at gmail.com (Tom Wickline)" />
<person posts="2" size="1" who="marcus at jet.franken.de (Marcus Meissner)" />
<person posts="2" size="1" who="flexo at holycrap.org (Felix Nawothnig)" />
<person posts="1" size="8" who="thunder.m at czela.net (Mirek)" />
<person posts="1" size="6" who="stefan at codeweavers.com (Stefan D&#246;singer)" />
<person posts="1" size="6" who="nathan.andrew.williams at gmail.com (Nathan Williams)" />
<person posts="1" size="4" who="ehoover at mines.edu (Erich Hoover)" />
<person posts="1" size="4" who="xerox_xerox2000 at yahoo.co.uk (Louis. Lenders)" />
<person posts="1" size="3" who="iman at simantis.com (Sasan Iman)" />
<person posts="1" size="3" who="eric.pouech at gmail.com (Eric Pouech)" />
<person posts="1" size="3" who="huw at codeweavers.com (Huw Davies)" />
<person posts="1" size="3" who="winehacker at gmail.com (Steven Edwards)" />
<person posts="1" size="3" who="Alexander.Farber at nokia.com" />
<person posts="1" size="2" who="andreas.bierfert at lowlatency.de (Andreas Bierfert)" />
<person posts="1" size="2" who="andras at csevego.net (=?iso-8859-2?q?Kov=E1cs_Andr=E1s?=)" />
<person posts="1" size="1" who="vbudovski at gmail.com (Vitaly Budovski)" />
<person posts="1" size="1" who="thestig at google.com (Lei Zhang)" />
<person posts="1" size="1" who="indumuthu at gmail.com (Indira Muthuswamy)" />
<person posts="1" size="1" who="anugupta at pu.ac.in (Anu Gupta DCSA)" />
<person posts="1" size="1" who="dimi at lattica.com (Dimi Paun)" />
<person posts="1" size="1" who="thunderbird2k at gmx.net (Roderick Colenbrander)" />
<person posts="1" size="1" who="alex at thehandofagony.com (Alexander Nicolaysen Sornes" />
<person posts="1" size="1" who="truiken at gmail.com (James Hawkins)" />
<person posts="1" size="1" who="cbandy at jbandy.com (Chris Bandy)" />
<person posts="1" size="1" who="aric at codeweavers.com (Aric Stewart)" />
<person posts="1" size="1" who="chmorgan at gmail.com (Chris Morgan)" />
<person posts="1" size="1" who="tokul at users.sourceforge.net (Tomas Kuliavas)" />
<person posts="1" size="1" who="c-d.hailfinger.devel.2006 at gmx.net (Carl-Daniel Hailfinger)" />
<person posts="1" size="0" who="Andrew.Talbot at talbotville.com (Andrew Talbot)" />
<person posts="1" size="0" who="joris_huizer at yahoo.com (Joris Huizer)" />
<person posts="1" size="0" who="dank06 at kegel.com (Dan Kegel)" />
<person posts="1" size="0" who="ninevoltz at metalink.net (John Voltz)" />
<person posts="1" size="0" who="stefandoesinger at gmail.com (Stefan D&#246;singer)" />
<person posts="1" size="0" who="m.b.lankhorst at gmail.com (Maarten Lankhorst)" />
<person posts="1" size="0" who="mikolaj at zalewski.pl (=?UTF-8?B?TWlrb8WCYWogWmFsZXdza2k=?=)" />
<person posts="1" size="0" who="rene at exactcode.de (Rene Rebe)" />
<person posts="1" size="0" who="r.kalbermatter at hccnet.nl (Rolf Kalbermatter)" />
<person posts="1" size="0" who="doctormo at gmail.com (Martin Owens)" />
<person posts="1" size="0" who="citizenr at gmail.com (RusH)" />
<person posts="1" size="0" who="vit.hrachovy at sandbox.cz (Vit Hrachovy)" />
<person posts="1" size="0" who="nick at pu.if.ua (Oleh R. Nykyforchyn)" />
<person posts="1" size="0" who="juan_lang at yahoo.com (Juan Lang)" />
<person posts="1" size="0" who="kde at 3danim.de (Markus)" />
<person posts="1" size="0" who="xerox_xerox2000 at yahoo.co.uk (Louis Lenders)" />

</stats>
<section 
	title="Winebot"
	subject="Winebot"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-March/055332.html"
	posts="11"
>
<topic>Utilities</topic>
<p>In the course of a different discussion, there was a mention of a new
wrapper around Wine to automate some installation tasks.  Vit Hrachovy 
let everyone know about Winebot:</p>
<quote who="Vit Hrachovy"><p>

WineBot (<a href="http://winebot.sandbox.cz">http://winebot.sandbox.cz</a>) 
is a sort of lightweight
implementation of some core thoughts, but with ca ommand line based
interface and less dependencies. Both projects share some core ideas and
data file formats.  The WineBot goals are much smaller in scope than
the Wine-Doors ones, going in smaller steps.
</p><p>
The main goal is to replace obsolete and almost unmaintainable winetools
project.
</p><p>
Main idea is to make repositories of supported application packages,
both installed from CD, HDD or downloaded from net.
</p><p>
For example to install Oblivion by placing CD into tray and entering

<ul><code>winebot install tes_oblivion-1.1.511uk
winebot install tes_oblivion-1.1.511uk</code></ul>
</p><p>
Or in case of Wine-Doors - insert CD, run wine-doors, select Games
repository, click to add Oblivion to install queue.
</p><p>
Given list of manual steps required to install Oblivion
<ul><a href="http://www.uesp.net/wiki/Oblivion:Linux">
http://www.uesp.net/wiki/Oblivion:Linux</a></ul>
this can be automated easily and comfort would be similar to using Loki
installers.
</p></quote>

<p>Dan Kegel summarized what a lot of people on wine-devel think about such
projects:</p>
<quote who="Dan Kegel"><p>
The problem that Wine developers have with recipies
like the one you cite is that most of the steps in
the recipe are there to work around bugs in Wine.
We would prefer to fix the bugs.  For instance,
the steps related to sound and winecfg should just
go away, hopefully this summer.  Likewise with directx
and registry settings.
</p><p>
That said, I'm certainly in favor of helping users,
as long as it's done 'right', for some hard to pin down
definition of 'right'.</p></quote>

<p>Projects like Winebot have definitely led more people to use Wine,
but as Dan alluded to, there's been problems in the past.  Some of these
projects haven't been updated as Wine has improved.  Others make some
serious configuration changes to Wine that make troubleshooting next
to impossible from a developer standpoint.  Finally, the biggest problem
comes from the fact that the quick and simple method for getting programs
to work with Wine is to dump a ton of native Microsoft DLLs into the mix.
The fact that CodeWeavers have done all of those things in their commercial
CrossOver product is proof that such hacks are necessary to run a lot of
applications with Wine.  </p><p>
Vit pointed out that the level of skill needed
to code Winebot was a lot less than hacking on Wine itself, therefore
some value to Wine could be provided that otherwise wouldn't.  Vit
went on to describe the goals and tenets of Winebot:</p>
<quote who="Vit Hrachovy"><p>
I'm going to discuss my personal point of view, as I'm representing Winebot project.
</p><p>
I'll first summarize some points extracted from the previous discussion:
<ul><li> My goal in writing Winebot is to help Wine succeed</li>

<li> I pledge to use only the bare minimum of native DLLs in any Winebot recipe</li>

<li> I pledge to remove native DLLs from Winebot recipes as soon as Wine fixes the bugs that keep Wine's DLLs from being sufficient for that app</li>

<li> I will report bugs to the Wine project in the course of working on Winebot</li>

<li> Installation of "basic compatibility programs" sounds like it would clash with "only use the bare minimum of native DLLs / hacks in any Winebot recipe". Winebot shouldn't install anything that the application does not need.</li>

<li> I will help Wine by writing not just Winebot recipes, but also basic application regression test scripts</li>

<li> If developers working on projects such as Wine-Doors contributed to Wine, then the bugs would be fixed even faster.</li>

<li> If you are making it extremely easy for users to run with native dlls and hacky workarounds, then you are hurting Wine.  Wine is still beta, and we need as much testing and bug reporting as possible.  In short, you leech off the hard work of all the Wine developers and give nothing back in return (quite the opposite in fact).</li></ul>
</p><p>
Each Winebot package shall have a maintainer responsible for package quality and for interfacing with the WINE project (AppDb, Bugzilla, Testing, Fixing).
</p><p>
Every official Winebot maintainer will be bound by a sort of Winebot manifest stating the Winebot project's attitude towards the WINE project.
</p><p>
I'll write the manifest (a),(c) and post it onto Winebot Wiki.
To create (b) I gladly accept any input to create a regression test repository, would You be so kind and point me to some list of programs / test miniprograms to make a reference implementation?
</p><p>
<ul>
<li> My goal _is_ to help Wine succeed. Hours I'm investing in Winebot are hours I'm spending on learning Wine. Recent discussion about missing reg.exe implementation originated from work on Winebot. I'm application maintainer on AppDb. I'm testing application compatibility on WINE versions back to 0.9.9. I've written Winebot especially to make the testing easier. I often install and uninstall Windows programs from WINE bottles, I'm used to bottles (WINEPREFIX) system, too. Having the installation of programs (and their dependencies) scripted is the first step for making automated testing.
</li>
<li> All Winebot packages should install only the minimum necessary dependencies and their install scripts should be ideally only using normal application Windows installer. Any hacks above will be reported (in case they weren't reported already) to the WINE bugzilla.
</li>
<li> That's a relic from winetools project. 'bottle initialization' will be removed soon as unnecessary. Working package dependencies allow to reconstruct every step of setup and every 'hack' in used packages.
</li>
<li> Yes, I'm planning to set up a regression tests repository for WINE (and for Winebot too). As Winebot is using AutoHotKey system for installer automation, it can also run programs, check window properties and contents, click on specified button or areas, etc. For more information, see 
<a href="http://www.autohotkey.com">
http://www.autohotkey.com</a>
</li>
<li> Actually I consider my Winebot work is a work for WINE project and WINE users. If I find some error in WINE, I report. Same when I need new functionality. If I'm capable, I'm trying to discuss, implement and send a patch for WINE. Actually Winebot could help more WINE developers with testing, with testing environment setup and with duplicating bug cases, IMHO.
</li>
<li> User simply wants his application to work. Package maintainer, who prepares the package, should interface with WINE developers whenever he spots a glitch. Package maintainer goes with new WINE versions and prepares a package for each WINE version. Package maintainer is therefore dedicated regular WINE tester and bug reporter. Package maintainer also filters user feedback to create a useful bug report, probably with a patch proposal in ideal situation.
</li></ul>
</p></quote>

<p>That seemed to address everyone's concerns and shut them up.  There was
little discussion of Winebot after that.</p>
</section>
<section 
	title="X Error"
	subject="Random X errors caused by recent cursor patch?"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-April/055635.html"
	posts="6"
>
<topic>Graphics</topic>
<p>Dan Kegel reported a problem that likely affected a bunch of people:</p>
<quote who="Dan Kegel"><p>
Looks like there's been a regression lately.  I'm
getting errors like this
<ul><code>
X Error of failed request:  BadPixmap (invalid Pixmap parameter)<br />
  Major opcode of failed request:  54 (X_FreePixmap)<br />
  Resource id in failed request:  0x2a0006a
</code></ul>
randomly, about every fourth time I run things that used to
work.  A user on c.e.m.w.
<ul><a href="http://groups.google.com/group/comp.emulators.ms-windows.wine/msg/1f41dbd21a129f5e">
http://groups.google.com/group/comp.emulators.ms-windows.wine/msg/1f41dbd21a129f5e</a></ul>
speculates that the recent cursors patch
introduced the regression.
</p><p>
The error doesn't happen often enough to make
a regression test easy, and I haven't tried myself yet.

</p></quote>

<p>Huw Davies <a href="http://www.winehq.com/pipermail/wine-devel/2007-April/055637.html">supplied</a> 
a patch:</p>
<quote who="Huw Davies"><p>
Could you see if this helps?  It looks like XRenderFreePicture
actually destroys the underlying pixmap, so we ended up freeing it
twice.
</p></quote>

<p>John Smith (?) reported success with it:</p>
<quote who="John Smith"><p>
I was able to reproduce the badpixmap bug on peachtree 2006 right after
picking a company from the "open company" dialog.  This patch seemed to fix
this (or at least hide it from being as reproducible as it was).  I had some
trouble applying it to current gitwine, but I typed it in manually and it
worked fine.</p></quote>


</section>
<section 
	title="No Packages Yet For Ubuntu 7.04"
	subject="wine latest packages for feisty"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-April/055767.html"
	posts="5"
>
<topic>Packaging</topic>
<p>
The release candidate of Ubuntu 7.04, aka Feisty Fawn, led Vijay Kiran Kamuju 
to ask:
</p>
<quote who="Vijay Kiran Kamuju"><p>
Where can I get the 0.9.34 wine built for ubuntu feisty?</p></quote>

<p>Scott Ritchie, the Ubuntu maintainer, replied that you can't.  He hasn't 
installed it yet and needs to do that first in order to build it.  He did
mention there might be a way to get 0.9.34 though:</p>
<quote who="Scott Ritchie"><p>
If you enable the backports repository, you should also get a fairly
recent Wine package (roughly what's in the latest development universe).
I might want to take over that personally soon.</p></quote>

<p>Vijay reported there is no backports repository for Feisty yet, so that
wasn't an option.  Looks like time for the old 
<code>configure &amp;&amp; make &amp;&amp; make install &amp;&amp; echo "I feel
like I'm running Gentoo"</code> routine. </p>

</section>
<section 
	title="Fedora Packages"
	subject="Fedora packages, where are they?"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-April/055675.html"
	posts="3"
>
<topic>Packaging</topic>
<p>Speaking of packaging, Louis Lenders asked about Fedora,
<quote who="Louis Lenders">
Hi, the link on the wine-page to get the Fedora- wine packages points to
"nowhere". Could this be fixed? Furthermore, anyone know where i can get the
wine-rpm for Fedora?
</quote>
</p>
<p>Andreas Bierfert, the Fedora maintainer, replied:</p>
<quote who="Andreas Bierfert"><p>
Sorry that I am a bit behind with the Fedora Extras Packages but there are some
bugs I want to clean up before upgrading. Should happen in the next days so.
</p></quote>

<p>Marcus Meissner, the SuSE maintainer, replied with a few resources:</p>
<quote who="Marcus Meissner"><p>


It is in their Extras RPMs.
</p><p>
Additionally in my buildservice repositories:
	<ul><a href="http://software.opensuse.org/download/Emulators:/Wine/">
	http://software.opensuse.org/download/Emulators:/Wine/</a></ul>
</p></quote>



</section>
<section 
	title="On the Fly Debugging"
	subject="Changing debug channels on the fly"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-April/055698.html"
	posts="8"
>
<topic>Debugging</topic>
<p>For a lot of people just getting into Wine, relay debugging can really suck.
Basically it's a way to see all the calls between different Win32 functions.
So if one API is calling another that's calling another that's calling another
and then crashing, you can debug using the relay channel to figure out where
that crash is occurring.  That's ok if your program is crashing in, say,
the first few minutes of running it.  But if it's happening much later in
the program then relay debugging can really suck because it makes Wine run
<i>a lot</i> slower.  Well, there's a few ways around that and Dan Kegel
asked about one of them this week:</p>
<quote who="Dan Kegel"><p>
It looks like programs/taskmgr/taskmgr used to let
you edit debug channels for any process, but now
that function seems broken; when I right-click
on a process and select 'edit debug channels',
I get column headers
 Debug Channel   Fixme  Err  Warn  Trace
but nothing under them.  Is this supposed to work?
</p><p>
In the meantime, I'll make do with
<ul><a href="http://wiki.winehq.org/Debug_trace_toggle_key">
http://wiki.winehq.org/Debug_trace_toggle_key</a></ul>
which is kind of what I was looking for anyway.
</p></quote>

<p>That led Jan Zerebecki to reply:</p>
<quote who="Jan Zerebecki"><p>

I enhanced that a bit and have a patch based on a recent winehq git:<ul>
<a href="http://repo.or.cz/w/wine/hacks.git?a=commit;h=a3840322693b5630bf8ffd7f85e9287a1e213bd6">
http://repo.or.cz/w/wine/hacks.git?a=commit;h=a3840322693b5630bf8ffd7f85e9287a1e213bd6</a></ul>
</p></quote>

<p>Dan didn't like that version because, like the original, it didn't
control the relay channel.  It also doesn't help with processes not
listening for events from the keyboard.  </p>

<p>At any rate, Eric Pouech replied with a patch for taskmgr:</p>
<quote who="Eric Pouech"><p>

I've just sent a fix for this one.  
Note, that you can only toggle on/off debug channels that are specified
on the command line when you start the program (currently you cannot add
new debug channels on the fly, even if it would be doable)
</p></quote>
</section>
<section 
	title="Sound Test"
	subject="RFC - winecfg audio test"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-April/055719.html"
	posts="2"
>
<topic>Multimedia</topic>
<p>Sound has been a problem with Wine for a while.  There's rumors some
work on it this summer will fix things up, but we'll have to see.  In
the meantime, Steven Edwards put together a little test and tossed it
out there to see what everyone thought:</p>
<quote who="Steven Edwards"><p>
Well it is more of a request for adoption than an RFC.....
</p><p>
If someone else wants to pick this up feel free. I am kind of blocked
on time. Over the course of the past year the discussion about need
for an audio test has come up from time to time. Using a WAV file with
PlaySound is too massive due to using embedded resources so next we
looked at using an embedded mp3 and the wineacm codec. This would be
interesting because then we could have something like the sound of a
wine bottle being popped or wine being poured but Alexandre said he
would rather have a simple test so I elected to rip Francois winmm
audio test as a base.
</p><p>
As for where to take it from here I am kind of at a loss. The more 
I think about it there could be even better ways to test audio by
using DirectSound to generate a set of tones if that's even possible.
It would be cool if it was, because then we could do a series of tests
like a short tone testing WinMM then another short tone testing
DirectSound. This might help users that have choppy sound or missing
sound in games but not in other apps. Also how to handle the case
where it does not work is rather interesting as right now my little
messagebox does nothing, but if we implement the help system Jacek
suggested we could provide information on how to debug sound problems
linked from the dialog. Last but not least this sound is kind of
boring so someone else that understands this code better can add some
sort of modulation to the tone to make it more appealing. If I was
writing in Qbasic I could have pulled it off but as it stands this is
the best you're going to get from me. I learned a good bit over the 8 or
10 hours it took me to strip it down so it's not a total loss even if
it's rejected.
</p><p>
If no one else wants to work on this and Alexandre does not hate it
then I will submit it to wine-patches on Monday sans DEBUGGING enabled in
a proper git diff.
</p></quote>

<p>Jan Zerebecki looked it over briefly and commented on specific aspects
of it.  He added,
<quote who="Jan Zerebecki">
Problems with dsound are usually bugs in Wine's dsound code, so a
button for users IMHO doesn't help. Maarten Lankhorst is
currently working on extending the dsound wine test cases with
something to reproduce some of these bugs and also on fixing
them. Generic configuration errors of sound will result in both
winmm and dsound failing.</quote>
</p>


</section>
<section 
	title="Nautilus File Management"
	subject="Wine desktop integration: current directory of app launched with doubleclick?"
	archive="http://www.winehq.com/pipermail/wine-devel/2007-April/055728.html"
	posts="2"
>
<topic>Integration</topic>
<p>Dan Kegel reported a recent experience using Debian/Ubuntu:</p>
<quote who="Dan Kegel"><p>
I <i>almost</i> have a great success story to report; the only thing
keeping it from being a success story is the current directory
chosen by Nautilus when double-clicking on .exe files.
</p><p>
My wife hurt a finger trying to impersonate a Samsonite Luggage gorilla,
and had to go to a hand doctor.  Along the way her hand got x-rayed,
and the doctor handed her a cd-rom with the x-ray pictures on it.
The disc has an autorun.inf on it that should start ViewSel.exe.
I don't know if that's supposed to work with Wine and Nautilus, but
probably doubleclicking on ViewSel.exe does the same thing.
</p><p>
ViewSel.exe puts up two big buttons:
low res (which launches a web browser on an html file),
and high res (which launches a DICOM viewer).
If you cd to the root of the cd-rom drive and run ViewSel, it works.
If the current directory is anything else, it doesn't work.
</p><p>
If you start the autorun app via Nautilus, those buttons don't work,
so presumably it sets the current directory to something other than
the root of the drive.  To see, I created a wrapper shell script, ~/bin/mywine,
containing
<ul><code>
  #!/bin/sh<br />
  pwd &gt; /tmp/log
</code></ul>
and used "Start with" to launch ViewSel.exe with ~/bin/mywine.
This showed that the current directory was $HOME.
</p><p>
I had a look at the gnome code to see how it decided, but it was
a bit hard to follow.  (See gnome_vfs_mime_application_launch_with_env.)
So I tried a little shell magic.  I created a new wrapper shell script
that assumes the argument is a path to a file, and
sets the current directory to the directory containing that file:
<ul><code>
 #!/bin/sh<br />
 DIR=`dirname "$1"`<br />
 DIR=`cd "$DIR"; pwd`<br />
 cd "$DIR"<br />
 wine "$@"<br />
</code></ul>
</p><p>
That worked better; it let ViewSel.exe launch the DICOM viewer.
</p><p>
So... I suppose the next step is to look at the debian/ubuntu packages
for wine and see if that little wrapper script could be incorporated
into the default way file browsers start wine?
It sure would be nice if apps that expected the current directory
to behave like this (it's not uncommon!) Just Worked.
</p></quote>

<p>That led Scott Ritchie to ask:</p>
<quote who="Scott Ritchie"><p>
Which version of nautilus (err.. Gnome) were you using?  The one in Edgy
or Feisty?
</p><p>
I ask, because Edgy seems to not want to run executables at all from
double clicking, producing this horrendous error:
<ul><a href="http://tuzakey.com/~scott/wine_without_mime.png">
http://tuzakey.com/~scott/wine_without_mime.png</a></ul>
</p><p>
I've been told the above is a bug in nautilus.  At any rate, it
partially resulted from removing the MIME contents of Wine from the
packages; this was done for security purposes, and because
binfmt-support is supposed to launch the app with Wine.  You'll notice
in the above image that it does indeed identify the application
correctly - nautilus just fails to launch it.
</p><p>
That said, I maintain the Ubuntu packages, and if you've got a fix I can
use, I'll certainly incorporate it.</p></quote>


</section></kc>
