<?xml version="1.0" ?>
<kc>

<title>Kernel Cousin Wine</title>

<author email="vinn@theshell.com">Brian Vincent</author>

<issue num="154" date="01/24/2003" />

<intro>
<p>This is the 154th release of the Wine's kernel cousin publication. 
Its main goal is to give you something to do on a Friday morning,
preferably while drinking a cup of coffee.
It also serves to inform you of what's going on around Wine (the Un*x 
Windows emulator).</p>
</intro>

<stats posts="270" size="1485" contrib="77" multiples="41" lastweek="36">

<person posts="51" size="169" who="Dan Kegel" />
<person posts="18" size="54" who="Sylvain Petreolle" />
<person posts="13" size="40" who="Greg Turner" />
<person posts="13" size="37" who="Francois Gouget" />
<person posts="12" size="32" who="Mike Hearn" />
<person posts="11" size="32" who="Christian Costa" />
<person posts="9" size="22" who="Duane Clark" />
<person posts="8" size="24" who="(fenix)" />
<person posts="12" size="31" who="Marcus Meissner" />
<person posts="8" size="17" who="Alexandre Julliard" />
<person posts="5" size="696" who="Jani Vaarala" />
<person posts="5" size="18" who="Robert Shearman" />
<person posts="5" size="15" who="Shachar Shemesh" />
<person posts="5" size="11" who="Tom Wickline" />
<person posts="4" size="10" who="Rein Klazes" />
<person posts="4" size="10" who="Dave Pickles" />
<person posts="3" size="8" who="Adam Treat" />
<person posts="3" size="7" who="Eric Pouech" />
<person posts="3" size="7" who="John Wehle" />
<person posts="3" size="7" who="Michal Janusz Miroslaw" />
<person posts="3" size="7" who="Ove Kaaven" />
<person posts="2" size="11" who="Enrico Horn" />
<person posts="2" size="7" who="Gavriel State" />
<person posts="2" size="7" who="John Westerman" />
<person posts="2" size="7" who="Raphael Junqueira" />
<person posts="2" size="7" who="Waldeck Schutzer" />
<person posts="2" size="6" who="Andreas Mohr" />
<person posts="2" size="5" who="Jukka Heinonen" />
<person posts="2" size="5" who="Mathew McBride" />
<person posts="2" size="5" who="Dmitry Timoshkov" />
<person posts="2" size="5" who="Rolf Kalbermatter" />
<person posts="2" size="5" who="Robert North" />
<person posts="2" size="5" who="Joerg Mayer" />
<person posts="2" size="5" who="Uwe Bonnes" />
<person posts="2" size="5" who="Jeremy Newman" />
<person posts="2" size="4" who="Martin Cracauer" />
<person posts="2" size="4" who="Dimitrie O. Paun" />
<person posts="2" size="4" who="Shachar Shemesh" />
<person posts="2" size="3" who="Gerald Pfeifer" />
<person posts="1" size="9" who="Mauro Carvalho Chehab" />
<person posts="1" size="4" who="liu spider" />
<person posts="1" size="4" who="Bobby Bingham" />
<person posts="1" size="4" who="Dave Miller" />
<person posts="1" size="4" who="Thomas Mertes" />
<person posts="1" size="3" who="Huw Davies" />
<person posts="1" size="3" who="Roderick Colenbrander" />
<person posts="1" size="3" who="Dan Kegel" />
<person posts="1" size="3" who="Stefan Leichter" />
<person posts="1" size="3" who="Rick Romero" />
<person posts="1" size="3" who="Oliver Sampson" />
<person posts="1" size="3" who="Juergen Schmied" />
<person posts="1" size="2" who="Johan Gill" />
<person posts="2" size="4" who="Vincent Beron" />
<person posts="1" size="2" who="Matthew Davison" />
<person posts="1" size="2" who="Alex Pasadyn" />
<person posts="1" size="2" who="Paul Millar" />
<person posts="1" size="2" who="Peter Hunnisett" />
<person posts="1" size="2" who="Lina Kemmel" />
<person posts="1" size="2" who="David Miller" />
<person posts="1" size="2" who="Ronald James" />
<person posts="1" size="2" who="John K. Hohm" />
<person posts="1" size="2" who="Patrik Stridvall" />
<person posts="1" size="2" who="Enrico Horn" />
<person posts="1" size="2" who="Zsolt Rizsanyi" />
<person posts="1" size="2" who="Jyrkka Nieminen" />
<person posts="1" size="2" who="Lawson Whitney" />
<person posts="1" size="1" who="Brian Vincent" />
<person posts="1" size="1" who="Dimitrie O. Paun" />
<person posts="1" size="1" who="David D. Hagood" />
<person posts="1" size="1" who="Luis Marques" />
<person posts="1" size="1" who="Javier Canovas" />
<person posts="1" size="1" who="Jeremy White" />

</stats>
<section 
	title="News: kerneltraffic.org, CrossOver Plugin 1.2, SuSE Offering" 
	subject="News"
	archive="http://www.kerneltraffic.org" 
	posts="3"
	startdate="01/18/2003"
	enddate="01/24/2003"
>
<topic>News</topic>
<p>Zack Brown's Kernel Traffic web site has changed -
it's now <a href="http://www.kerneltraffic.org">
www.kerneltraffic.org</a>.  If you're reading the
kernel cousin variant of this, you may want to
update your links.</p>
<p>
Maybe I should take this
opportunity to explain a little about differences 
between the 
<a href="http://www.winehq.org/news/?view=back">Wine Weekly News</a> and
<a href="http://www.kerneltraffic.org/wine/latest.html">
Kernel Cousin Wine</a>.  For the most part, the content is
the exact same.  It's all XML based, but each uses a
different parser.
You may notice a difference in the publication
times - I complete most of the issues on Thursday nights
and mail them to Zack Brown (Kernel Traffic) and Jeremy 
Newman (WineHQ maintainer).  Both are excellent at posting
the latest issue, though for some strange reason they sometimes 
decide to go on vacation.  So if don't see an issue appear on
one site you may end up finding it on the other.  If you
haven't read the other version of this, try it out.  Each
one has it's own set of features.</p>

<p>Oh, and next week's issue will be finished on Saturday.</p>

<p>CodeWeavers released version 1.2.0 of their CrossOver
Plugin product.  This 
<a href="http://www.codeweavers.com/about/press_releases/?id=20030123">latest 
version</a> has support for Active
X controls embedded in web pages as well as improved 
support for Windows Media Player and Trillian.  Another
key feature is support for the newest Linux distributions.
For $24.95 it can be yours immediately.</p>

<p><a href="http://www.itweek.co.uk/">IT Week</a> has a review
of SuSE's Linux Office Office Desktop.  In case you haven't
heard, this product contains  CodeWeavers CrossOver Office 1.3.1
<a href="http://www.itweek.co.uk/Products/Software/1138079">Their
recommendation</a> was for people "who only use Microsoft Word
and Excel" which I found rather strange.  Their conclusion:</p>
<quote who="IT Week"><p>
<u>Verdict</u></p><p>
SuSE's Linux Office Desktop makes migration to Linux easier, but inexperienced 
users may still need more support than is necessary for Windows. We found no 
major problems with hardware support, but users with unusual configurations 
may have configuration difficulties.
</p><p>
Pros: 
<ul>
Easy installation; runs common Windows applications.</ul></p><p>

Con: 
<ul>Windows users may need some retraining.</ul></p></quote>


</section>




<section 
	title="Kernel Module / Shared Memory Revisited" 
	subject="Wine kernel acceleration module?"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0737.html" 
	posts="17"
	startdate="01/18/2003"
	enddate="01/23/2003"
>
<topic>Integration</topic>
<p>Mathew McBride wondered about whether a kernel module would help
speed up Wine,
<quote who="Mathew McBride">
If we implemented a kernel module (keep in mind, it would have to be enabled 
in the kernel and wine config file so it doesn't make wine directly attached 
to Linux, e.g so people can port it easier to other Unixes), would that help 
speed up some DirectX games? (as Linux display drivers don't implement 
DirectX functions). </quote></p>

<p>In reply, I referenced a post from December:</p>
<quote who="Brian Vincent"><p>
If you
dig in the WWN archives you'll find mentions of it
going back a few years.  Much more interesting was
this post:
<ul>
<a href="http://www.winehq.org/hypermail/wine-devel/2002/12/0550.html">
http://www.winehq.org/hypermail/wine-devel/2002/12/0550.html</a>
</ul></p><p>
The approach is a shared memory wineserver.
</p></quote>

<p>The kernel module idea has been covered before,
most recently in December 
<kcref subject="Prototype implementation of a shared memory winserver"
       startdate="12 Dec 2002 00:00:00 -0800" /> and previous 
to that back in the spring of 2001
<kcref subject="Speeding up wineserver syncronization objects with shared memory"
       startdate="06 Mar 2001 01:00:00 -0700" />

<kcref subject="Speeding up wineserver syncronization objects with shared memory"
	startdate="03 Apr 2001 01:00:00 -0700" />.  </p>

<p>Dan Kegel thought the kernel module was the way to go,
but Gavriel State gave some more detail about the shared
memory approach:</p>
<quote who="Gavriel State"><p>
Each approach has its own merits - you'll note in our paper that we also
posted sources and design documentation for KWine, an alternative wineserver
kernel module design that keeps Win32 HANDLE objects in a Linux file system.
We spent some time on that as well before working on the ShmServer approach.
</p><p>
With a kernel module approach, hosting multiple wineserver environments
becomes more difficult.  A kernel module also brings with it a number of
packaging issues, and would require significant work to be moved to
non-Linux OSes.  Lastly, the kernel module approach requires an all-at-once
rewrite of the wineserver interactions, whereas the ShmServer can be
implemented on a call-by-call basis.  About the only thing a kernel module
would have over the ShmServer on the performance front would be the ability
to do PE relocation fixups at page-in time, like Windows does.  The value
of that feature is limited, IMHO.  A kernel module may also have some
benefits from the security perspective.
</p><p>
Regardless of which one is better, it would be nice to see more interest
in this topic from other developers.  If anyone else is interested in
collaborating on the ShmServer or kernel module approaches, that would
be great.
</p></quote>

<p>Dan felt the feel the contraints of a kernel module weren't
that bad and might offer some advantages:</p>
<quote who="Dan Kegel"><p>
 We don't need
 multiple wineserver environments, really, except in
 the same way that we need multiple linux environments
 (e.g. with chroot jails).
</p><p>
There might be some way of bringing
in the kernel module incrementally.  You'd know better than
me, but still...
</p><p>
I suspect the kernel module would be better protected from
wild memory accesses by the user processes as well.
</p></quote>

<p>Francois Gouget and Shachar Shemesh then debated what effects
moving parts into a kernel module would have.  Francois summarized
what crashes based on where the bug is:</p>
<quote who="Francois Gouget"><p>
</p><p>

<table border="1"><tr><th></th>
	<th>Current</th>
	<th>Kernel</th>
	<th>Shm</th>
</tr><tr>
	<td>Bug in a Wine library</td>
	<td>Process</td>
	<td>Process</td>
	<td>Wine</td>
</tr><tr>
	<td>Bug in a Windows application</td>
	<td>Process</td>
	<td>Process</td>
	<td>Wine</td>
</tr><tr>
	<td>Bug in the server</td>
	<td>Wine</td>
	<td>Machine</td>
	<td>Wine</td>
</tr></table>
</p></quote>
<p>He also added, <quote who="Francois Gouget">

So you're better of with the kernel module if the bug is in the
application, and you're better of with shm if the bug is in the server.
Then it's a matter of which one is more likely. It's also a good
argument for having the option to keep using the current server so that
you can make the trade-off between speed and stability yourself.
</quote></p>

<p>Gav didn't think the table was completely accurate:</p>
<quote who="Gavriel State"><p>
The ShmServer is designed with that in mind.  The server code has
been moved into a shared library, and the wineserver process still
exists in the ShmServer model.  While it's not actually available in the
current code, it would be trivial to restrict access to the shm area
to specific trusted processes and force other processes to go through
the normal wineserver route.
</p><p>
Additionally, the ShmServer is designed so that the actual shared
memory area can be write-locked until a server call is made.  Thus it
becomes very difficult, though not completely impossible, for an
individual process to scribble over the server memory by accident.
So the bottom right entry in your table should perhaps be changed
to read '99% Process / 1% Wine'
</p><p>
What it does *not* prevent is a deliberately malicious app scribbling
over server memory - certainly a problem, but for many uses of Wine,
not a significant one.
</p><p>
Another key factor in favour of the ShmServer is that we've got
a working prototype available right now that runs several real-world
apps. 8-)
</p></quote>
</section>




<section 
	title="InstallShield 6 Insight" 
	subject="InstallShield 6 crash: ole trouble"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0824.html" 
	posts="20"
	startdate="01/20/2003"
	enddate="01/23/2003"
>
<topic>RPC / COM / OLE</topic>
<p>InstallShield 6, while better, continues to plaque Wine.  
This week Dan Kegel asked for some help:</p>
<quote who="Dan Kegel"><p>
So, how's that InstallShield 6 support coming along? :-)
</p><p>
The company I work for uses InstallShield to package up
its windows stuff.  Today I tried running its installer
under cvs Wine, and shortly after it started running IKernel.exe,
it dropped me into the wine debugger.
</p></quote>

<p>Bobby Bingham suggested trying the following,
<quote who="Bobby Bingham">
InstallShield 6 can work if you copy stdole32.tlb from a real 
windows to wine's system directory.  maybe stdole.tlb and stdole2.tlb 
too, but i don't know if they're needed or not, i just copy them just 
in case.</quote></p>

<p>Dan reported success, but with several caveats:</p>
<quote who="Dan Kegel"><p>
Yep, copying just that one file made things get a lot further!
After futzing around for half an hour, I finally convinced our
app to install.  There appear to be a lot of rough edges
here; I had to turn on ole logging and run just the extracted
setup.exe (not the package-for-the-web wrapper) to get
things to work, and even then, I had to move the big background
window around, etc.  Also, if things failed for any reason,
I had to kill leftover wine processes, or the next run would fail.
Still, this is progress!</p></quote>

<p>That led Mike Hearn to ask, 
<quote who="Mike Hearn">
Would this be fixed by the work that's being done on Wines RPC
implementation?
Why exactly does an installer require such complex parts of OLE anyway?
That seems like overkill for a self-extracting exe to me.</quote></p>

<p>Sylvain Petreolle wanted to know what was so special about 
stdole2.tlb and if there's any work being done to implement it.
Marcus Meissner explained:</p>
<quote who="Marcus Meissner"><p>
The TLB is a typelib file, which is compiled from a .IDL file.
</p><p>
So widl needs to generate it at one point.
</p></quote>

<p>Greg Turner, who's done extensive work lately with RPC code,
mentioned:</p>
<quote who="Greg Turner"><p>

Well, it's not hard to imagine why an installer might need some 
interprocess communicaiton.  And since RPC is available for basically 
every MS OS out there, and even non-MS platforms, it's easy to see how 
they came to the decision to use it.</p></quote>

<p>Then Ove K&#229;ven, the other RPC guru,  gave a detailed explanation:
</p><quote who="Ove Kaaven"><p>
I think the idea of
using advanced COM stuff makes sense from the InstallShield point of view
- all that COM/DCOM/RPC stuff is already on every Windows installation, so
the installer executable does become smaller by using it instead of
writing their own mechanisms to achieve the same thing.
</p><p>
The program you launch simply does the "Preparing InstallShield Wizard"
thing, this is where interprocess COM call takes place. Once you get past
that and start the actual installer, the main engine (ikernel) only uses
threads (though unfortunately, interthread COM calls aren't quite
implemented yet, so repainting suffers). However, that engine does export
OLE Automation-compatible COM interfaces, probably so that app-specific
installation routines can be written in any language, including Visual
Basic, Java, C++, etc (not just iscript), and still be able to easily call
the ikernel API. This sometimes calls for IPC, but again, this is all
handled by the stuff that's already there in every Windows installation,
so there's no reason for InstallShield to bloat itself with its own
reimplementation of these mechanisms - other than "it causes headaches for
those Wine guys", but that probably wouldn't be their primary concern...
</p></quote>

</section>





<section 
	title="Where is fnt2bdf?" 
	subject="Whither fnt2bdf?"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0916.html" 
	posts="7"
	startdate="01/23/2003"
>
<topic>Status Updates</topic>
<topic>Utilities</topic>

<p>Dan Kegel wanted to know, <quote who="Dan Kegel">
What happened to fnt2bdf?</quote>  </p>

<p>Alexandre explained, <quote who="Alexandre Julliard">
It's still available, it's just no longer installed by default, as
part of the effort to clean up the namespace of things we install in
/usr/bin. Anyway these days you are much better off using client-side
fonts than trying to manually convert Windows fonts to X format.
</quote></p>

<p>Dan thought it was still useful:</p>
<quote who="Dan Kegel"><p>
Does that mean Wine can natively handle .fnt fonts (which
X libraries can't natively, I believe) as client side X fonts?
I suppose Wine would need some user-space app to manage
these fonts, then?
</p><p>
Fonts are a total pain to support right.  I think Red Hat 8.1
might be the first version of Red Hat to get it right...
I can hope, anyway...
</p></quote>

<p>Alexandre answered both questions:</p>
<quote who="Alexandre Julliard"><p>

My understanding is that FreeType can support bitmap fonts, but that
it's not implemented in Wine yet; Huw can give you the details. Anyway
most of the need for fnt2bdf was to convert the Windows standard
fonts, and these are basically all TrueType now.

</p><p>

I guess we could have a font control panel at some point, but there
isn't that much to manage anyway. As long as the font files are
somewhere on the font path everything should just work.
</p></quote>

<p>Huw Davies jumped in with a status update on some of 
the font work he's been doing:</p>
<quote who="Huw Davies"><p>
Wine doesn't handle fnts quite yet.  However I've just added the
necessary functions to FreeType to enable Wine to get hold of all the
information it needs and hopefully I'll get time to finish the Wine
side of things soon.
</p><p>
The fonts we're missing out on are System, FixedSys, Terminal,
Courier, Small Fonts, MS Sans Serif and MS Serif (note there's also a
Microsoft Sans Serif, but that's TrueType and should work already).
</p><p>
There are also 3 'stroke' fonts called Modern, Roman and Script;
FreeType doesn't support this format yet, but they're as ugly as hell
so probably won't be missed.
</p><p>
We'll need to add support for using libfontconfig soon -
that'll mean we don't have to set up a font path manually.
</p></quote>

<p>Dan was excited, <quote who="Dan Kegel">
Yes!  libfontconfig support in Wine will be wonderful,
it'll mean that any fonts the user adds in the "control panel"
in Linux will automatically be available in Wine,
and possibly vice-versa (!).</quote></p>


</section>




<section 
	title="MSVC 4 &amp; Explorer.exe Implementation" 
	subject="placeholder implementation of explorer.exe"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0754.html" 
	posts="4"
	startdate="01/19/2003"
>
<topic>Utilities</topic>
<p>Dan Kegel, in his quest to make Microsoft's Visual C++ v4
work, put together some info on it and asked about adding
a new tool:</p>
<quote who="Dan Kegel"><p>

I collected my notes about getting msvc4's setup running under Wine at
<ul><a href="http://www.kegel.com/linux/winelog.html">
   http://www.kegel.com/linux/winelog.html</a></ul></p><p>
I now have wordpad reading .wri files properly under Wine
(needed for the "STL" button).  The next problem is that
the setup program does
   <tt>ShellExecute(..., "explorer.exe", ".", ...)</tt>
to pop up an explorer window.
</p><p>
Well, wine has Winefile, but not explorer.exe.  It looks
like the path of least resistance is for me to write a trivial
little explorer.exe that just cd's to argv[1] and fires
up winefile (which always operates on the current directory).
I've written it, and I expect when I add the needed
registry entry, it'll make msvc4's setup's "explore this cd" button
work fine.
</p><p>
Anyone think that'd be a bad thing to put into the Wine tree?
</p></quote>

<p>Juergen Schmied replied:</p>
<quote who="Juergen Schmied"><p>
I attached a small explorer like programm onto
<a href="http://bugs.winehq.org/show_bug.cgi?id=1227">
[ Bug #1227 ] </a>
maybe we could port it into c code and include it into wine.
It might be a good starting point to start a full featured explorer like
programm.
(And it's a good test for built in shell32)
</p></quote>

<p>Sylvain Petreolle wasn't sure if that was the best 
approach, 
<quote who="Sylvain Petreolle">
I think that Dan has a shorter and better solution.
After all its easier to fix the existing code and write a wrapper than
coding a new program.</quote></p>

<p>Dan hacked up an example of his idea:</p>
<quote who="Dan Kegel"><p>
OK, then.  
<a href="http://www.winehq.org/hypermail/wine-devel/2003/01/0768.html">
Here's a patch</a> that makes 'start explorer.exe d:\' work
(needed by msvc4.0's setup program).
</p><p>
Note that winefile had not in the past been installed in the
fake windows area.  This patch causes it to be installed there,
and indeed under the name 'winfile.exe'.  Hope that's ok.
</p><p>
I'm tempted to wait until somebody else agrees that this
works before posting it to wine-patches...
</p></quote>

</section>




<section 
	title="Executing Batch Files" 
	subject="Launch a unix process from wcmd?"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0734.html" 
	posts="6"
	startdate="01/18/2003"
>
<p>Greg Turner wanted to automate some work but was having a
problem:</p>
<quote who="Greg Turner"><p>
I am trying write scripts to mangle the output of MIDL.  After MIDL 
runs, I need to do a tiny amount of post-processing using UNIX apps 
(convert from CRLF, for starters).
</p><p>
So, I have batch file that I run under wine to invoke MIDL and get the 
output I want; My question is: is there some way I can invoke my unix 
shell script from my .bat file in wine under wcmd?
</p><p>
If not, perhaps we should squeeze this functionality into Dan's 
start.exe implementation?  How would you feel about this, Dan?
</p><p>
Alternatively, if I could invoke my .bat file from the UNIX 
command-line, this would be just as good... but so far, the only way I 
have found is to run "wcmd" and type.  Does wcmd have some equivalent 
to bash's "-c" command-line argument?  Surely real cmd.exe has some 
such feature?
</p></quote>

<p>Dave Pickles replied that the first idea wouldn't work, but the second
one would:</p>
<quote who="Dave Pickles"><p>
wcmd relies on the implementation of CreateProcess to invoke a program, and 
as I'm sure we discussed here recently that doesn't handle unix binaries.
</p><p>
The "/c" syntax is supported, to execute one command then exit, but not "-c". 
wcmd was written to emulate the functionality of DOS 6, though some later 
features have since been added.
</p></quote>


<p>Lawson Whitney gave an example:</p>
<quote who="Lawson Whitney"><p>

<code>wcmd /c batfile</code>
</p><p>
you may put it in a shell script, if you like.  output is to stdout
(no window is created).
</p></quote>

</section>


<section 
	title="Extracting Icons" 
	subject="Extracting icons from Windows .exes"
	archive="http://groups.google.com/groups?dq=&amp;hl=en&amp;lr=&amp;ie=UTF-8&amp;selm=87ptqud23t.fsf%40rudi.niederhof" 
	posts="2"
	startdate="01/18/2003"
>
<topic>Fixes</topic>
<p>I've never covered this forum before, but I happen to be bored
tonight.  Here's a question from comp.emulators.ms-windows.wine:</p>

<quote who="Johannes Rohr"><p>
 Is there a way to extract program icons from Windows executables? Wine
 obviously has the functionality somewhere: wineshelllink uses it to
 add menu entries with icons.
</p><p>
But often setup routines fail to interact with wine/wineshelllink so
that a program is installed but no menu entry created.
</p><p>
So is there a way to access the "extract icons" functionality
manually? 
</p></quote>

<p>Someone suggested,
<quote who="Vilppa">
Windows program Irfanview can extract icons. It works with wine and is free.</quote></p>


</section>




<section 
	title="Installing IE5.5" 
	subject="Installing IE5.5"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0692.html" 
	posts="1"
	startdate="01/17/2003"
>
<topic>Fixes</topic>
<p>Shachar Shemesh got Internet Explorer 5.5 to install.  It
seems like only a few months ago people were wondering how
to get it to run at all, let alone install from scratch.
Shachar's recipe:</p>
<quote who="Shachar Shemesh"><p>
I managed to install IE5.5 using the following procedure:
<ol>
   <li> Download the IE5.5 base install from MS</li>
   <li> Set .wine/config as suggested a few days ago (ver=nt40,
      setupapi=builtin, *=native,builtin)</li>
   <li> Using the latest Wine (20030115), run the setup tool</li>
   <li> I, personally, made two sessions. One downloading everything, and
      the other for installing.</li>
   <li> Install just the basic IE. No Connection wizard or anything else.</li>
   <li> When setup finishes (and you get an error in processing the reboot)
      - wait for all wine instances to exit</li>
   <li> run wineboot.</li>
   <li> One of the programs initiated by wineboot fails to run (starts
      winedbg), just shut it down.</li>
   <li> That's it - IE works, sortof.</li></ol></p><p>

I'm hoping this proves useful to everyone.

</p></quote>

<p>This came on the heels of a few other recent IE posts.  A few
weeks ago someone posted about 
<a href="http://www.winehq.org/hypermail/wine-devel/2003/01/0624.html">
installation problems</a>.  About the same time Frank's Corner
published a short guide to 
<a href="http://www.frankscorner.org/explorer_5_5.html">installing IE</a> 
using a cab extraction program.</p>

</section>


<section 
	title="Wine Robustness?" 
	subject="wine robustness?"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0706.html" 
	posts="2"
	startdate="01/17/2003"
>
<topic>Memory Management</topic>
<p>Dan Kegel wondered about how solid Wine's memory management was:</p>
<quote who="Dan Kegel"><p>
Say, how much address space protection is there in Wine?
If a Wine process follows a wild pointer or passes garbage
arguments to a Windows function call, are Wineserver
and the other wine processes protected?
</p><p>
Imagine a user running Word, and also some less reliable
windows program.  When that other program crashes, it shouldn't
take Word with it.
</p><p>
One way to check that kind of protection is with programs like 'crashme':
<a href="http://people.delphiforums.com/gjc/crashme.html">
http://people.delphiforums.com/gjc/crashme.html</a>
</p><p>
Has anyone tried running crashme on wine yet?
</p></quote>

<p>Alexandre's response was that it had already been taken into account,
<quote who="Alexandre Julliard">
Yes, everything is protected. The only exception is when using some of
the native Win9x dlls that have shared data sections, in that case a
wild pointer can crash other processes. But otherwise it shouldn't
happen; and the wineserver should never crash no matter what the app
does.
</quote></p>

</section>



<section 
	title="CVS Vulnerability?" 
	subject="Fwd: [MPlayer-dev-eng] cvs remote vulnerability"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0850.html" 
	posts="2"
	startdate="01/21/2003"
>
<topic>Project Management</topic>
<p>CVS has been in the news this week with security problems
that have prompted several distributions to
release updates of the package.  Sylvain Petreolle forwarded
an email from Robert Penz wondering if Wine's CVS was
affected by 
<a href="http://security.e-matters.de/advisories/012003.html?SID=b105dbb11a6affba5feee752bfc3c53e">a
vulnerability</a>.  Jeremy Newman replied,
<quote who="Jeremy Newman">
Thanks! The version of cvs on WineHQ.org is patched for this issue.</quote>
</p>
</section>

<section 
	title="Whither wine-releases ?" 
	subject="wine-releases has gone?"
	archive="http://www.winehq.org/hypermail/wine-devel/2003/01/0702.html" 
	posts="3"
	startdate="01/17/2003"
>
<topic>Project Management</topic>
<p>Mike Hearn asked about an old Wine mailing list,
<quote who="Mike Hearn">
On the Wine release notice it talks about a mailing list for large diffs
between the releases, which would be useful for me (no cvs access at the
moment at work), but the list appears to be dead, with no archives
available. Is it still in use?</quote></p>

<p>Alexandre wasn't sure about a wine-releases archive, but
mentioned it was still around,
<quote who="Alexandre Julliard">
 It's in use, I'm not sure why the archives are empty. But note that
 the diffs I send there are the same than what you can get on sunsite,
 so archives wouldn't be all that useful anyway.</quote></p>

<p>Jeremy Newman found the problem with the mail archives and
fixed it, <quote who="Jeremy Newman">
I took a look into this and found the problem. We use hypermail for our
archives, there wasn't a config file for that list. I created one just
now. So hopefully, the next post to that list will get the archives
going. I don't know if that will bring back the old posts to the list
though. I'll dig through the hypermail docs some more to see if there is
anything else I need to do.</quote></p>

<p>For those interested, you can find the archives at: 
<a href="http://www.winehq.org/hypermail/wine-releases/">
http://www.winehq.org/hypermail/wine-releases/</a>.</p>


</section>


</kc>

