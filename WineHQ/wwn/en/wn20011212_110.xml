<?xml version="1.0" ?>
<kc>

<title>Kernel Cousin Wine</title>

<author email="vinn@theshell.com">Brian Vincent</author>

<issue num="110" date="12/12/2001" />

<intro>
<p>
This is the 110th release of the Wine's kernel cousin publication. Its main 
goal is to distribute widely what's going on around Wine (the Un*x Windows 
emulator). </p>

</intro>


<stats posts="139" size="508" contrib="57" multiples="23" lastweek="27">
<person posts="14" size="35" who="Alexandre Julliard &lt;julliard@winehq.org&gt;" />
<person posts="11" size="27" who="Francois Gouget &lt;fgouget@free.fr&gt;" />
<person posts="8" size="22" who="Andreas Mohr &lt;andi@rhlx01.fht-esslingen.de&gt;" />
<person posts="8" size="22" who="Dan Kegel &lt;dank@kegel.com&gt;" />
<person posts="7" size="24" who="Oliver Sampson &lt;olsam@quickaudio.com&gt;" />
<person posts="6" size="16" who="Hetz Ben-Hamo &lt;hetz@kde.org&gt;" />
<person posts="4" size="12" who="Lawson Whitney &lt;lawson_whitney@juno.com&gt;" />
<person posts="4" size="10" who="Ove Kaaven &lt;ovehk@ping.uio.no&gt;" />
<person posts="10" size="87" who="Eric Pouech&lt;eric.pouech@voila.fr&gt;" />
<person posts="3" size="13" who="Michael Stefaniuc &lt;mstefani@redhat.de&gt;" />
<person posts="3" size="9" who="Gavriel State &lt;gav@transgaming.com&gt;" />
<person posts="3" size="8" who="James Juran &lt;jamesjuran@alumni.psu.edu&gt;" />
<person posts="3" size="8" who="Jon Griffiths &lt;jon_p_griffiths@yahoo.com&gt;" />
<person posts="4" size="8" who="Bill Medland &lt;medbi01_1@accpac.com&gt;" />
<person posts="3" size="7" who="Peter Samuelson &lt;peter@cadcamlab.org&gt;" />
<person posts="3" size="6" who="Gerard Patel &lt;gerard.patel@nerim.net&gt;" />
<person posts="2" size="18" who="Mike McCormack  &lt;mike_mccormack@start.com.au&gt;" />
<person posts="2" size="8" who="David Elliott &lt;dfe@tgwbd.org&gt;" />
<person posts="2" size="6" who="Dave Hawkes &lt;daveh-wine@cadlink.com&gt;" />
<person posts="2" size="6" who="Uwe Bonnes &lt;bon@elektron.ikp.physik.tu-darmstadt.de&gt;" />
<person posts="2" size="6" who="Jukka Heinonen &lt;jhei@iki.fi&gt;" />
<person posts="2" size="6" who="Jeremy White &lt;jwhite@codeweavers.com&gt;" />
<person posts="1" size="43" who="Martin Wilck &lt;Martin.Wilck@fujitsu-siemens.com&gt;" />
<person posts="1" size="5" who="Gregory Hicks &lt;ghicks@ihug.com.au&gt;" />
<person posts="1" size="5" who="bperkins@netspace.org" />
<person posts="1" size="4" who="Glenn Schrader &lt;geschrader@mediaone.net&gt;" />
<person posts="1" size="4" who="Robert Lunnon &lt;bob@yarrabee.net.au&gt;" />
<person posts="1" size="4" who="Patrik Stridvall &lt;ps@leissner.se&gt;" />
<person posts="1" size="3" who="Rein Klazes &lt;rklazes@xs4all.nl&gt;" />
<person posts="1" size="3" who="Michael Cardenas &lt;michaelc@lindows.com&gt;" />
<person posts="1" size="3" who="Karl Bielefeldt &lt;kbielefe@hotmail.com&gt;" />
<person posts="1" size="3" who="Marcus Meissner &lt;marcus@jet.franken.de&gt;" />
<person posts="1" size="3" who="Rick Romero &lt;rick@valeoinc.com&gt;" />
<person posts="1" size="3" who="Matt Q &lt;turtleislow@hotmail.com&gt;" />
<person posts="1" size="3" who="David Hammerton &lt;crazney@crazney.net&gt;" />
<person posts="1" size="2" who="Matthew Winner &lt;mwinner@altavista.com&gt;" />
<person posts="1" size="2" who="Dmitry Timoshkov &lt;dmitry@baikal.ru&gt;" />
<person posts="1" size="2" who="Chris Green &lt;chris_e_green@yahoo.com&gt;" />
<person posts="1" size="2" who="Michael Zayats &lt;zmichael@regard.co.il&gt;" />
<person posts="1" size="2" who="Guy L. Albertelli &lt;galberte@neo.lrun.com&gt;" />
<person posts="1" size="2" who="Andrew &lt;andrew@transgaming.com&gt;" />
<person posts="1" size="2" who="Gerald Pfeifer &lt;pfeifer@dbai.tuwien.ac.at&gt;" />
<person posts="2" size="4" who="Stefan Leichter &lt;Stefan.Leichter@camLine.com&gt;" />
<person posts="1" size="2" who="Christopher Morgan &lt;chmorgan@speakeasy.net&gt;" />
<person posts="1" size="2" who="Johan Gill &lt;johane@lysator.liu.se&gt;" />
<person posts="2" size="2" who="Duane Clark &lt;dclark@leewardfpga.com&gt;" />
<person posts="1" size="1" who="Ryan C. Stallings &lt;beergeek@lycos.com&gt;" />
<person posts="1" size="1" who="wenhong xing &lt;wenhongx@yahoo.com&gt;" />
<person posts="1" size="1" who="Dmitry Petuhov &lt;wine@petras.ryazan.ru&gt;" />
<person posts="1" size="1" who="J.Brown (Ender/Amigo) &lt;ender@enderboi.com&gt;" />
<person posts="1" size="1" who="Russell Howe &lt;rhowe@wiss.co.uk&gt;" />
<person posts="1" size="1" who="Andriy Palamarchuk &lt;apa3a@yahoo.com&gt;" />
</stats>




<section
  title="Wine, Office, and the Antitrust Settlement"
  subject="Wine, Office, and the antitrust settlement"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/12/0086.html"
  posts="8"
  startdate="12/10/2001"
  enddate="12/10/2001"
>
<p>
I haven't read much on the antitrust settlement the states
are trying to reach.  Frankly, most of the coverage has been
rather academic and inconclusive.  But Dan Kegel took the
time to dig through some of the challenges that face the
open source community and ways to reach a common ground.
He posted the following message to wine-devel:</p>
 <quote who="Dan Kegel"><p>
  I'm proposing that Wine be part of the settlement of the
  Microsoft antitrust trial.  See
  <a href="http://www.kegel.com/remedy.html">
  http://www.kegel.com/remedy.html</a>
  Comments welcome.
 </p><p>
 I have a few questions for Wine developers, especially
 the good folks at CodeWeavers and TransGaming:
 </p><p><ol>
 <li> How much would it cost to achieve full support for
 Office 2000 in Wine?</li>

 <li> Is it true that Office uses undocumented Windows APIs?
  If so, how many?  Are they a significant part of the
  challenge of supporting Office?</li></ol></p>
</quote>

<p>I highly recommend clicking on the link and perusing
through some of the points Dan brings up.  Jeremy White 
replied with some concerns:</p>
 <quote who="Jeremy White">
 <p>
 I read your remedy proposal; nice work.
 </p><p>
 I obviously like your proposal (hire CodeWeavers
 to port Office, great idea! &lt;grin&gt;).  I'm skeptical
 that this proposal will be accepted, and I also feel
 a bit uncomfortable advocating it as it clearly
 benefits organizations like mine, and doesn't so clearly
 benefit the Wine community.
 </p><p>
 However, to answer your question, if you value time
 (i.e. assume people get paid market wages, as opposed
 to donate their time), a reasonable off the cuff
 guess for MS Office support (to make it *really*
 work) is probably on the order of $1-2M or so. 
 </p><p>
 Please note, that's largely a guess, and includes a
 large fudge factor because it's unclear how much
 work Office XP is going to require (AFAIK, no
 one has brought it up in Wine yet).
 </p><p>
 We could probably reduce the cost and
 effort if we had engineers at MS actively helping
 us (so we weren't always fighting up hill).
 </p><p>
 As far as undocumented APIs in Office, I know
 of only one used in Office 2000 (of course, the problem
 with undocumented APIs is that there may be many
 more we're ignorant of).
 </p><p>
 Finally, I think my largest concern with Wine is in
 securing protection from Microsoft patents.  
 </p><p>
 I've lost some large sales because
 Mainsoft sales people use patent FUD successfully
 on my potential customers.
 </p><p>
 Further, it is unclear whether or not
 open source projects such as Samba, Mono, and Wine are
 going to be permitted to play in the post .NET world.
 My greatest fear is that MS will be able to take
 some legal action that will prevent Wine from
 supporting any .net enabled application. 
 </p><p>
 IANAL, so I have not idea as to the full extent of
 the threat from MS or what a potential remedy
 would look like, but IMHO, that's a more
 significant issue than others we've faced.
 </p></quote>

<p>Patrik Stridvall had some thoughts as well:</p>
 <quote who="Patrik Stridvall"><p>
 What is perhaps more realistic to require IMHO that Office and other
 Microsoft  applications shouldn't crash or behave in an inconsistent
 way just because some odd feature in some API call is not available.
 Instead it should say, sorry can't do that not supported in the OS. 
 </p><p>
 This would prevent Microsoft from sabotaging Wine as well
 preventing users of say Windows 95 from needlessly having to
 upgrade.
 </p><p>
 Yes, I'm aware of that Microsoft of course not can check every
 API call and have a fallback for each function, but groups of 
 features that is potentially unneeded for basic features in Office like:
 <ol>
  <li> DirectX </li>
  <li> MAPI </li>
  <li> .NET </li>
  <li> DAO </li>
  <li> "Sound" </li>
  <li> "Networking" </li>
  <li> &lt;Insert whatever favorite technology from Microsoft that you like&gt;  </li>
 </ol>
 shouldn't be required to do normal stuff in Office.</p></quote>

<p>In response to Dan's question about undocumented calls, Andreas
Mohr suggested:</p>
 <quote who="Andreas Mohr"><p>
 Well, I'd say SETUPAPI/SETUPX and SHLWAPI are certainly everything but
 documented...
 There do exist some header file defines for some stuff, but that's about it.
 My guess is that we could come up with a list of at least 10 DLLs that are
 rather badly documented (some even with some malicious intent, I'd say).
 OTOH I'm not sure whether we should try to play some role in that settlement.
 After all we're probably not too visible to Microsoft right now, and we're
 coming along rather nicely.
 Which would probably change rather fast once we make our public voice get
 heard...
 </p><p>
 We really should make up our mind NOW on whether we want to take part or not,
 though.</p></quote>

</section>  







<section
  title="OSS Fixes"
  subject="OSS fixes"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/12/0094.html"
  posts="8"
  startdate="12/10/2001"
  enddate="12/11/2001"
>
<p>

There have been some audio shake-ups for the past month.  A
few different patches have been thrown around.  Eric Pouech 
submitted a new patch to audio.c and asked, 
 <quote who="Eric Pouech">
  could the people who had issues with the latest OSS patch(es) test
  if this one fixes all their issues ?</quote>
</p>

<p>Duane Clark replied a few minutes later and reported,
 <quote who="Duane Clark">
  This patch causes both Riven and Myst to immediately freeze for me, and 
  no sound at all. Without the patch, the sound in Myst works pretty good 
  (occasional brief dropouts). In Riven without the patch, only the 
  opening sequence has sound, and that has many large dropouts. I'm using 
  ALSA drivers in RedHat.</quote>  Eric asked for a debugging trace which
  Duane provided.  </p>
<p>
  The next day Eric submitted another version of the 
  patch and it was greeted enthusiatically by everyone.  Duane wrote
  back, <quote who="Duane Clark"> 
   That one works great. Both Myst and Riven work, and for the first time 
   in Riven all the sound works. There is slight bit of static in the 
   sound, though part of that might be cheap sound hardware (onboard VIA 
   82C686A - which never gives particularly good sound).</quote>  Michael
 Stefaniuc mentioned, <quote who="Michael Stefaniuc">
   Tested it with QuickTime and sound works now flawlessly. Good work.</quote>
 And Gerard Patel's test suite seemed happy too, <quote who="Gerard Patel">
   I have only one serious issue, and it's fixed by your patch.</quote>
</p>
<p>Excellent work!  </p>

</section>  






<section
  title="SHLWAPI Additions"
  subject="SHLWAPI pre-submit questions"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/12/0022.html"
  posts="8"
  startdate="12/04/2001"
  enddate="12/06/2001"
>
<p>Jon Griffiths wrote in to say he's been working on some improvements
to the SHLWAPI dll.  SHLWAPI is the Shell Lightweight API used for
all kinds of tasks such as finding paths and </p>
<quote who="Jon Griffiths"><p>
 I've been hacking on SHLWAPI.dll for a couple of months now while
 holidaying around Thailand, using a beaten up laptop. Since I just
 obtained free use of a real machine with a good net connection, I
 want to start submitting my work but I thought I'd clear up a few
 style issues beforehand:</p>
<p><ol>
<li>Is it OK to give meaningful names to undocumented functions?
     <br />e.g. SHLWAPI_1/2 => UrlGetInfoA/W
     <br />SHLWAPI_5/6 => PathFindOnPathExA/W <br /><br />
 
 I want to do this where the names are no-brainers, as in the case
 above, and the functions are referenced by the dll internally.
</li>
<li>Is it OK to sync shlwapi.h with the windows version ?
 <br />
 e.g. Remove undocumented entries,
       Remove its dependence on obj_base.h (windows has none),
       Add the function exclusion defines as per windows
 <br /><br />
 I assume this is fine, but doing this causes the next question -
</li>
<li>How to deal with shared undocumented functions?
 <br />
 e.g. StrRetToBufA/W is used by shell32, but should not defined in
 shlwapi.h. 
 <br /><br />
 Here there are 4 Choices:<ol>
 <li> Define twice (Ugly)</li>
 <li> Put into a new wine/undocshlwapi.h (Seems that these are
 depreciated?)</li>
 <li> Define anyway  (Im not a fan of having undoc functions in public
 headers)</li>
 <li> Have shell32 functions #include "../shlwapi/internal.h" (A little
 unclean)</li></ol><br /><br />

 I'd like to go for 4, any objections?
</li></ol></p><p>
 I'll start feeding in the new function implementations over the next
 little while, once the structure is sorted.</p></quote>

<p>There were a lot of different opinions for each of the points.
For the first point, Alexandre suggested, <quote who="Alexandre
Julliard">
 No, this will cause major confusion. What you can do is create a
 SHLWAPI_UrlGetInfo internal function that is called both by SHLWAPI_1
 and by other functions that need it.</quote></p>

<p>Guy Albertelli has been hacking on SHLWAPI for a while and had
some suggestions.  As far as syncing up the headers, Guy thought,
<quote who="Guy Albertelli">
 Be careful here, some of the entries took a long time to find since it is
 not that they are undocumented, but just not well documented (in fact I only
 found some of the #defines in Borlands lastest bcc).</quote>  Guy also
felt it would be a good thing to remove the dependence on obj_base.h.
There were other suggestions for how to deal with the shared undocumented
functions, Guy's take on it was, <quote who="Guy Albertelli">
 I created "shlwapi/ordinal.h" for that very purpose (since ordinal.c has the
 "undocumented" routines) and defined the structures for _1 and _2 in it.
 Note that _1 and _2 are used by other parts of shlwapi.</quote></p>

<p>Jon wrote back with game plan:</p>
<quote who="Jon Griffiths"><p>
 Thanks for your prompt responses. Based on your feedback I'll:
</p><p><ol>
 <li> Create internal functions with meaningful names and call them
   when ordinal calls are used within the DLL (A plus to this is
   that the ordinal functions can stay in ordinal.c, and
   the implementation can go into the appropriate file, eg. path.c).</li>

 <li> Make shlwapi.h correspond to its windows cousin, except that:
  <ul>
   <li>Any functions exported by name get defined too, along with
   structures needed to call them (I think we should wrap these in
   "#if defined (__WINE__) || defined (SHLWAPI_UNDOC)", but that can
   wait).</li>
   <li>All ordinal functions get defined in shlwapi/ordinal.h</li>
   <li>Internal functions go into shlwapi/ordinal.h too.</li></ul></li>
</ol></p><p>
 There shouldn't be any conflicts with Guys work: my tree is so out of
 date I have to adapt everything anyway, so I'll make the changes as
 non-gratuitous as possible. The first patch only might be a little
 large due to the header re-org. 
</p><p>
 Header patches coming first, followed by code in managable chunks.
 I've been dying to get this code out in case someone nicks my laptop
 or it blows up (its 7 years old, the poor thing)...
</p></quote>
</section>  






<section
  title="InstallShield 6 Patches"
  subject="InstallShield 6 (inter-proc) patches"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/12/0079.html"
  posts="4"
  startdate="12/09/2001"
  enddate="12/10/2001"
>
<p>TransGaming has done a lot of work on getting InstallShield 6
installers to work under Wine and  Ove K&#229;ven's work can be
found in the WineX code on SourceForge.  So James Brown was 
wondering, 
 <quote who="James Brown">
 Any idea when Oves interprocess patches will be put into the main Wine CVS
 tree? The code currently in WineX isn't really that ugly at all, and it is a
 very important part of Wine to have working IS6 support.</quote></p>
<p>
Alexandre responded, <quote who="Alexandre Julliard">
 It could certainly be applied, even if it's not 100% clean it will
 always be better than not supporting InstallShield at all, as long as
 it doesn't break other things. However I cannot apply anything that
 hasn't been submitted to me under the Wine license, so for more
 information you'll have to ask TransGaming.</quote></p>  
<p> 
Gavriel State from TransGaming also replied to James to say,
 <quote who="Gavriel State">
 There are several factors to that equation, and I'm afraid we don't have
 a firm ETA yet.</quote>  Which prompted Alexandre to write:</p>
<quote who="Alexandre Julliard"><p>
 Well, this worries me. It sounds like you are planning to do the same
 thing you did with your DirectX stuff: by making the code available on
 your site, and promising to release it at some hypothetical future
 date, you remove all incentive for other people to spend time
 improving the main Wine, thus ensuring that it always lacks some
 features. I don't like this at all.
</p><p>
 If you can't/don't want to release your code, I'd strongly suggest
 that you reconsider your strategy of making it publicly available. If
 it was only available to paying customers, there would at least be a
 reason for other people to work on a free implementation. But if
 everybody who needs some feature in Wine can simply download WineX
 instead, no one will spend time re-implementing that feature. This is
 beginning to seriously hurt the project, and we need to find a way to
 address this issue.
</p></quote>

</section>  







<section
  title="UNC Patch"
  subject="Re:UNC patch"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/12/0034.html"
  posts="22"
  startdate="12/05/2001"
  enddate="12/11/2001"
>
<p>
Stefan Leichter submitted a patch that would allow UNC paths
to work under Wine.  Namely, if a Windows program was searching
for something like <code>f:\x</code> Wine would 
be intelligent enough to look through the mounted filesystems
(in particular remote filesystems) and come up with answer.  
Dan Kegel's original suggestion for doing this suggested the
following process:</p>
 <quote who="Dan Kegel"><p>
    Given a UNC path \\foo\bar, 
    <ul>
  	<li>look at /etc/mtab for a matching smbfs mount.</li>
  	<li>If one is found, look at .wine/config for a drive letter mapped to that mount.</li>  
  	<li>If one is found, convert the UNC path to be relative to that drive letter.</li>
    </ul>
</p></quote>
<p>Namely, this would allow the UNC path \\windows-server\x to 
show up as f:\x if it was mounted.  In turn, that can be determined
if smbfs is being used to mount a filesystem.  Eric Pouech suggested
making this configurable, such as whether or not to enable it on a
per host basis.  The thread quickly turned to what depth of configurability
to offer.  On the one hand, if a smbfs filesystem is mounted why not
just use it?  Alexandre also mentioned that it might not even be
worth parsing /etc/mtab and just create the drive mappings in the
wine config file.  Gavriel State wrote in to say:</p>
 <quote who="Gavriel State"><p>
 One of the problems we've come across recently is this: for games that
 use copy protection, we need to have direct access to the device that
 a CD-ROM drive uses.  For the moment, this relys on the user to manually
 configure their drive letters.  From what we've seen, doing so is 
 beyond the ken of many of our users.
 </p><p>  
 As such, we've put together a scheme for parsing /etc/fstab on startup
 (not mtab: the drive may not be mounted), and automatically adding
 drive letters for each iso9660 filesystem listed.  The patch (to the
 WineX tree) is here:
 </p><p>
 <a href="http://www.geocrawler.com/archives/3/9376/2001/11/0/7204310/">
 http://www.geocrawler.com/archives/3/9376/2001/11/0/7204310/</a>
 </p><p>
 We're happy to contribute this in our next outward merge if people
 think it's useful.  
 </p></quote>

<p>Alexandre wrote, <quote who="Alexandre Julliard">
 It's clear that the current
 mechanism is not very user-friendly nor very flexible. The first thing
 to do would be to make it possible to change drive mappings at
 run-time, and then have them integrated as much as possible with the
 Unix environment, detecting all local filesystems, partition types,
 media changes, possibly even calling mount/umount from Wine, etc.</quote>
</p>
<p>Bill Medlands thoughts were:
 </p><quote who="Bill Medlands"><p>
 Like Dan I initially considered the idea of equating the samba mount point
 with a drive and using the drive.  However that is a hack; Windows doesn't
 require a UNC to equate to a drive.
 Therefore whatever is done needs to involve extending the "equate a DOS
 filename to a unix filename" functionality.
 </p><p>
 There is one further consideration; equating Samba and nfs (and that would
 possibly require something in the config file as suggested by Eric).  The
 complication is byte locking (which I know we don't do yet but maybe one day
 soon we will).  The complication is that although nfs does handle it to the
 best of my knowledge smbfs doesn't (and isn't smbfs unavailable on any unix
 other than Linux?).  Therefore to do locking we would need to equate a UNC
 to a mount point that was actually supported through nfs or some other
 mechanism (I presume smb and nfs are not the only options).
 </p></quote>

<p>And speaking of things other than smbfs, Bob Lunnon was against making
the patch so linux-centric, <quote who="Robert Lunnon">
 On Solaris fstab is vfstab, and mtab is mnttab, parsing these files is no 
 good unless it is done in some portable way. (Not that smbfs even works on 
 Solaris)  I would think that persistent share selection should be saved in 
 the registry and accessed through smbclient rather than smbfs, then smb 
 shares would work for all OSs supporting Samba, not just those supporting 
 smbfs.</quote></p>

</section>  







<section
  title="Using a FAT32 Filesystem"
  subject="Win XP installation support?"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/12/0009.html"
  posts="6"
  startdate="12/02/2001"
  enddate="12/03/2001"
>
<p>Hetz Ben-Hamo had a problem accessing his Windows partition,
<quote who="Hetz Ben-Hamo">
 I have installed wine cvs and I have here on this machine Windows XP pro 
 installed..now - the partition is fat32 and I can access it with /mnt/win without any 
 problem.  However, the tools/wineinstall script simply doesn't recognize my windows 
 partition.</quote></p>

<p>Lawson Whitney suggested going into /etc/fstab and taking a
look at where it mounts the Windows partition.  He suggested
changing the filesystem type from "auto" to "vfat".  Hetz 
replied that he had already done that.  Gerard Patel submitted
a tiny patch to wineconf and wondered if it fixed the problem.
Hetz announced, <quote who="Hetz Ben-Hamo">
 Yes, that helps, could you commit it to the CVS please?</quote></p>

 


</section>  







<section
  title="Async I/O Patch"
  subject="[RFC] Async I/O patch: server code + ReadFileEx()"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0028.html"
  posts="2"
  startdate="12/04/2001"
  enddate="12/04/2001"
>
<p>Martin Wilck announced some fixes for async I/O problems
that have been discussed before:</p>
 <quote who="Martin Wilck"><p>
 here is a patch that fixes some of the issues with the async IO
 implementation in Wine that we discussed previously. My work on this
 was delayed by other duties, sorry. To make matters worse, I'll be
 out of office for the next 4 weeks (vacation :-)
</p><p><ul>
        THIS PATCH IS NOT FOR PRODUCTION USE.
</ul></p><p>
 I am submitting it as a RFC to show the basic concepts I am aiming at.
 Most important is the server-side code (server/async.h, server/async.c)
 that demonstrates the basic mechanism I am suggesting.
</p><p>
 As an example, I recoded ReadFileEx() to use the new approach. Basic
 testing with disk file I/O works as expected. The code no longer messes
 up the order of requests. 
</p><p>
 Please have a look at this code and tell me if you consider it a
 reasonable basis for further development.
</p></quote>
<p>
Mike McCormack replied:</p>
<quote who="Mike McCormack"><p>
 i hadn't heard from you in a while, so i thought you might have given
 up after nobody said anything about the last patch, but i see you've
 been busy :-)
</p><p>
 i also had a go at fixing the problems you pointed out. i've attached
 the patch i've been working on... don't use it, it _will_ crash your
 wineserver! i need to create a requeue async request like yours, and
 activate my queues properly. The code is written to support async on
 serial port objects, not file objects.
</p></quote>

</section>  






<section
  title="FoxPro 5 Success"
  subject="FoxPro 5 Applications"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0276.html"
  posts="1"
  startdate="11/29/2001"
  enddate="11/29/2001"
>
<p>Rick Romero reported:</p>
<quote who="Rick Romero"><p>
I've been attempting to get Foxpro 5 applications running for a while
now.  Actually, I just download from cvs randomly, and see what happens.
</p><p>
It's been a while, but I decided to try again in October.
At that time, there was an OLE error, but the only other strange
occurrence was a 'locking' of the screen on a print preview.
</p><p>
Since then, this 'locking' is the only issue (though I haven't yet
attempted to print).
The apps I'm trying are my own, basically just a form is called, the
user puts in a date range, and a report is run.  You can view the report
in the print preview window, close the window, use the scroll button on
the mouse to change pages, etc.  BUT, if you click on the preview
itself, and attempt to scroll down to the bottom of the page, a 'lockup'
appears to happen.  I've just been waiting around hoping for it to be
fixed.
</p><p>
Today, for giggles, I decided to run the whole Visual Foxpro development
environment.  It ran!  (BTW, I'm trying to do this all with fake
windows, and all I've added is the VFP 5 runtime)
</p><p>
BUT, anytime I click in an edit Window, MDI interface, the program acts
as if I'm holding the shift key down, and as I move my mouse, all the
text gets highlighted.  I can't 'turn it off', so if there wasn't any
text there, it surely would appear locked.
</p><p>
I've changed the config from the fake_windows, to point to my Win2k
install, but the behavior is the same.  
</p><p>
I'm actually getting kind of excited now, because we're a small company,
and all we run is Fox5 apps (SBT / Skyline -- well, and a couple Fox2.6
win), and Office 2k.    
</p><p>
If I can run the development environment in Linux, I can take a real
look at using linux desktops, either directly, or via LTSP.
</p><p>
I don't get any debug info when the 'shift' occurs, and I'm not sure how
to dump enough information to see the 'shift keypress' happen (assuming
I could fix the problem myself in a way that doesn't interfere with the
programming standards..), can someone point me in the right direction?
</p></quote>
</section>






<section
  title="Merry Christmas!"
  subject="Happy Christmas wine"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/11/0035.html"
  posts="1"
  startdate="12/05/2001"
  enddate="12/05/2001"
>
<p>
Russell Howe posted a link:</p>
<quote who="Russell Howe"><p>
 I got sent a Christmas card in Windows EXE format. Since it works
 perfectly with wine I thought I'd share it :)
</p><p>

</p></quote>
</section>




</kc>
