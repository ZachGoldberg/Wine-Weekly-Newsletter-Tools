<?xml version="1.0" ?>
<kc>

<title>Kernel Cousin Wine</title>

<author email="brianv@ski-copper.com">Brian Vincent</author>

<issue num="103" date="09/12/2001" />

<intro>

<p>This is the 103rd release of the Wine's kernel cousin publication. Its
main goal is to distribute widely what's going on around Wine (the Un*x
Windows emulator).</p>

<p>I just got back from traveling and put this together.  I was in New York
City all of last week and returned late Sunday.  Little
did I realize I would be one of the last people to see the World Trade
Center standing.  I still cannot comprehend the tragedy that took place and
I feel fortunate all of my friends in the city were scattered in other
parts of Manhattan that day.  My heart goes out to anyone affected
by this disaster.</p>

<p>Anyway... there's been some interesting Wine press.  First off, we have
CodeWeavers announcing their CrossOver Plugin.  This is a Linux
Netscape browser plugin that allows you to run plugins meant
for Windows.  For example, you can install Microsoft's Word
Viewer program to read those pesky office files.  Likewise for
Excel.  This also mean QuickTime and Shockwave files can be viewed out of the
browser.  This is excellent work and the CodeWeavers team should
be commended for the code that has been contributed back into
Wine.  Check out the press release here:<br /><a 
href="http://www.codeweavers.com/about/press_releases/?id=20010827.xml">
http://www.codeweavers.com/about/press_releases/?id=20010827.xml</a><br />
and more details here:<br /><a 
href="http://www.codeweavers.com/products/crossover/the_real_dirt.php#j">
http://www.codeweavers.com/products/crossover/the_real_dirt.php#j</a>
</p>

<p>We also saw the release of another vintage of Wine.  The 
<a href="http://cvs.winehq.org/cvsweb/wine/ChangeLog?rev=1.50&amp;content-type=text/x-cvsweb-markup">
full changelog</a> can be found in the CVS repository.  Noted changes
include:</p><p><ul>
	<li> Inter-process SendMessage support.</li>
	<li> More DDE improvements.</li>
	<li> Preparation work for shared window handles.</li>
	<li> Several debugger improvements.</li>
	<li> Better GDI objects management.</li>
</ul></p>

<p>The folks over at ZDNet decided to do a head-to-head shootout
among Windows-on-Linux solutions.  Included were VMware products, 
Win4Lin, WinToNet, and Wine.  The <a 
href="http://techupdate.zdnet.com/techupdate/stories/main/0,14179,2806411,00.html">
article</a> has <a 
href="http://techupdate.zdnet.com/techupdate/stories/main/0,14179,2806411-6,00.html">
a page</a> dedicated to Wine.  </p>


</intro>


<stats posts="176" size="698" contrib="40" multiples="27" lastweek="19">
<person posts="30" size="71" who="Alexandre Julliard &lt;julliard@winehq.org&gt;" />
<person posts="17" size="50" who="Daniel Walker &lt;diwalker@earthlink.net&gt;" />
<person posts="14" size="38" who="Gerard Patel &lt;gerard.patel@nerim.net&gt;" />
<person posts="12" size="34" who="eric pouech &lt;eric.pouech@wanadoo.fr&gt;" />
<person posts="10" size="76" who="Francois Gouget &lt;fgouget@free.fr&gt;" />
<person posts="10" size="38" who="Uwe Bonnes &lt;bon@elektron.ikp.physik.tu-darmstadt.de&gt;" />
<person posts="8" size="18" who="Ove Kaaven &lt;ovehk@ping.uio.no&gt;" />
<person posts="7" size="17" who="Dan Kegel &lt;dank@kegel.com&gt;" />
<person posts="5" size="17" who="lawson_whitney@juno.com" />
<person posts="5" size="14" who="Eric Pouech&lt;eric.pouech@voila.fr&gt;" />
<person posts="4" size="11" who="Mike McCormack  &lt;mike_mccormack@start.com.au&gt;" />
<person posts="4" size="9" who="Marcus Meissner &lt;marcus@jet.franken.de&gt;" />
<person posts="4" size="9" who="Bobby Bingham &lt;uhmmmm@ameritech.net&gt;" />
<person posts="4" size="8" who="mdew &lt;rpbrown@xtra.co.nz&gt;" />
<person posts="3" size="9" who="Andreas Mohr &lt;a.mohr@mailto.de&gt;" />
<person posts="3" size="6" who="Bill Medland &lt;medbi01@accpac.com&gt;" />
<person posts="3" size="6" who="Jeremy White &lt;jwhite@codeweavers.com&gt;" />
<person posts="2" size="20" who="Justin Santa Barbara &lt;justinsb@hotmail.com&gt;" />
<person posts="2" size="8" who="Ladislav Sladecek &lt;lsla@post.cz&gt;" />
<person posts="2" size="8" who="Brad Campbell &lt;brad@seme.com.au&gt;" />
<person posts="2" size="6" who="Vladimir Vukicevic &lt;vladimir@ximian.com&gt;" />
<person posts="2" size="5" who="Mike Bond &lt;mbond@cox.rr.com&gt;" />
<person posts="2" size="5" who="John Alvord &lt;jalvo@mbay.net&gt;" />
<person posts="2" size="5" who="Robert Lunnon &lt;bob@yarrabee.net.au&gt;" />
<person posts="2" size="4" who="Stefan Leichter &lt;Stefan.Leichter@camline.com&gt;" />
<person posts="2" size="4" who="Michael Stefaniuc &lt;mstefani@redhat.de&gt;" />
<person posts="2" size="3" who="Daniel Sabo &lt;sorry@nospam.com&gt;" />
<person posts="1" size="2" who="Huw D M Davies &lt;h.davies1@physics.oxford.ac.uk&gt;" />
<person posts="1" size="2" who="Nikolas Zimmermann &lt;wildfox@kde.org&gt;" />
<person posts="1" size="2" who="Travis Michielsen &lt;tjmichielsen@yahoo.com&gt;" />
<person posts="1" size="2" who="Malte Starostik &lt;malte@kde.org&gt;" />
<person posts="1" size="2" who="J. Cone &lt;jcone@g8labs.com&gt;" />
<person posts="1" size="2" who="Ibrahim Hamouda &lt;admin@internode.net&gt;" />
<person posts="1" size="2" who="Waldek Hebisch &lt;hebisch@math.uni.wroc.pl&gt;" />
<person posts="1" size="2" who="David D. Hagood &lt;wowbagger@sktc.net&gt;" />
<person posts="1" size="1" who="Gioele Barabucci &lt;gioeleb@tiscalinet.it&gt;" />
<person posts="1" size="1" who="tiago r &lt;tiago_rodrigues@programmer.net&gt;" />
<person posts="1" size="1" who="Robert Lowery &lt;Robert.Lowery@colorbus.com.au&gt;" />
<person posts="1" size="1" who="Marcus Meissner &lt;Marcus.Meissner@caldera.de&gt;" />
</stats>

 




<section
  title="Crypto API"
  subject="CryptoAPI"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/08/0172.html"
  posts="10"
  startdate="08/17/2001"
  enddate="09/06/2001"
>

<p>Travis Michielsen posted a message requesting some ideas on 
implementing the advapi32.dll - the cryptography API that is
being used in more and more applications.  Currently Microsoft
splits this into several small DLLs and Travis was wondering
if he should use the same architecture or simply create one
monolithic DLL.  One large DLL would prevent using the smaller
native versions, but it would also be easier to implement using
the capabilities of something like the OpenSSL library.  Vladimir
Vukicevic had also thought about doing the same thing but using
libgcrypt from GnuPG.  This quickly turned into a licensing
issue concerning GPL'ed code.  Wine uses the X11 license so it's
not possible to ship external GPL'ed libraries with Wine. 
Patrik Stridvall also noted, <quote who="Patrik Stridvall">
However, OpenSSL's license is incompatible with the GPL,
hence any GPL'd applications that wish to use an OpenSSL-backed 
CryptoAPI implementation would be unable to do so.</quote>
Travis Michielsen went on to explain:</p>

<quote who="Travis Michielsen"><p>
Hmm, I never thought about libgcrypt, but if we can somehow use it legally 
then it could be a possible back-end as opposed to or inconjunction with 
OpenSSL.  Naturally, I would prefer not to re-invent the wheel by having to 
re-write every needed algorithm used in the M$ API, if we can find a library 
that is legal in all circumstances :-!</p>
<p>
But has anyone considered the following:</p>
<p><ul>
<li>Writing code that interfaces with either OpenSSL or libgcrypt depending on 
what the USER (or any winelib developer) requires AND has installed on their 
system.  Providing this is legal.  From what I understand this *should* be 
legal long as we're not DISTRIBUTING whatever is illegal to do so.</li>
<li>Use OpenSSL by default if it is more compatible with our own license.</li>
<li>Disabling the cryptoAPI to winelib developers by default to make them aware 
of these issue and allow them to choose the interface that matches their 
requirements.</li>
<li>Provide adequate documentation that discusses these points and touches the 
legalities of this software.</li>
</ul></p>
<p>
One thing we should probably do no matter what is contact the developers for 
both OpenSSL and libgcrpyt and make them aware of out situation. (and 
possibly see which one or both is willing to bend on their license(s)).</p>
</quote>
<p>
For now Travis is concentrating on stubbing out the DLL.  It will be interesting 
to see how this unfolds.</p>


</section>



 


<section
  title="Problem with Specmaker"
  subject="Problem with specmaker"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/09/0019.html"
  posts="4"
  startdate="09/06/2001"
  enddate="09/13/2001"
>
<p>
Guy Albertelli was having a problem with specmaker, 
<quote who="Guy Albertelli">
Recently had a problem with specmaker not generating prototypes. Traced it
down to a problem in function_grep.pl.  I suspect that the preprocessor 
elimination did not expect multiline condition. I don't know perl so I 
can't fix it.</quote>It seems that if you have a header file that
defined something like this:<br /><br />
<ul><code>#define SOMETHING \ <br />
<ul>METHOD(foo, bar, \<br />
    blee)<br /><br />
</ul></code></ul> it would break specmaker.

</p>

<p>Patrik Stridvall posted a small patch and noted,
<quote who="Patrik Stridvall">
Indeed. Here is a working fix I think (not tested).
I found a bug in winapi_check a while ago but the fix didn't 
find its way the function_grep.pl it seems.
The problem might also be that there is whitespace after on of the 
\:es. This is forbidden by ANSI C but most compilers accept it anyway.
</quote></p>

<p>Guy wrote back with a patch of his own and noted, 
<quote who="Guy Albertelli">
No the above patch merely resulted in an infinite loop. After much
consultation with "Perl in a Nutshell", I came up with the following patch.
The header file in question is "shlobj.h".

The patch has two sections. First gets rid of the \n imbeded with the
lookahead for preprocessor statements. The second gets rid of the
ICOM_DEFINE statement (poorly I know) because it has no ";". This seems to
make things work and generate correct headers.</quote></p>


</section>





 




<section
  title="Keyboard Problem"
  subject="keyboard problem"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/08/0296.html"
  posts="6"
  startdate="08/28/2001"
  enddate="08/29/2001"
>

<p>Daniel Sabo inquired about work that needed to be done.  Francois
	Gouget posted an updated version of his hefty Call for Volunteers:</p>

<quote who="Francois Gouget"><p>
   Note that I did not get much time to update it so please send me your
ideas. Also I'm thinking about starting an additional section for
'hard(er)' projects that would significantly improve Wine. Maybe it
could also list projects that are already underway and for which help
would be appreciated (DCOM?, STRICT handles?).
</p><p>
   But first, many thanks go to all those who fixed bugs from the
previous call for volunteers and especially to Maciek Kaliszewski for
his wrc fixes.
</p><p>
   What is the "Call for Volunteers"?
   I have built a list of projects that should be easy to tackle by new
Wine developpers. The main goal is to provide the needed inspiration to
potential Wine developpers that just are not motivated by the standard
'grep FIXME' answer (and I can understand them).
</p><p>
   So here goes.
</p>

<p>Easy:</p>

<ul>
 <li> PrgWin95/98: System metrics differ from the Win9x values<br />
   #48: <a href="http://bugs.winehq.org/show_bug.cgi?id=48">
   http://bugs.winehq.org/show_bug.cgi?id=48</a><br />
   One day I'll fix this one... I swear. Unless you want to work on
   it first. In that case I'll provide you with my test application and
   dumps of the metrics for Win95, Win98, NT4, 2000, ...</li>

 <li> The doc about the command line arguments and the config file is out
   of date. See TextCP, XVideoPort and Synchronous for instance. I'm
   sure there are plenty of other things that are out of date.</li>

 <li> Metabug: Test Wine with the VXCL samples<br />
   #242: <a href="http://bugs.winehq.org/show_bug.cgi?id=242">
   http://bugs.winehq.org/show_bug.cgi?id=242</a><br />
   Get the VXCL samples, test them with Wine and report the bugs in the
   bugzilla database. I know there's lots of them. Then people (or
   yourself) can start fixing these bugs in a distributed fashion.
   You can probably start reporting the most obvious bugs just by
   testing in Wine, but for more subtle bugs you will need two
   computers (or Win4Lin/VMware) to more easily compare the behavior in
   Windows and in Wine.</li>

 <li> Metabug: Test Wine with the Common Control Spy Samples<br />
   #239: <a href="http://bugs.winehq.org/show_bug.cgi?id=239">
   http://bugs.winehq.org/show_bug.cgi??id=239</a><br />
   Get the Common Control Spy samples and test Wine with them. You
   will need the native comctl32 dll but you can do the tests
   without rebooting between each test or using two computers.</li>

 <li> PrgWin95: Listbox getting a recessed border instead of a flat one<br />
   #56: <a href="http://bugs.winehq.org/show_bug.cgi??id=56">
   http://bugs.winehq.org/show_bug.cgi?id=243</a><br />
   (I can provide you with the sample application)
   This one my be fixed, to check...</li>

 <li> I think it would be nice to add a tool that displays the dlls version
   information like 'About' does in the windows explorer. I have some
   code you could use as a starting point and I think it could be
   merged with winver. In fact this would be almost stabdard windows
   programming.</li>

 <li> Tabs are missing their inner border<br />
   #243: <a href="http://bugs.winehq.org/show_bug.cgi?id=243">
   http://bugs.winehq.org/show_bug.cgi??id=243</a><br />
   There's a bug in the drawing of the border of the common control
   tabs. Fixing each of the four instances of the code is easy. It would
   be interesting to find a way to factorize some of this code.</li>
</ul>

<p>Medium (I expect these would take longer or be a bit harder)</p>

<ul>
 <li> QuickBooks Pro Timer does not accept date (GetCalendarInfoA error)<br />
   #276: <a href="http://bugs.winehq.org/show_bug.cgi??id=276">
   http://bugs.winehq.org/show_bug.cgi?id=276</a><br />
   GetCalendarInfoA/W are not implemented yet. They involve
   quite a lot of internationalisation aspects, but providing a
   first implementation that at least handles the common cases
   should be feasible.</li>

 <li> Provide a pedump utility
   #91: <a href="http://bugs.winehq.org/show_bug.cgi?id=91"><br />
   http://bugs.winehq.org/show_bug.cgi?id=91</a><br />
   I know there's sample code that does that already floating around so
   it should be relatively simple.
   Eric Pouech seems to be working on this. I did not check if his
   pedump dump the imports/exports but it probably does.</li>

 <li> CreateIcon does not resize bitmaps<br />
   #175: <a href="http://bugs.winehq.org/show_bug.cgi?id=175">
   http://bugs.winehq.org/show_bug.cgi?id=175</a><br />
   I did a similar fix somewhere some time ago. I can provide a
   sample application and I might be able to point you in the right
   direction.</li>

 <li> winemaker: 'winemaker --nomfc' does not have the intended effect<br />
   #227: <a href="http://bugs.winehq.org/show_bug.cgi?id=227">
   http://bugs.winehq.org/show_bug.cgi?id=227</a></li>

 <li> winemaker: Ignores the '--with-{mfc,wine}' options once they are
   cached<br />
   #225: <a href="http://bugs.winehq.org/show_bug.cgi?id=225">
   http://bugs.winehq.org/show_bug.cgi?id=225</a><br />
   If you're familiar with autoconf and know how configure scripts
   should behave...</li>

 <li> StrokePath ignores PS_JOIN_xxx<br />
   #11: <a href="http://bugs.winehq.org/show_bug.cgi?id=11">
   http://bugs.winehq.org/show_bug.cgi?id=11</a><br />
   This should not be too difficult to fix but it would certainly help
   if you are familiar with GDI.</li>

 <li> Checking the differences between what's in the Windows dlls and
   what's in our spec files... and fix the contents of our spec files
   as appropriate. I already have a list of all the APIs in each of
   the dlls for Win95, Win98, NT4 and Wine2000, plus a script that
   can show the differences.</li>

 <li> Enhancing the above perl script. In particular it could be made
   smarter wrt. detecting whether an API is exported by ordinal or not.</li>
</ul>

</quote>




</section>




 




<section
  title="PowerDVD on an Unsupported Video Chipset"
  subject="Powerdvd running under linux"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/08/0309.html"
  posts="3"
  startdate="08/29/2001"
  enddate="08/29/2001"
>

<p>Robert Lowery wondered:</p>
<quote who="Robert Lowery"><p>
 Under Windows 98 (using PowerDVD), I get fantastic performance on my Pention
 233MMX as it supports YUV->RGB, Motion Compensation and iDCT in hardware.
 This chipset is not currently supported under Linux.
</p><p>
 What do you think the chances are of PowerDVD working with hardware
 acceleration under WINE/WINEX?
</p><p>
 What sort of performance should I expect?</p></quote>

<p>A couple people replied that as long as the chipset is unsupported by Linux
that there's no chance of getting it to work.  But Francois Gouget went on to
explain, <quote who="Francois Gouget">

   Once XFree86 provides XVideo support for your chipset (or even
   better, the newer brand of XVideo, the one that also include motion
   compensation, I don't remember the name), then you may get hardware
   acceleration in Wine. But I think that currently DDraw does not support
   hardware acceleration for these things. So it will probably require some
   work on Wine too.</quote></p>


</section>




 





<section
	title="Keyboard Problem"
	subject="keyboard problem"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/08/0273.html"
  posts="5"
  startdate="08/26/2001"
  enddate="08/27/2001"
>

<p>Stefan Leichter was trying to get a game to work and ran into
	some problems with the handling of keyboard input:</p>

<quote who="Stefan Leichter"><p>
after a long time of debugging (because of my little experience with
windows programming and debugging), i found the problem that breaks the
keyboard input of my favorite game "You Don't Know Jack" (demos of newer
versions downloadable at http://www.take2.de/downloads/demos.php).
</p><p>
The problem is that the game is waiting for keyboard input by checking
for the messages WM_KEYDOWN, WM_CHAR and WM_KEYUP at least for the keys
1-0 and a-z. But wine generates the messages WM_SYSKEYDOWN, WM_SYSCHAR?
and WM_SYSKEYUP.
</p><p>
The problem is in the file "<code>windows/message.c</code>" in the methode
"<code>process_raw_keyboard_message</code>" in the line 383:
</p><p><ul><code>
if (msg->message &lt; WM_SYSKEYDOWN) msg-&gt;message += WM_SYSKEYDOWN - WM_KEYDOWN;
	</code></ul>
</p><p>
For some reason i do not understand the message becomes changed. If i
remove this line the game recognize the keyboard input and is playable
(somehow).
</p><p>
An other option(untested) for the game is to change the line to
something like this:
</p><p><ul><code>
if (msg->message &lt; WM_KEYDOWN) msg-&gt;message += WM_SYSKEYDOWN - WM_KEYDOWN;
</code></ul>
</p><p>
Does anyone know why the message becomes changed? Or does anyone know a
better fix for the problem? Is there a program the need the line as it
is?
</p></quote>
<p>
	Stefan also explained that he was running this in fullscreen mode
	using the <code>--desktop</code> option. Ove K&aring;ven replied:</p>
 
<quote who="Ove Kaaven"><p>
If I remember right, a keyboard message must be changed to a syskey
message when one of these conditions are true:
</p>
<p><ul>
	<li> the ALT key is pressed</li>
	<li> a menu is being navigated (the system menu in particular)</li>
	<li> the active/focused window is minimized (an icon)</li>
</ul></p>
<p>May be others, but I don't think so. Which do you think applies?</p></quote>

<p>Daniel Sabo thought this particular bit was ok, but that the problem
	might actually lie with the GetFocus since that's relied on for
	sending messages to the active window.  He posted a description
	of what the function relied on, <quote who="Daniel Sabo">


The WM_SYSKEYDOWN message is posted to the window with the keyboard focus
when the user presses the F10 key or holds down the alt key and then
presses another key. It also occurs when now windows has the keyboard
focus; in this case, the WM_SYSKEYDOWN message is send to the active
window</quote></p>

<p>Gerard Patel didn't think the problem was actually with <code>GetFocus()
	</code>, but rather that the active window handling was not
	behaving like Windows.  He also added, <quote who="Gerard Patel">

	Another possibility (less probable in this case) could be that the Ms
	doc  about WM_SYS* messages is inaccurate or incomplete. </quote></p>


</section>







<section
    title="More Window Handling Additions"
    subject="Crash in latest version"
    archive="http://www.winehq.org/hypermail/wine-devel/2001/08/0293.html"
    posts="6"
    startdate="08/28/2001"
    enddate="08/28/2001"
>


<p>Uwe Bonnes had a problem getting an application to run and noticed
	it was crashing somewhere it hadn't been.  He posted some
	debugging information and noted some strange changes.  
	Gerard Patel explained:</p>
<quote who="Gerard Patel"><p>

		Windows handles are now generated on the server.
		</p><p>
		This is a historical moment, btw :-)
		Now Wine has all the architectural features of Win 95
		</p><p>
		Not everything is implemented, FindWindow does
		not yet work across processes for example.
		But it's an important step nonetheless.
		</p><p>
		Alexandre Julliard has implemented the 'generation' feature
		of handles. The higher part of a 32 bit handle is used for
		a counter that is incremented from a window creation to
		another, avoiding the age-old problem of windows being
		deleted, then braindead application trying to use their
		handles, using newly created windows instead.</p></quote>

<p>He also posted more backtraces for crashes he was having.  Alexandre
	replied that patches had been posted that should fix them.</p>



	

	
</section>
  
   


<section
  title="Handling Commandline Arguments"
  subject="handling in the commandline"
  archive="http://www.winehq.org/hypermail/wine-devel/2001/09/0004.html"
  posts="1"
  startdate="09/02/2001"
  enddate="09/02/2001"
>

<p>Francois Gouget landed some changes that affected commandline
handling.  He'd been working on this for a while.  Here's what he
did:</p>
<quote who="Francois Gouget">
<p>
   Some time ago I realized that the command line handling in Wine did
not work properly when arguments with spaces or double-quotes are
involved. For instance I would start a Wine application like this:
</p><ul><p><code>
   main "a b" c
</code></p></ul><p>
   and it would tell me something like this:
</p><ul><p><code>
GetCommandLine=[./main a b c]
</code></p></ul><p>

   Or I would call CreateProcess(... "main \"a b\" c" ...) and main
would get:
</p><ul><p><code>
main -&gt; argc=4<br />
0 [./main]<br />
1 [a]<br />
2 [b]<br />
3 [c]<br />
</code></p></ul><p>

   So I investigated this and found that 
</p><p><ul>
 <li> double-quotes, '"', have the same meaning in win32 as in unix
   (tested on Win95 &amp; Win2000)</li>
 <li> backslash, '\', work as on unix, especially wrt double-quotes</li>
 <li> single-quotes, ''', have no special meaning</li>
</ul></p><p>
   So CreateProcess(... "main \"a b\" c" ...) should give me:
</p><ul><p><code>
GetCommandLine=[./main "a b" c]
main -> argc=3
0 [./main]
1 [a b]
2 [c]
</code></p></ul><p>
   I searched for places where we convert command lines to argv lists
and reciprocally and modified them to work as on windows. With this
patch things should be correct, whether you call a Wine application from
Unix, from another Wine application via CreateProcess, or if you call a
Unix application from Wine. There's just one little bit in the msvcrt
code which I treated in a separate patch (p20010902-cmdline2.diff).
</p><p>
   In the process I wrote a few test applications:
</p><p><ul>
 <li> hello - regular hello world unix app</li>
 <li> main - A Wine console application which dumps its argc/argv and then calls 
   GetCommandLine, ...
   You can also call it with a '-i' parameter to test
   CommandLineToArgvW, except that _getws is not implemented in Wine so
   you can only do that on windows</li>
 <li> winmain - 
   A Wine Gui application which dumps lpCmdLine and then calls 
   __getmainargs, CommandLineToArgvW(GetCommandLineW), ...</li>
 <li> createp - 
   Which reads a command line from stdin and calls CreateProcess with it</li>
 <li> spawnv - 
   Reads a list of arguments from stdin and calls spawnv with it
   (spawn* don't handle ' ' and '"', see p20010902-cmdline3.diff)</li>
 <li> spawn -
   Same but the command is fixed</li>
</ul></p>
<p>
   I know that there has been discussions about the command line
handling before and that some applications do very weird things. Please
test this patch and let me know how it goes.</p>
</quote>
</section>

    
</kc>
