<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="244" date="10/15/2004" />
<intro> <p>This is the 244th issue of the Wine Weekly News publication.
Its main goal is to pretend summer isn't over. It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="157" size="560" contrib="60" multiples="34" lastweek="28">

<person posts="11" size="28" who="Dimitrie O. Paun" />
<person posts="7" size="95" who="Jeremy White" />
<person posts="7" size="56" who="William Poetra Yoga Hadisoesen" />
<person posts="7" size="19" who="Vincent B&#233;ron" />
<person posts="7" size="19" who="Alexandre Julliard" />
<person posts="6" size="15" who="Mike Hearn" />
<person posts="6" size="14" who="Robert Shearman" />
<person posts="5" size="17" who="Eric Pouech" />
<person posts="4" size="13" who="Peter Riocreux" />
<person posts="4" size="13" who="Saulius Krasuckas" />
<person posts="4" size="12" who="Ferenc Wagner" />
<person posts="4" size="12" who="Robert Reif" />
<person posts="4" size="11" who="Andreas Mohr" />
<person posts="4" size="10" who="Francois Gouget" />
<person posts="4" size="8" who="Steven Edwards" />
<person posts="4" size="8" who="Ivan Leo Puoti" />
<person posts="3" size="17" who="(Warren_Baird/CSI)" />
<person posts="3" size="8" who="Robert Lunnon" />
<person posts="3" size="8" who="Dmitry Timoshkov" />
<person posts="3" size="8" who="Vitaliy Margolen" />
<person posts="3" size="8" who="Bill Medland" />
<person posts="3" size="7" who="Scott Ritchie" />
<person posts="3" size="7" who="Kenneth Porter" />
<person posts="2" size="8" who="Paul Millar" />
<person posts="2" size="6" who="Jason Edmeades" />
<person posts="2" size="5" who="Rolf Kalbermatter" />
<person posts="2" size="5" who="Vitaliy Margolen" />
<person posts="2" size="5" who="Thorsten Kani" />
<person posts="2" size="5" who="Dan Kegel" />
<person posts="2" size="5" who="Kuba Ober" />
<person posts="2" size="5" who="Shachar Shemesh" />
<person posts="2" size="4" who="Filip Navara" />
<person posts="2" size="4" who="Dietrich Teickner" />
<person posts="2" size="4" who="Dan McGhee" />
<person posts="1" size="4" who="Kevin Koltzau" />
<person posts="1" size="4" who="Chris Morgan" />
<person posts="1" size="3" who="Michael Stefaniuc" />
<person posts="1" size="3" who="ScratchMonkey" />
<person posts="1" size="3" who="Martin Fuchs" />
<person posts="1" size="3" who="Olivier Kaloudoff" />
<person posts="1" size="3" who="=?iso-8859-1?Q?Michael_Dr=FCing?=" />
<person posts="1" size="3" who="Rein Klazes" />
<person posts="1" size="2" who="Aneurin Price" />
<person posts="1" size="2" who="Martin Fuchs" />
<person posts="1" size="2" who="Anssi Hannula" />
<person posts="1" size="2" who="Joerg Mayer" />
<person posts="1" size="2" who="Huw D M Davies" />
<person posts="1" size="2" who="(stegefin)" />
<person posts="1" size="2" who="Jeremy Newman" />
<person posts="1" size="2" who="Brian Vincent" />
<person posts="1" size="2" who="Jakob Eriksson" />
<person posts="1" size="2" who="Marcus Meissner" />
<person posts="1" size="2" who="Brian Gunlogson" />
<person posts="1" size="2" who="Jon Griffiths" />
<person posts="1" size="2" who="Jakob Eriksson" />
<person posts="1" size="1" who="Pierre d'Herbemont" />
<person posts="1" size="1" who="Tom Hibbert" />
<person posts="1" size="1" who="Lars Segerlund" />
<person posts="1" size="1" who="Joris Huizer" />

</stats>
<section 
	title="News: To Do List Update" 
	subject="News"
	archive="http://www.winehq.org/" 
	posts="1"
	startdate="10/09/2004"
	enddate="10/15/2004"
>
<topic>News</topic>
<p>
When we last looked at the Wine 
<a href="http://www.winehq.org/todo_lists">To Do List</a> it was back in May.  
Things have progressed nicely since then.  At the time we had green
beating red, 24 to 15 with yellow coming in at 30.  Since then quite
a few items have been completed and even more are in progress.  
Here's where we currently stand on the 71 items:
<ul>
    <li> Green (completed): 36</li>
    <li> Yellow (in progress): 27</li>
    <li> Red (not started): 8</li></ul></p>

<p>That puts the completed list above the rest for the first 
time.  </p>

</section>
<section 
	title="Wineconf 2005: Help!" 
	subject="Wineconf 2005"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/10/0168.html" 
	posts="4"
	startdate="10/08/2004"
>
<topic>Project Management</topic>
<p>Discussion at last year's Wineconf showed interest in
making it a yearly event.  The problem is finding someone
to help organize it and the fact we even pulled it off
last January is directly due to CodeWeavers offering to host
it in balmy, breezy Minnesota.  With so many developers
living in Europe it's time we try to move the event to
the other side of the pond.  Jeremy White started the
ball rolling:</p>
<quote who="Jeremy White"><p>
It's that time again, time to plan for another Wineconf.
</p><p>
There has been some back room chatter about Wineconf this
year, but no definitive plans.
</p><p>
A small cabal of people (myself included) think that we should
hold it in Southern Germany around February/March.
</p><p>
Marcus and Michael have each expressed that they might be able
to get a facility to hold it in, but those efforts have so far
not yielded anything definitive (I think we're tied up in big
company red tape).
</p><p>
Also, Huw Davies has offered to help host Wineconf in Oxford;
that essentially translates into an offer by CodeWeavers to
host Wineconf in mid March in Oxford.
</p><p>
However, I want to throw this open to discussion and see if
others have great ideas or if someone outside our secret cabal
wants to step up and make this happen in Southern Germany.
</p><p>
Based on our experience last year, I feel pretty strongly
that we need the following:
<ol>
   <li>  An inexpensive, yet easy to reach location.

       Connection to nice places to visit before/after
       is a plus, but should be a substantially secondary
       consideration IMO.</li>

   <li>  Two rooms that can each hold about 30-40 people,
       ideally with white boards, power, and high
       speed internet.</li>

   <li>  Access to food and hotels, preferably all within
       walking distance of each other.  Since Europe is
       civilized, we should be able to walk from
       our Hotel to the conference, to a variety of
       food sources, and then, of course, to the pub.</li>
</ol></p><p>
Candidly, I don't know that this is all that complicated.
We'll likely be bringing enough people in that we should
be able to negotiate a pretty nice deal with a hotel.
(We promise them xxx heads in beds, they give us conference
facilities for a weekend).
</p><p>
If someone wanted to help host Wineconf, and was willing
to facilitate a conversation between myself and a hotel
that was well situated, CodeWeavers would be happy to sponsor
the conference (i.e. financially reassure the Hotel).
</p><p>
Thoughts?  Comments?
</p></quote>

<p>Some ideas were tossed around, but nothing concrete. 
Anyone out there able to help?  Feel free to reply on
wine-devel to Jeremy's original post, or you can mail
him directly.  (Click on the link above for his address.)
</p>

</section>
<section 
	title="Direct3D 9 Work" 
	subject="dx9-1"
	archive="http://www.winehq.com/hypermail/wine-patches/2004/09/0353.html"
	posts="15"
	startdate="09/20/2004"
	enddate="10/12/2004"
>
<topic>DirectX</topic>
<p>We discussed Jason Edmeades plans to work on 
Direct3D 9 a few weeks ago (see WWN issue 
<a href="http://www.winehq.com/wwn/240#DirectX%209%20Roadmap">#240</a>).
The consensus seemed to be to create a shared library between
Direct3D 8 and Direct3D 9 code given how similar they are.
The other alternative is to copy all the D3D8 code and then
add in the D39D changes.  However, this scheme creates 
maintenance headaches in the long run since bugfixes need
to be applied to both.  Jason began creating the new library
a few weeks ago but not a lot discussion has come up on wine-devel.
Jason has provided some nice comments with each patch, so 
I thought it might be worth putting them all together to
show the direction this is headed.</p>

<p>Patch #1:</p>
<quote who="Jason Edmeades"><p>
First dx9 related patch - It's mostly a 'feeler' patch to ensure the
direction I am going is not rejected, and as discussed I plan to move the
code into the wined3d library from d3d8, and use it for d3d9.
</p><p>
Note this is going to be a long process as my time is very limited. However,
I will try very hard not to break d3d8 as I do the move. If I regress
anything, let me know by email directly asap.
</p><p>

Changelog
<ul>
Make a wined3d interface, and generate a wined3d object in the d3d9 create
method. Make the first (simple) call implementation into the new wined3d
interface  (d3d8 change will follow later), and ensure the wined3d8 object
has access to the locks required for later on.</ul>
</p></quote>

<p>Patch #2:</p>
<quote who="Jason Edmeades"><p>
Make d3d8 know about the wined3d device and use it for the first function. 
Also move another stub into the common library
</p><p>
(d3d9 completion status : 0.000001%)
</p></quote>

<p>Patch #3:</p>
<quote who="Jason Edmeades"><p>
 Move some of the screen mode related functions into wined3d and add untested
 support for the new d3d9 options of providing the format to some of the
 calls.
</p></quote>

<p>Patch #4:</p>
<quote who="Jason Edmeades"><p>
 Copy across the first of the functions used to make traces more readable,
 creating utils.c to store them in. Eventually the ones in d3d8 will be
 removed but for now just duplicate the code
</p><p>
 BTW Before anyone asks, don't hold your breath for any working d3d9 support -
 This may take months!
</p></quote>

<p>Patch #5:</p>
<quote who="Jason Edmeades"><p>
 This change is larger because I have duplicated the code from dx8 and
 d3dcore_gl.h into wine-d3d and wined3d_gl.h so both old and new code can
 call and use it for the short term, one of the subsequent patches should
 clean up the old versions once no one needs them.
</p><p>
Changelog
<ul>Move into wined3d and call from d3d9 the GetAdapterId function and copy
all the gl declarations into the more global wined3d_gl header file</ul>
</p></quote>

<p>Patch #6:</p>
<quote who="Jason Edmeades"><p>
 Move the Check* type functions into wined3d and copy from d3d9, and flag
 they are mostly stubs
</p></quote>

<p>Patch #7:</p>
<quote who="Jason Edmeades"><p>
 Move the GetDeviceCaps into the wined3d library and call from d3d9.
</p><p>
 (Note the d3d9 specifics are stubbed out, and in fact some of the 'common'
 caps are different between 8 and 9, but I can deal with that later).
</p></quote>

<p>Patch #8:</p>
<quote who="Jason Edmeades"><p>
Well I've almost completed the simple interface, and the logical progression
is onto the hardest!!
</p><p>
I have also only called the new code from d3d9 for now as it's a complete
skeleton to be built on.
</p><p>
Changelog
<ul>Add an IWineD3DDevice object type (empty for now), and create one when an
IDirect3DDevice object is created.</ul>
</p></quote>


<p>Patch #9:</p>
<quote who="Jason Edmeades"><p>
 Copy and tidy up the code from dx8 create device into wined3d. Call from
 wined3d and d3d8, but short term only use the code for real from d3d9
</p></quote>

<p>Patch #10:</p>
<quote who="Jason Edmeades"><p>
Fully support (as far as was previously - they haven't changed in dx9)
VertexBuffer and Resource classes and use them when called from d3d9 (not d3d8
yet - later!). This also reduces the header includes in all the d3d9
interface, as they will be included from the private header when needed and
it will be easier to remove them when they are no longer needed
post-changes.
</p><p>
FYI I am working on the 'minimum' changes to get a tutorial program which
writes a triangle to the screen to work.... Not there yet!
</p><p>
Changelog
<ul>
<li> Add support (as far as was previously) for the VertexBuffer and Resource
classes in wined3d and use when called from d3d9</li>
<li> Reduce the header includes in all the d3d9 interface to one common set in
the private header</li></ul>
</p></quote>


</section>
<section 
	title="COM Inheritance" 
	subject="COM inheritence"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/10/0236.html" 
	posts="4"
	startdate="10/11/2004"
	enddate="10/12/2004"
>
<topic>RPC / COM / OLE</topic>
<p>With the D3D9 changes, Jason ran into
some issues sharing code and explained:</p>
<quote who="Jason Edmeades"><p>
 If you haven't noticed, I'm trying to port the d3d8 code into wined3d and
 make it common for use from d3d9, and this is all COM objects. I have come
 across something which in theory would enable me to tidy my code simply, but
 I can't see how to make it work in C.
</p><p>
 Now I have a class, for example FRED who implements some common functions,
 and all the code for it would be in fred.c. I also have a subclass, defined
 called JIM, which needs to have entrypoints as per fred, plus some more, and
 its code resides in jim.c. Still with me...?
</p><p>
 Now previously, inside jim, I have duplicated all the common functions, but
 I want to avoid this and just call the one definition. My plan was to change
 the Vtbl to look like:
<ul><code>
IJimVtbl Jim_Vtbl =
{<ul><code>
    IJimImpl_QueryInterface,<br />
    IJimImpl_AddRef,<br />
    IJimImpl_Release,<br />
    IFredImpl_CommonFunc1,<br />
    IFredImpl_CommonFunc2,<br />
      :<br />
    IJimImpl_UniqueFunc1 etc</code></ul>
}</code></ul></p><p>
 I was also ensuring the variable definitions in the IJimImpl structure map
 precisely over the IFredImpl structure, before any unique variables are
 defined (I think this is a necessity for emulating subclassing in C?).
</p><p>
 Now, obviously if the common funcs need changing I can copy in the code, and
 change the vtbl to have a local override but at the moment I don't need to
 (they are mostly stubs even in the d3d8 code today).
</p><p>
 However, doing this fails to compile - It won't allow me to have a vtbl in
 jim.c which includes pointers to functions which are in fred.c, even if I
 have extern prototypes defined. Basically this is because array
 initialization requires constant values.
</p><p>
 However, this would seem something which is so common - i.e. inheritence is
 used all over the place. How do people handle this? I've looked through a
 few places in the code and can't see how this can be done. I could 'pretend'
 by initializing the Vtbl as I create the com object and do some LoadLibrary
 type dynamic addressing but I really want link time resolution not load time
 resolution.
</p><p>
One solution would be to put the common routines in a header file, and
#include it, but code in headers or #including modules is usually frowned
upon! I can't see any sensible way of doing this and I'd rather not do lots
of code duplication if avoidable as this common class is used in about 7
other classes!
</p></quote>

<p>Rob Shearman suggested,
<quote who="Robert Shearman">
Have a look at <tt>dlls/quartz/pin.h</tt>
I have emulated C++ style inheritance by creating a structure that is 
included at the start of every derived implementation and then 
constructing the vtable at compile time and linking to the base 
functions. If you wanted to do the same for d3d{8,9} and wined3d you 
would have to add each common function to the spec file.</quote></p>

<p>Jason wasn't sure that was the same solution as the problem
he was trying to solve:</p>
<quote who="Jason Edmeades"><p>
I like the solutions of putting the structures in - that's a neat
way of ensuring consistency...</p><p>

However, I think the vtbl issue is different - Don't you get away with
constructing the vtbl because all subclasses are in the same C part, or
have I missed something?
</p><p>
BTW I don't want to call cross shared library for inheritance, but I
do want to call cross 'C' part in the same library, so hopefully
shouldn't need to use the spec file.
</p><p>
Any thoughts? If not, I'll go for forwarding functions - painful,
but not the end of the world.</p></quote>

<p>Rob answered the first question and then confirmed Jason's original idea:</p>
<quote who="Robert Shearman"><p>
 They are all part of the same interface, yes.
</p><p>
 Forwarding functions seem to be the only maintanable way of doing this.
</p></quote>
</section>
<section
        title="WinMM Timer Events"
        subject="RFC re winmm/time.c"
        archive="http://www.winehq.com/hypermail/wine-devel/2004/10/0201.html"
        posts="6"
        startdate="10/09/2004"
        enddate="10/11/2004"
>
<topic>Multimedia</topic>
<p>Hell may not be freezing over, but the temperature dropped
a little this past week: some patches from Jeremy White,
CodeWeavers' CEO, made it into Wine.  This isn't the first
time it's happened, though as Jeremy likes to point out, his patches
usually find their way to Alexandre's patch dumpster based on
comment style alone.  One in question generated some discussion
on wine-devel when Jeremy asked:</p>

<quote who="Jeremy White"><p>
I ran into a problem with PowerPoint and winmm timer events,
that has led me to radically alter this file. (<i>ed. note:
winmm/time.c</i>)</p><p>

However, I'd appreciate a gut check from anyone more
experienced with it than I.
</p><p>
The fundamental problem is that PowerPoint does a
timeBeginPeriod(1), trying to set timer resolution
to 1 ms; we steadfastly discard that, and continue
generating time updates and events on a roughly
10 ms interval, this can, in rare situations,
lead to some awkward delays.
</p><p>
Some investigation with a test program shows that most Windows systems 
start with a default resolution of 1 ms.
This test program is attached; the 'average' reported
at the top is the default resolution.  Further, Windows seems to
steadfastly ignore any timeBeginPeriod(x)
where x > the current period.  I surveyed about 6 systems;
a mix on Win98/Win2k and Win XP.  All but one rogue
Win 2K system had a 1 ms timer interval (the rogue system
had a 10 ms interval; why, I do not know).  The MSDN
pages suggest (but don't state clearly) that this
is the expected behavior.
</p><p>
This behavior essentially means that on most Windows systems
the timer resolution of winmm is 1ms and cannot be changed.
</p><p>
So, question #1:  anyone object if I fix the timer resolution at 1 ms?
</p><p>
Next, if I make this change, it makes the code in time.c,
which is fairly awkward imho, even less efficient.
We'll basically be scanning a loop every ms for no
particularly good reason.
</p><p>
I couldn't stomach this, so I rewrote it.
Question #2: anyone object to my change?  I have tested
it with my attached test program, and I appear to have
gotten it right, but...
</p><p>
Thoughts?  Comments?  Flames?  Suggestions I go back to my day job?
</p></quote>

<p>Eric Pouech gave a little background on what Jeremy 
found and gave a review:</p>
<quote who="Eric Pouech"><p>
mm timers have been created to give better resolution than the old 
ticker from DOS (55ms, 18.2 ticks per second). But this requires 
specific hardware to do so, hence the various results you get. I would 
assume that on recent boxes you get 1ms as lowest resolution.
</p><p>
the current code had been written (hmmm) with the assumption that 
GetTickCount() could have a resolution of 55ms, hence you couldn't rely 
on it and had to do the job yourself for a better resolution.
</p><p>
Wine provides 1ms resolution in GetTickCount, ReactOs does also (through 
  a quick browsing of the code) (and the number of cases where winmm 
will be run on Windows), so the basic proposition sounds fine.
</p><p>
 From an implementation point of view, there's something wrong with it. 
The time returned from TIME_MMSysTimeCallback (time to wait for next 
timer to elapse) only takes into account the timers which existed when 
the function is entered, not the ones which could have been created or 
deleted while processing the callbacks.
</p><p>
Another point, with your proposal, we could use the fact that the global 
time no longer needs to be maintained, hence the worker thread can be 
destroyed when no more timers exist.
</p></quote>

<p>Vitaliy Margolen mentioned there might be a problem with this
approach based on his own personal experience:</p>
<quote who="Vitaliy Margolen"><p>
I'm using mmTimer on Win95 in one of my programs to create more precise Sleep
function. I'm using one shot timers for this. So having an extra overhead will
hurt the performance. I'm already have interthread suspending/resuming with
thread handle duplication.
</p><p>
As I recall all my systems I was using at a time had a default resolution of
10ms. 
</p><p>
MSDN says that each timeBeginPeriod should be matched with timeEndPeriod. When
I stopped the program in the middle of debugging it, I had a resolution of 1ms
thereafter. It seems that native using the same resolution for the whole system.
</p></quote>

<p>Thus far Alexandre hasn't committed the patch.</p>

</section>

<section
        title="Wine Libraries on Windows"
        subject="Stupid thing to try ..."
        archive="http://www.winehq.com/hypermail/wine-devel/2004/10/0307.html"
        posts="4"
        startdate="10/14/2004"
>
<topic>Testing</topic>
<p>There's no reason why some of Wine's higher-level
libraries won't work on Windows.  At least, in theory
that's possible.  Lars Segerlund inquired about that
this week:</p>
<quote who="Lars Segerlund"><p>
 I was thinking of a silly thing to try, namely 
 replacing windows dlls with wine's, does anybody 
 have any thoughts about it ?
</p><p>
 I just thought about it as a debugging trick I 
 wanted to try, but I don't know enough to evaluate 
 if it's even worth trying.
</p><p>
 So what about it, is it worth giving a shot ?
</p></quote>

<p>Steven Edwards cautioned against doing that
directly since apparently it's a great way to 
cripple a working system:</p>
<quote who="Steven Edwards"><p>
It won't work well. I have done it before. The best thing to do is the
change your dlls search order and use a copy of the Wine dlls built for
Mingw and test them under Windows that way. Certain key processes such
as winlogon are tied to ole32 and friends.</p></quote>

<p>Thorsten Kani offered more advice:</p>
<quote who="Thorsten Kani"><p>
I am currently using the <a href="http://www.reactos.com">ReactOS</a>
tree to debug comctl32.dll under Windows.
For this to work, you will also need the Mingw package and a recent 
gcc/binutil package. (also available from there).
</p><p>
Also make sure to disable Windows File Protection.
I  am using a patched SFC.DLL + a tool called 'Wfpadmin' for the job.
</p></quote>

<p>Steven then followed up with a way to test specific
applications using an undocumented trick on Windows,
<quote who="Steven Edwards">
Under Windows you can just compile the dll using mingw and then drop
the dll in to the program direct that you want to test. Let's say you
have an app named foo.exe you can copy the wine comctl32.dll to that
directory that contains foo.exe and the make a copy of foo.exe and name
the copy foo.exe.local When you create a *.exe.local file it exposes a
hidden hack in Windows that forces it to search the local directory
first for dlls no matter what the registry setting is. Note that this only
works for comctl32, shell32, shlwapi, ole32 and a few others. Dlls from
Wine like user32, gdi32, ntdll, kernel32 and friends cannot be loaded
on Windows.</quote></p>

<p>The neat thing about this approach is it lets you
mix and match native DLLs on Windows to figure out
potential problems.  </p>

</section>
</kc>
