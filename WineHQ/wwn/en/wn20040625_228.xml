<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="228" date="06/25/2004" />
<intro> <p>This is the 228th issue of the Wine Weekly News publication.
Its main goal is to teleport. It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="158" size="1009" contrib="54" multiples="22" lastweek="25">

<person posts="23" size="62" who="Alexandre Julliard" />
<person posts="22" size="63" who="Mike Hearn" />
<person posts="13" size="239" who="Dimitrie O. Paun" />
<person posts="13" size="35" who="Ivan" />
<person posts="6" size="100" who="Krishna Murthy" />
<person posts="5" size="176" who="Twickline" />
<person posts="5" size="41" who="Steven Edwards" />
<person posts="5" size="16" who="Dan Kegel" />
<person posts="5" size="11" who="Eric Pouech" />
<person posts="4" size="9" who="Shachar Shemesh" />
<person posts="3" size="11" who="Ferenc Wagner" />
<person posts="2" size="70" who="Johane" />
<person posts="2" size="36" who="Vincent B&#233;ron" />
<person posts="2" size="9" who="Geoff Thorpe" />
<person posts="2" size="6" who="John Birrell" />
<person posts="2" size="5" who="Nicolai Kuntze" />
<person posts="2" size="5" who="Francois Gouget" />
<person posts="2" size="4" who="Jeremy White" />
<person posts="2" size="4" who="Lionel Ulmer" />
<person posts="2" size="4" who="Mike Kost" />
<person posts="2" size="4" who="Vitaly Lipatov" />
<person posts="2" size="4" who="Matt Beaumont" />
<person posts="1" size="5" who="Paul R Streitman" />
<person posts="1" size="4" who="Francois Gouget" />
<person posts="1" size="4" who="Marcus Meissner" />
<person posts="1" size="4" who="Gregory Hicks" />
<person posts="1" size="3" who="Roger Olson" />
<person posts="1" size="3" who="Jon Griffiths" />
<person posts="1" size="3" who="Alexander Yaworsky" />
<person posts="1" size="3" who="Gerald Pfeifer" />
<person posts="1" size="2" who="Dmitry Timoshkov" />
<person posts="1" size="2" who="Sean Kormilo" />
<person posts="1" size="2" who="Damjan Jovanovic" />
<person posts="1" size="2" who="Duane Clark" />
<person posts="1" size="2" who="Gerald Pfeifer" />
<person posts="1" size="2" who="Jeremy Newman" />
<person posts="1" size="2" who="Brian Vincent" />
<person posts="1" size="2" who="Andrei Barbu" />
<person posts="1" size="2" who="David Lee Lambert" />
<person posts="1" size="2" who="Sean Kormilo" />
<person posts="1" size="2" who="Luca Capello" />
<person posts="1" size="2" who="Tim Hentenaar" />
<person posts="1" size="2" who="Andreas Mohr" />
<person posts="1" size="2" who="Leonardo Quijano Vincenzi" />
<person posts="1" size="2" who="David Lee" />
<person posts="1" size="2" who="hatky" />
<person posts="1" size="1" who="James Courtier-Dutton" />
<person posts="1" size="1" who="Rein Klazes" />
<person posts="1" size="1" who="Tom" />
<person posts="1" size="1" who="Jason Edmeades" />
<person posts="1" size="1" who="Constantin Bergemann" />
<person posts="1" size="1" who="Phil Krylov" />
<person posts="1" size="1" who="Saulius Krasuckas" />

</stats>
<section 
	title="News: Errata - MS Project, TG News" 
	subject="News"
	archive=""
	posts="2"
	startdate="06/19/2004"
	enddate="06/25/2004"
>
<topic>News</topic>
<p>Mike Hearn pointed out I made a mistake last week when I said
Microsoft Project isn't supported by CrossOver Office.  In fact,
thanks to the work of Dmitry Timoshkov you can now use MS Project
<a href="http://www.codeweavers.com/compatibility/browse/name?app__curPos=50;app_id=228">2000</a> 
and <a href="http://www.codeweavers.com/compatibility/browse/name?app__curPos=50;app_id=164">2002</a> 
with CrossOver Office.  They're currently supported at the 'bronze' level.  
MS <a href="http://www.codeweavers.com/compatibility/browse/name?app__curPos=50;app_id=20">Project 2003</a> is not yet supported.
</p><p>
TransGaming announced some stuff this week.  Their 
<a href="http://www.transgaming.com">new website</a> was launched on the
same day they released WineX 4.0, titled 
<a href="http://linuxpr.com/releases/6991.html">"Cedega"</a>.  The
<a href="http://downloads.transgaming.com/files/cedega-4.0_releasenotes.txt">
release notes</a> are much more interesting than the press release.  There
really is some cool, new gaming technology in it.  In related TransGaming
news, over at
DesktopOS.com there's an 
<a href="http://desktopos.com.at.spry.com/sections.php?op=viewarticle&amp;artid=23">interview with TransGaming's</a> 
Vikas Gupta, Gavriel State, and Peter Hunnisett:</p>
<quote who="DesktopOS.com"><p>
<i>DesktopOS.com</i>: When TransGaming was founded, the company promised to 
release the entire code tree for WineX/Cedega under an open source license 
when the subscriber base reached 20,000. What happened to this goal?</p><p>
<i>Vikas Gupta</i>: This has got to be one of the most commonly asked questions 
when we are interviewed. The philosophy related to releasing our source code 
was conceived almost four years ago and was representative of the state of the 
Linux community at that time. A lot has changed since then, including dramatic 
changes to the Wine license itself. TransGaming has to evolve as the Linux 
community itself evolves and we are adapting to changing times. Today, Cedega 
contains some extremely sophisticated source code that we simply cannot share 
publicly due to our agreements and relationships with some of the very 
companies whose games and technologies we support; this includes source code 
that handles copy-protection, DRM, and other IP that allows us to continue to 
offer a valuable product to our customers. That being said, we still contribute 
a great deal back but it must also be noted that Cedega, today, is very 
different from Wine.
</p><p>
<i>Gavriel State</i>: One of our original concepts was that of the 'Street 
Performer Protocol': set a goal and release everything when that goal is 
reached. We had hoped to have a continual series of goals that we could set 
that we could use on an ongoing basis. Unfortunately, external factors such 
as the LGPL relicensing of the Wine code made it impossible for us to 
maintain that model.
</p><p>
Instead, we have moved to a model where we release and share certain portions 
of our work, but still keep our graphics crown jewels to ourselves. Over the 
years, we've released tens of thousands of lines of code to both the Wine and 
ReWind projects and we expect that we will continue to do so with some 
portions of our work.
</p><p>
Some of our Open Source contributions include: the complete rearchitecture of 
the DirectDraw 2D graphics system and the DirectSound audio system, a number 
of DirectInput improvements, a 2D DIB rasterizer, the TG-Martlett font, vast 
amounts of work on the OLE, COM, and DCOM APIs used for Installers and other 
software, the Wine IDL compiler, WIDL, work on the WinInet APIs, including 
support for https over SSL, and the prototype ShmServer for accelerated Win32 
Kernel calls. 
</p></quote>

<p>A quick look at <a href="http://rewind.sf.net">ReWind</a> shows the
project to be even more stagnant than usual.  While it may be useful for
it's liberal BSD-style license, the technology is vastly out of date 
compared to WineHQ.  There's been a whopping 11 patches submitted to their 
<a href="http://sourceforge.net/mailarchive/forum.php?forum=rewind-patches">
mailing list</a> over the past 2 years.  They've had as many CVS commits in
all of 2004 as Alexandre committed to WineHQ this past week.  </p>

</section>
<section 
	title="Control Panel Replacement" 
	subject="Control.exe Replacement"
	archive="http://www.winehq.com/hypermail/wine-devel/2004/06/0493.html" 
	posts="3"
	startdate="06/22/2004"
	enddate="06/23/2004"
>
<topic>Utilities</topic>
<p>Wine has had a <a href="http://cvs.winehq.com/cvsweb/wine/programs/control/">control
panel utility</a> for a while - basically a
small Winelib application that launches control panel applets that
have been installed by other applications.  It's not pretty, but it 
does work.  Steven Edwards shared a new version this week:</p>
<quote who="Steven Edwards"><p>
This a replacement control panel that was developed for ReactOS until
the Control Panel namespace in Shell32 is done. It's far from perfect
but seems to be a little better than the older implementation. Feedback
is welcome.</p></quote>

<p>Mike Hearn asked for a screenshot and Steven replied
<a href="http://www.winehq.com/hypermail/wine-devel/2004/06/att-0499/01-control.png">with
one</a> a few hours later.</p>


</section>
<section 
	title="Using Donations" 
	subject="Donations - RFC"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/06/0369.html" 
	posts="3"
	startdate="06/18/2004"
	enddate="06/19/2004"
>
<topic>Project Management</topic>
<p>From time to time Wine is fortunate enough to 
<a href="http://www.winehq.org/contributing#wpf">receive
donations</a>.  We actually have a pretty good track record
of using the money for something good.  Jeremy White wondered 
if we should look into spending a bit of it right now:</p>

<quote who="Jeremy White"><p>
Say, I've gotten in a few fairly generous donations lately,
and so the Wine fund has a bit of money (around $800, afair).
</p><p>
Now, the bulk of that is marked for embezzlement &lt;g&gt;, but
it does leave a bit left over that could go to help Wine.
</p><p>
The question is:  how could that money be spent effectively?
</p><p>
I have several thoughts on this, but would like to open it
up for discussion.
</p><p>
My suggestions are:
<dl>
    <dt>Buy software for proven Wine hackers</dt>
    <dd><p>If Wine hackers are lacking for licensed software,
     I could buy + ship it to them. My financially
     prudent side suggests that games would be a great way to
     do that, because we can buy a lot of games for $800, and
     only 1 copy of MS Office for the same price... :-/
     </p><p>
     The trouble with this idea is that the few times
     I've tried to offer software to Lionel and others
     they tell me that they have all they need.
     </p></dd>
    <dt>Sponsor Wineconf 2005</dt>
    <dd><p>We spent about $1500 of the Wine fund
     sponsoring some folks to travel to Wineconf this
     year.  We could similarly use the funds for the next
     Wineconf.  That suggests saving it for this purpose
     would be prudent.</p></dd>
</dl></p><p>
Thoughts?  Suggestions?  Comments?
</p></quote>

<p>Mike Kost wrote back and suggested a hardware purchase
or two could be useful for developers that might need it.
A few other people were in favor of saving it to support a
Wine conference.</p>


<p>If you shop online you can also support Wine just by following these
links and purchasing things at 
<a href="http://www.amazon.com/exec/obidos/redirect-home/winehq">Amazon.com</a>
or <a href="http://www.cdnow.com/from=sr-1093221">CDnow</a>.
We'll get a few pennies of that donated back to us and you'll get 
a warm, fuzzy feeling knowing you've contributed something back.
</p>

</section>

<section 
	title="64-Bit Support?" 
	subject="Port to native x86_64?"
	archive="http://www.winehq.com/hypermail/wine-devel/2004/06/0475.html" 
	posts="4"
	startdate="06/21/2004"
	enddate="06/22/2004"
>
<topic>Ports</topic>
<p>
We reported a few weeks ago that there were problems running Wine on
an AMD64.  A few days after that Christof Meerwald 
<a href="http://www.winehq.org/hypermail/wine-devel/2004/06/0231.html">reported</a>
that it worked ok for him, however it was important to make sure the system
was using new software:</p>
<quote who="Christof Meerwald"><p>
 Hmm, wine 20040505 works on my AMD64 system (using a biarch 2.6.6 kernel,
 Debian woody for the 32-bit stuff and the Debian AMD64 port in a chroot
 environment for the 64-bit stuff).
</p><p>
 So I guess, either your kernel is outdated (there have been lots of
 improvements in the 32-bit emulation layer in recent kernels), or there is
 some problem with your 32-bit compiler setup or libraries.
</p></quote>

<p>That's all fine and well - it makes sense that the emulation layer might
cause problems.  This week however, Sean Kormilo inquired about the 
feasibility of a native 64-bit port:</p>
<quote who="Sean Kormilo"><p>
I'm interested in porting Wine to run in native x86_64 mode, and was
wondering if anyone had attempted to do such a thing already? I notice
that there does not appear to be any support in CVS to do this, but
figured that perhaps someone else is already undertaking such an effort.
</p><p>
My main motivation for doing so has to do with video driver support, in
that the 32bit "emulated" applications are unable to use the 64bit 3D
accelerated drivers, and fall back to software rendering - which is less
than ideal. While this may eventually be resolved by the device drivers,
I'd rather not wait for them.
</p><p>
Any comments, or hints as to what needs to be done (other than the
obvious compile time fixes) would be appreciated. I've got software
development experience, but none porting code from a 32bit architecture
to a 64bit one.
</p></quote>

<p>Alexandre pointed out some architecture concerns,
<quote who="Alexandre Julliard">
I hope you realize that a 64-bit Wine is not going to let you run
Win32 binaries, so it will only solve your problem if you have either
a Win64 version of your app, or a Winelib app. But as long as you are
aware of that, by all means go ahead, I don't think anybody else is
working on that at the moment.</quote></p>

<p>Sean then asked why an application couldn't see a 32-bit environment:
<quote who="Sean Kormilo">
 I would have thought it possible to have WINE itself compiled
as a 64 bit application (such that it can pick up and use 64 bit linux
libraries), but still represent itself as a 32 bit environment for the
windows binaries. </quote></p>


<p>Alexandre explained,
<quote who="Alexandre Julliard">
 Well, it would be possible, but it would require adding a translation
 layer for every single API call, which would be a huge task for very
 little benefit.  It's much easier to do it at the syscall level.</quote></p>

</section>
<section 
	title="Need DVD Info" 
	subject="Support for IDvdInfo2::GetDiscID"
	archive="http://www.winehq.com/hypermail/wine-devel/2004/06/0405.html"
	posts="2"
	startdate="06/19/2004"
>
<topic>Multimedia</topic>
<p>
 James Courtier-Dutton wanted to know if anyone had figured out how 
 Windows handled DVD's:</p>
<quote who="James Courtier-Dutton"><p>
The Windows api method uses the function call <tt>IDvdInfo2::GetDiscID</tt>
<ul><a href="http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/directx9_c/directx/htm/idvdinfo2getdiscid.asp">
http://msdn.microsoft.com/archive/default.asp?url=/archive/en-us/directx9_c/directx/htm/idvdinfo2getdiscid.asp</a></ul></p><p>

This returns a unique 64bit ID for a DVD.
Has anyone found out what exactly it does to create this 64bit ID.
It would be nice to get linux DVD players to be able to use the same method.
</p></quote>

<p>Tim Hentenaar was also interested and mentioned he might try figuring
it out.  However, if someone out there already knows the answer you might want
to write to 
<a href="http://www.winehq.com/hypermail/wine-devel/2004/06/index.html">wine-devel -at- winehq.org</a>.</p>

</section>
<section 
	title="Remove the MSVCRT() Macro" 
	subject="[RFC] [MSVCRT] Removing the MSVCRT() hack"
	archive="http://www.winehq.org/hypermail/wine-devel/2004/06/0377.html" 
	posts="1"
	startdate="06/18/2004"
>
<topic>Build Process</topic>
<p>A few weeks ago (<a href="http://www.winehq.org/wwn/225#MSVCRT%20Headers">issue
#225</a>) we discussed some problems with the MSVCRT library.
Dimi has been working on it and this week announced:</p> 
<quote who="Dimitrie Paun"><p>
Here is a patch that separates the implementation headers
from the public ones. It's not yet ready for inclusion,
but it's pretty close, so I'm sending it off to the list
for comments.
</p><p>
Some of the things in here:
<ul>
  <li> cleanup of naming conventions. Things shared with the
     public header *always* start with MSVCRT_</li>
  <li> stuff that's private, doesn't start with MSVCRT_
     From these two rules follows that a symbol starts
     with MSVCRT_ if and only if it's shared with the
     public headers, where it appears without MSVCRT_</li>
  <li> most private functions start with msvcrt_ now,
     a convetion that was already in place, but not
     followed to the letter</li>
  <li> there is a sh script that uses this simple rule
     to generate the test file. Do we integrate the
     script with the build system?</li></ul>
</p><p>
What's left to do:
<ul>  
  <li> if we keep the test generation script, it needs to
     get integrated in the build system</li>
  <li> there are still a bunch of functions that are shared
     with the public headers that don't have the MSVCRT_
     prefix. They need to be renamed</li>
  <li> more cleanup in the public headers, remove the
     MSVCRT_ from the sentries.</li></ul>
</p><p>
Comments, flames, etc. appreciated. It's been sitting on my
HD long enough, it's time to get it into the tree.
</p></quote>

<p>Alexandre requested some things to be done differently.
Dimi made the changes, but thus far the patch is uncommitted.</p>



</section>

</kc>
