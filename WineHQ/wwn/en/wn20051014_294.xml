<?xml version="1.0" ?>
<kc>

<title>Wine Traffic</title>

<author contact="http://www.theshell.com/~vinn">Brian Vincent</author>
<issue num="294" date="10/14/2005" />
<intro> <p>This is the 294th issue of the Wine Weekly News publication.
Its main goal is to enjoy stable talus. It also serves to inform you of what's going on around Wine. Wine is an open source implementation of the Windows API on top of X and Unix.  Think of it as a Windows compatibility layer.  Wine does not require Microsoft Windows, as it is a completely alternative implementation consisting of 100% Microsoft-free code, but it can optionally use native system DLLs if they are available.   You can find more info at <a href="http://www.winehq.org">www.winehq.org</a></p> </intro>
<stats posts="341" size="602" contrib="81" multiples="52" lastweek="42">

<person posts="19" size="22" who="daniel.r.kegel at gmail.com (Dan Kegel)" />
<person posts="17" size="21" who="lionel.ulmer at free.fr (Lionel Ulmer)" />
<person posts="17" size="17" who="infyquest at gmail.com (Vijay Kiran Kamuju)" />
<person posts="14" size="18" who="truiken at gmail.com (James Hawkins)" />
<person posts="14" size="15" who="wine-devel at kievinfo.com (Vitaliy Margolen)" />
<person posts="12" size="18" who="mike at codeweavers.com (Mike McCormack)" />
<person posts="11" size="35" who="oliver_stieber at yahoo.co.uk (Oliver Stieber)" />
<person posts="11" size="23" who="tony.lambregts at gmail.com (Tony Lambregts)" />
<person posts="10" size="17" who="stefandoesinger at gmx.at (Stefan D&#246;singer)" />
<person posts="10" size="17" who="molle.bestefich at gmail.com (Molle Bestefich)" />
<person posts="10" size="11" who="richard at daijobu.co.uk (Richard Cohen)" />
<person posts="9" size="40" who="Jonathan at ErnstFamily.ch (Jonathan Ernst)" />
<person posts="8" size="8" who="julliard at winehq.org (Alexandre Julliard)" />
<person posts="7" size="28" who="titan.costa at wanadoo.fr (Christian Costa)" />
<person posts="7" size="7" who="dimi at lattica.com (Dimi Paun)" />
<person posts="6" size="17" who="fenix at club-internet.fr (Raphael)" />
<person posts="6" size="14" who="kuba at mareimbrium.org (Kuba Ober)" />
<person posts="6" size="13" who="devel8421 at hotmail.com (John Smith)" />
<person posts="6" size="9" who="hijinio at yahoo.com (Hiji)" />
<person posts="6" size="7" who="eric.pouech at wanadoo.fr (Eric Pouech)" />
<person posts="6" size="7" who="wine at troy.rollo.name (Troy Rollo)" />
<person posts="5" size="29" who="daniel.skorka at stud.uni-karlsruhe.de (Daniel)" />
<person posts="5" size="9" who="fgouget at free.fr (Francois Gouget)" />
<person posts="5" size="8" who="most at museresearch.com (Michael Ost)" />
<person posts="5" size="8" who="wino at piments.com" />
<person posts="5" size="7" who="wine.dev at web.de (Detlef Riekenberg)" />
<person posts="5" size="6" who="stefandoesinger at gmx.at (Stefan D&#246;singer)" />
<person posts="5" size="4" who="mh at codeweavers.com (Mike Hearn)" />
<person posts="5" size="3" who="mike at plan99.net (Mike Hearn)" />
<person posts="4" size="16" who="a_villacis at palosanto.com (=?ISO-8859-1?Q?Alex_Villac=ED=ADs_Lasso?=)" />
<person posts="4" size="7" who="pebl at math.ku.dk (Peter Berg Larsen)" />
<person posts="4" size="5" who="ivg2 at cornell.edu (Ivan Gyurdiev)" />
<person posts="4" size="4" who="blin at gmx.net (Kai Blin)" />
<person posts="4" size="2" who="ivanleo at gmail.com (Ivan Leo Puoti)" />
<person posts="3" size="10" who="cr2005 at u-club.de (Christoph)" />
<person posts="3" size="3" who="marcus at jet.franken.de (Marcus Meissner)" />
<person posts="3" size="3" who="hallo at michael-kaufmann.ch (Michael Kaufmann)" />
<person posts="3" size="2" who="juan_lang at yahoo.com (Juan Lang)" />
<person posts="2" size="8" who="rwalls at gwi.net (Randall Walls)" />
<person posts="2" size="5" who="andi at rhlx01.fht-esslingen.de (Andreas Mohr)" />
<person posts="2" size="3" who="jwhite at codeweavers.com (Jeremy White)" />
<person posts="2" size="3" who="saulius2 at ar.fi.lt (Saulius Krasuckas)" />
<person posts="2" size="2" who="arrenlex at msn.com (Arren Lex)" />
<person posts="2" size="2" who="bobl at optushome.com.au (Robert Lunnon)" />
<person posts="2" size="2" who="dj015 at yahoo.com (Damjan Jovanovic)" />
<person posts="2" size="2" who="reif at earthlink.net (Robert Reif)" />
<person posts="2" size="2" who="rene at exactcode.de (=?iso-8859-1?q?Ren=E9_Rebe?=)" />
<person posts="2" size="2" who="wdev at foltman.com (Krzysztof Foltman)" />
<person posts="2" size="2" who="jnewman at codeweavers.com (Jeremy Newman)" />
<person posts="2" size="1" who="dmitry at baikal.ru (Dmitry Timoshkov)" />
<person posts="2" size="1" who="cedar at 3web.net (cdr)" />
<person posts="2" size="1" who="brian.vincent at gmail.com (Brian Vincent)" />
<person posts="1" size="7" who="paul at astro.gla.ac.uk (Paul Millar)" />
<person posts="1" size="7" who="craig at nch.com.au (Craig macLeod)" />
<person posts="1" size="2" who="pgr at arcelectronicsinc.com (paul)" />
<person posts="1" size="2" who="dtremenak at gmail.com (Daniel Remenak)" />
<person posts="1" size="1" who="aric.cyr at gmail.com (Aric Cyr)" />
<person posts="1" size="1" who="frick at sc-networks.de (Christoph Frick)" />
<person posts="1" size="1" who="vberon at mecano.gme.usherb.ca (Vincent B&#233;ron)" />
<person posts="1" size="1" who="webmaster at startcom.org (MediaHost (TM))" />
<person posts="1" size="1" who="matevz.jekovec at guest.arnes.si (Matevz Jekovec)" />
<person posts="1" size="1" who="dank at kegel.com (Dan Kegel)" />
<person posts="1" size="1" who="k04jg02 at kzoo.edu (Joseph Garvin)" />
<person posts="1" size="1" who="vishal.gakhare at gmail.com (Vishal Gakhare)" />
<person posts="1" size="1" who="wine at eternaldusk.com (Evil)" />
<person posts="1" size="1" who="twickline at gmail.com (Tom Wickline)" />
<person posts="1" size="1" who="thunderbird2k at gmx.net (Roderick Colenbrander)" />
<person posts="1" size="1" who="jack at itma.pwr.wroc.pl (Jacek Caban)" />
<person posts="1" size="1" who="listman at nerdherdclan.com (Listman)" />
<person posts="1" size="1" who="xerox_xerox2000 at yahoo.co.uk (Robbert Xerox)" />
<person posts="1" size="1" who="billmedland at mercuryspeed.com (Bill Medland)" />
<person posts="1" size="1" who="boaz at hishome.net (Boaz Harrosh)" />
<person posts="1" size="1" who="lamber45 at cse.msu.edu (David Lee Lambert)" />
<person posts="1" size="0" who="bon at elektron.ikp.physik.tu-darmstadt.de (Uwe Bonnes)" />
<person posts="1" size="0" who="thetemplar at free.fr (Eddahbi Karim)" />
<person posts="1" size="0" who="peter at piments.com" />
<person posts="1" size="0" who="the3dfxdude at gmail.com (Jesse Allen)" />
<person posts="1" size="0" who="andreas.schneider at linux-gamers.net (Andreas Schneider)" />
<person posts="1" size="0" who="sebastien.fievet at free.fr (Sebastien Fievet)" />
<person posts="1" size="0" who="us at edmeades.me.uk (Ann &amp; Jason Edmeades)" />

</stats>
<section 
	title="News: LWN Article"
	subject="News"
	archive="http://lwn.net/Articles/153546/"
	posts="1"
>
<topic>News</topic>

<p>LWN published an article last week titled,
<a href="http://lwn.net/Articles/153546/"><i>Wine to Reach A Major 
Milestone</i></a>.  It discusses Wine's pending beta release and some
of the work that's gone into it.  If you're a frequent reader of WWN,
there probably won't be any surprises in there.  (Disclaimer: I wrote it.)
</p><p>
A pretty slick online magazine called <i>TUX</i> ran two articles on
Linux in their latest issue.  You'll need to register to get access to it,
but it's an interesting twist on online media.  It reads more like a
read magazine rather than a normal, newsfeed style website.  Both
articles concern gaming with the cover of the issue #7 saying,
<a href="http://www.tuxmagazine.com/node/1000155">You CAN Play Windows Games 
on Linux</a>.  </p>

</section>
<section 
	title="Direct3D 7, version 2"
	subject="D3D7 -&gt; WineD3D, 2nd attempt"
	archive="http://www.winehq.com/pipermail/wine-devel/2005-October/040923.html"
	posts="3"
>
<topic>DirectX</topic>
<p>Stefan D&#246;singer has been spending some time on Wine's DirectX 7
implementation.  You might remember that there's been some discussion to
gradually share the Direct3D libraries being developed for DirectX 9 
(see WWN 
<a href="http://www.winehq.com/wwn/291#WineD3D%20and%20DirectX7">#291</a> 
for details.)  Stefan's initial work seems to have progressed:</p>
<quote who="Stefan Dosinger"><p>
I am trying again to Implement Direct3D 7 using WineD3D, and I've made some 
progress. The D3D7 Device implementation seems to initialize correctly, with 
the correct surfaces.
</p><p>
My solution looks like this:
<ul>
<li> DirectDraw is unmodified, and it remains in ddraw.dll.</li>
<li> Direct3D7 uses generally the Direct3D9 interface of WineD3D. The only 
changes made to WineD3D are in WineD3DDeviceImpl_Release and a little change 
in WineD3DSurface.</li>
<li> WineD3D Surfaces can be attached to DDraw Surfaces, and they receive the 
properties of their parents, including the memory reserved for the surface</li>
<li> The D3D7 implementation creates a SwapChain and a RenderTarget from the 
DirectDrawSurface it's attached to, as well as a DepthStencil WineD3D surface 
to make WineD3D happy</li>
</ul></p><p>
I've made the following changes to WineD3D so far:
<ul>
<li> Make WineD3D handle dxVersion 7, generally with the same code as with 
dxVersion 7</li>
<li> A new parameter to WineD3DDevice_Create: a pointer, which specifies an 
existing surface memory. If != NULL is passed, no memory is reserved by 
WineD3D, and it's not Released on WineD3DSurface_Release</li>
<li> When releasing the WineD3DDevice, don't release the parents of the 
RenderTarget, the DepthStencilBuffer, BackBuffer and FrontBuffer, because 
ddraw.dll needs its surfaces. Instead, release the WineD3DSurfaces only.
</li></ul></p><p>
The whole thing is far from being usable, if anyone is interested in the
code, I can send it, but be warned, it's quite a mess at the moment. My plan 
is to get some games running, and then I'll send small and clean patches for 
CVS commit and upload a big patch somewhere for prior testing.

</p></quote>

<p>Lionel Ulmer wanted to know,
<quote who="Lionel Ulmer">
How do you handle the 'special' case Blits (between surface and texture,
between surfaces, ...) ?</quote></p>

<p>Stefan hopes they won't need too many changes:</p>
<quote who="Stefan Dosinger"><p>
Well, I must admit that I don't have a totally detailed plan, but the DDraw
surface and the WineD3D surface share the same memory area. So those Blits
will be handled by the original DirectDraw surface implementation in any
case, and if a WineD3D surface is attached, the DDraw surface implementation
updates the WineD3D surface wherever it might be necessary. I hope that I
can avoid extra memcpy()s
</p><p>
I don't know if there might occur any problems if DGA is used, and I can't
test it because DDraw DGA fails on my system for some reason.</p></quote>

<p>From there the discussion delved into a lot of details.  Stefan ran
into a problem with apps that required multithreaded support for 3D
rendering.  Wine's wined3d library is not threadsafe and games requiring
that won't work.  However, most games don't require multithreaded rendering
so it's not an issue.  Oliver Stieber gave a quick outline of what would
need to be done to correct that problem:</p>
<quote who="Oliver Stieber"><p>

It fairly easy to make things thread safe and support multiple devices per thread, very roughly
you have to:
<ul>
<li>Add the OpenGL context to the device structure.</li>
<li>Make a per-device critical section.</li>
<li>Whenever a call is made enter the critical section</li>
<li>Then check that the current active context is the same as the context on the device.</li>
<li>If not then make the device context active.</li></ul></p><p>

I wanted to finish state management before making things threadsafe and support multiple devices
per thread.</p></quote>

<p>Another problem Stefan ran into was finding any docs on D3D7.</p>
</section>
<section 
	title="Still Image Architecture"
	subject="STI on wine: progress + help"
	archive="http://www.winehq.com/pipermail/wine-devel/2005-October/041054.html"
	posts="3"
>
<topic>Graphics</topic>
<p>A surprising amount of time has been spent fixing bugs in Wine over the 
past few weeks.  That hasn't stopped some folks from continuing new 
development though.  Damjan Jovanovic has been working on an implementation
of Microsoft's Still Image Architecture (STI).  The interfaces provided
by STI allow for acquiring still images from different devices.  It
sits at a higher level than something like TWAIN, and in turn could use
TWAIN to pull images from a scanner.  However, it could also be used to
get images from a digital camera, etc.  One of the advantages to STI
lies in its ability to manage devices that "push" data rather than 
requiring apps to pull from them.  Therefore that requires some kernel 
support.  Damjan described his initial work:</p>
<quote who="Damjan Jovanovic"><p>

I've been working on an STI implementation for wine,
and recently I made some progress.
</p><p>
At present I've got a basic STI.DLL and I've made a
Linux kernel module replacement of USBSCAN.SYS on
Windows. I've only changed CreateFile() and
NtDeviceIoControl(). When CreateFile() gets a
devicepath "\\.\USBSCAN..." it opens the kernel
module's device file using open(), and sends the file
descriptor to the wine server using
wine_server_fd_to_handle(). NtDeviceIoControl() checks
the IOCTL code to see whether it is a scanner code,
and if so, does an ioctl() call.
</p><p>
The problem seems to be that after running for a
couple of seconds, all the file system calls like
ioctl() start failing with EBADF (bad file
descriptor). Is there something other than
wine_server_fd_to_handle() I have to do? The scanning
application I am testing uses multiple threads and
several processes.</p></quote>

<p>Mike McCormack recognized the Wine problem:</p>
<quote who="Mike McCormack"><p>
Once you register the handle with wine_server_fd_to_handle(), you need
to use wine_server_handle_to_fd() to access it again.
</p><p>
If you're already doing that, you may have a handle leak and be running
out of file descriptors.  You need to make sure to close the handle you
receive from wine_server_handle_to_fd(), as the returned value is a
dup'd unix file handle.
</p></quote>

<p>Damjan reported that did it:</p>
<quote who="Damjan Jovanovic"><p>
You were right, I wasn't calling
wine_server_release_fd(), so wine was hitting the
maximum number of open files limit. I fixed it, AND IT
SCANS!!!
</p><p>
Thank you Mike, you made my day. I'll be submitting
patch in the next few weeks.
</p></quote>

</section>
<section 
	title="Winelib &amp; Native Apps"
	subject="How Do I launch a Native Linux application from Within Wine"
	archive="http://www.winehq.com/pipermail/wine-devel/2005-October/041047.html"
	posts="3"
>
<topic>Winelib</topic>
<p>Craig MacLeod wanted to know how to launch a native Linux app from within
a Winelib program:</p>
<quote who="Craig MacLeod"><p>
    I have a Windows application and I wish to run a native linux application 
from within it. The main Win32 API calls for running another apllication are
<ul>

<li>ShellExecute</li>
<li>WinExec</li>
<li>CreateProcess</li>
</ul></p><p>
I have tried calling a native linux program with these (nautilus) and it 
consistently fails. Do I need a fully specified path (nautilus is in the 
search path mind you)?
</p><p>
It either does nothing or hangs Wine when I try calling these applications. I 
assume Wine is running the application as if it is a Windows app and failing.
</p></quote>

<p>Kuba Ober gave a quick pointer,
<quote who="Kuba Ober">
I'd say that you're free to use a linux syscall to do whatever you want, 
including forking the process and exec'ing the linux program. That's the 
beauty of wine. You have win32 *and* linux APIs available at the same time.
</quote></p>

<p>Dan Kegel followed up with an example:</p>
<quote who="Dan Kegel"><p>


I just tried it, and it works.</p><p>
Here's what I did:
<ol>
<li>copied example CreateProcess code from
<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/creating_processes.asp">
http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dllproc/base/creating_processes.asp</a></li>
<li>Modified it to use an absolute path, e.g.
<ul><code>
    CreateProcess( NULL,  TEXT("c:\\windows\\MyChildProcess"), ...</code></ul>
since it didn't seem to work otherwise (probably a PATH problem).</li>
<li>Created a shell script with that name, e.g.
<ul><code>
$ cat &gt;  .wine/drive_c/windows/MyChildProcess &lt;&lt;_EOF_<br />
#!/bin/sh<br />
xeyes<br />
_EOF_<br />
$ chmod 755 .wine/drive_c/windows/MyChildProcess
</code></ul></li>
<li>Compiled the demo app with msvc, ran it with wine, voila!  xeyes are
following me around on the screen.</li></ol></p></quote>

</section>
<section 
	title="Fixing Bugs"
	subject="Reality check"
	archive="http://www.winehq.com/pipermail/wine-devel/2005-October/041071.html"
	posts="29"
>
<topic>Project Management</topic>
<p>How do you get a bunch of people who work on free software as a hobby
to fix bugs?  Well, it's difficult.  It's especially difficult if you have
a small group of people and everyone only wants to work on the latest
features.  Fortunately Wine has more developers than most projects and
some of them are paid to work on Wine.  It seems money is a good incentive
for bugfixing.  Despite that, Wine is a massive project and regressions 
are common.  John Smith wrote to wine-devel to illustrate that point:</p>
<quote who="John Smith"><p>
There was a discussion here about 2 months ago, where I asked for a way to 
embed WINE config strings into a Win32 executable (for example, as string 
resources). I was told that it is better to fix the problem rather than to 
create workarounds, and that fixing bugs is trivial and takes at most 2-3 
days as soon as it is reproducible.
</p><p>
I didn't argue much then but made a little experiment to prove my point. The 
point is the following:
THE MOST DIFFICULT THING IN GETTING BUG FIXED IS TO GET SOMEBODY WORK ON IT.
The same applies both to commercial environments and to open source ones 
equally. Experiment
illustrates it very well:
</p><p>
I've found an application that experiences the problem with sympthoms which 
are very similar to ours,
can be installed in 5 minutes and the problem can be reproduced in 3 clicks. 
And I've opened a bug in
WINE's bugzilla:  #3270 (another one #3269 was opened for another 
incompatibility).  Result is the following: IN 6 WEEKS NOBODY EVEN TOOK A 
LOOK AT BOTH THOSE BUGS.
</p><p>
Welcome to the real world
</p></quote>

<p>Ouch.  It immediately provoked a long discussion that at times almost
delved into a flamewar.  Here's some random snippets of conversation that
ensued:

</p><p>
Dimi Paun:</p>
<quote who="Dimitrie Paun"><p>
Unfortunately, Wine is very incomplete
in the sense that you don't have to look far to find lots of bugs.
Because of this, we don't usually have the same sense of urgency
as other projects to fix them -- there is an infinite stream of 
them just around the corner.
</p><p>
Not an excuse -- I'm just trying to explain why we don't just jump on
the bugs when they are filed in Bugzilla. Now that we have 0.9
on the way (hopefully followed by 1.0), this attitude seems to be
changing.</p></quote>
<p>Marcus Meissner:</p>
<quote who="Marcus Meissner"><p>
Yes, we welcome you to the wonderful world of OpenSource.
</p><p>
Please understand that a lot of us are not being paid ... and so just choose
what to do. Some of us are paid to work on Wine, but for specific tasks.
</p></quote>

<p>Dan Kegel:</p>
<quote who="Dan Kegel"><p>

Free Software works like this:
<ul>
  The programmers scratch their own itches.</ul></p><p>
That's it!  Users who have an itch not shared by any programmer
have no right to complain.   Don't look a gift horse in
the mouth, as they say.  If you *really* want a bug fixed,
and no programmer is willing to fix it for free,
and you can't fix it yourself, you have two choices:
<ol>
<li> wait for some programmer to decide he wants to fix
    it for his own reasons</li>
<li> pay a programmer to do it for you.</li>
</ol></p></quote>

<p>Jeremy White:</p>
<quote who="Jeremy White"><p>

This page:
  <ul><a href="http://www.codeweavers.com/products/source/">
  http://www.codeweavers.com/products/source/</a></ul></p><p>
takes two clicks to get to from our home page, and
has all of our public source code, including Wine.
</p><p>
We also have a company policy that prefers that all the work
we do on Wine is publicly submitted to wine-devel
first, before we commit to our own tree.
</p><p>
  I have found that, on many open source projects,
it is possible to get help from a developer.  It
takes an enormous amount of effort, a great deal
of politeness, and some luck.  But most open source
developers are actually quite giving.  The keys, imho, are:
<ol>

  <li>  Do your homework<br /><br />

      Read the FAQs.  Read the ML archives.
      Actually try the various alternatives suggested.
      Research the technical issues at hand.
      Learn enough so you know what you're talking about.<br /><br />

      Do that first.<br /><br />

  </li>
  <li>  Make it easy<br /><br />

      Developers find a nice bug report, with easy
      to follow instructions to reproduce, and nice
      easy access to the software to be quite nice.<br /><br />

  </li>
  <li>  Ask nicely<br /><br />

      If you want someone to work for you, for free,
      you have to recognize that they are giving you
      a gift - a gift of their time.<br /><br />

      If you can't hold that in mind when you ask,
      then you're not asking right.
  </li></ol></p></quote>

<p>John wrote back in response to the <i>many</i> emails on wine-devel:</p>
<quote who="John Smith"><p>
In fact, I don't care about those bugs at all. Once again (for the 
3rd time, BTW): I just tried to make Wine a little bit more compatible with 
3rd-party applications (by supporting a way for Win programmers to specify 
WINE config parameters within executable). I was told that it doesn't make 
sense, as 'bugs are usually fixed within 2-3 days', which I had serious 
doubts about (it just doesn't work that way), so I've made a little 
experiment. I was right, you guys were wrong, and now you're trying to blame 
me? I don't really think that after all that heated conversation somebody is 
going to consider my original proposal, but frankly I don't care about Wine 
anymore - I definitely don't like this 'pay me' attitude (rather than normal 
'sorry, we didn't have time to fix it yet' attitude).</p></quote>

<p>A quick look in Bugzilla shows 464 bugs resolved this month.  Now that
doesn't mean there were 464 patches since some were duplicates and
some of them couldn't be reproduced.  Jonathan Ernst has been heading up
the triage and spent a lot of time cleaning things up.  </p>

<p>In addition, a bunch of bugfixes have come in related to Wine 0.9.  
A lot of those
came from Wine's non-paid developers, including Vijay Kiran Kamuju, 
Vitaliy Margolen, Krzysztof Foltman, Luis Lenders, Raphael Junqueira, 
Ivan Leo Puoti, Robert Reif, Peter Berg Larsen, and Christian Costa.  
</p><p>
Could things get better?  Of course.  However, for unpaid developers spending
their free time working on things it gets difficult.  As Dimi pointed out,
there always seems to be an infinite supply of bugs that can only be
fixed in a finite amount of time.  Things get prioritized based on how
interesting it is to fix or whether someone has the knowledge to work on
it.</p>

</section></kc>
