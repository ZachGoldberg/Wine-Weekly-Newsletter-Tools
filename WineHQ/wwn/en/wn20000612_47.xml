<?xml version="1.0" ?>

<kc>
<title>Kernel Cousin Wine</title>
<author email="eric.pouech@lemel.fr">Eric Pouech</author>
<issue num="47" date="12 Jun 2000 00:00:00 -0800" />

<intro>
<p />
This is the 47th release of the Wine's kernel cousin
publication. Its main goal is to distribute widely what's
going on around Wine (the Un*x Windows emulator).
<p />
About.com runs a <a
href="http://linux.about.com/compute/linux/library/weekly/aa060300c-b.htm">Wine
introduction</a>.
</intro>

<stats posts="130" size="294" contrib="57" multiples="26" lastweek="33">
<person posts="10" size="17" who="Alexandre Julliard &lt;julliard@winehq.org&gt;" />
<person posts="8" size="13" who="Ove Kaaven &lt;ovehk@ping.uio.no&gt;" />
<person posts="7" size="18" who="Andreas Mohr &lt;a.mohr@mailto.de&gt;" />
<person posts="7" size="15" who="Bradley Baetz &lt;bbaetz@student.usyd.edu.au&gt;" />
<person posts="7" size="14" who="Uwe Bonnes &lt;bon@elektron.ikp.physik.tu-darmstadt.de&gt;" />
<person posts="7" size="13" who="Bertho Stultiens &lt;bertho@panter.soci.aau.dk&gt;" />
<person posts="7" size="10" who="Marcus Meissner &lt;marcus@jet.franken.de&gt;" />
<person posts="5" size="21" who="David Elliott &lt;dfe@infinite-internet.net&gt;" />
<person posts="4" size="8" who="Sam Dennis &lt;sdennis101@geocities.com&gt;" />
</stats>


<section 
  title="Strange API conventions"
  subject="Missing prototypes (courtesy of winapi_check)"
  archive="http://www.integrita.com/cgi-local/lwgate.pl/WINE-DEVEL/archives/2000-06/Subject/article-31.html"
  posts="10"
  startdate="02 Jun 2000 00:00:00 -0800"
  enddate="08 Jun 2000 00:00:00 -0800"
>

<p />

Francois Gouget, still toying with winapi_check and ports of Windows
apps with WineLib) sent a patch to mimic better the way Windows splits 
the definitions across the header files.

<p />

One point of peculiar interest was the MCIWndCreate function (Francois 
fix was: <quote who="Francois Gouget">MCIWndCreate conflicts with the corresponding
A/W macro</quote>.

<p />

As a side note, since the introduction of UNICODE strings in Windows,
most APIs exist in two flavors when strings come into play:
- an ANSI version
- an UNICODE one.

<p />

Usually, the ANSI version is postfixed by A (fooA) and the UNICODE
with W (fooW) (for Wide characters). In the header file, depending
whether the manifest constant UNICODE is defined, foo is either
#defined as fooW or fooA.

<p />

Francois Gouget went further on some tentative explanations:

<quote who="Francois Gouget">When I say that the DLL had three APIs I checked
with windows and saw that they do use the usual macro for
MCIWndCreate. So, I assume that they created MCIWndCreate first and
then realized that it should really have an A and a W version, added
those but did not remove the original one to not cause compatibility
problems. So I assume one is not supposed to use the old one anymore. 
Of course if one really wants to use the old one all one has to do is
to use GetProcAddress.</quote>


<p />

After lots of people complained about this reminiscence of the bad
coding habits, the discussion evolved into the prototypes for such
function. Andreas Mohr also pointed out that
WINSPOOL.DeviceCapabilities{A|W} might suffer from the same symptoms
and may require the same treatment, but no one replied.</section>


<section 
  title="Problem with gcc-2.95.2 and -O6"
  subject="Problem with gcc-2.95.2 and -O6"
  archive="http://www.integrita.com/cgi-local/lwgate.pl/WINE-DEVEL/archives/2000-06/Subject/article-130.html"
  posts="2"
  startdate="06 Jun 2000 00:00:00 -0800"
  enddate="06 Jun 2000 00:00:00 -0800"
>

<p />

Lionel Ulmer reported some IRC discussion he had:
<quote who="Lionel Ulmer">
By discussing with a Wine user on #nvidia, we found out that when
compiling 'scheduler/sysdeps.c' with gcc 2.95.2 and -O6, the function
'SYSDEPS_DoCallOnStack' is undefined
<br /><code>nm sysdeps.o | grep DoCallOnStack</code><br />
gives 'U SYSDEPS_DoCallOnStack').

<p />

After some discussions with Ove, he thought that it was because gcc
was inlining this function.
</quote>


<p />

Lionel asked for hints on ways to tell gcc not to inline this
function.

<p />

Ulrich Weigand tried to help: <quote who="Ulrich Weigand">
Well, I had hoped the __attribute__(__unused__) that I attached to 
the declaration would suffice ...  I'm not aware of any other pragma
or attribute that could be used.

<p />

The proper solution for gcc would IMO be to replace the ASM_GLOBAL_FUNC
hack by proper GNU inline assembly, specifying the procedure address
as input argument.  This way, gcc would be aware that it is used.
Unfortunately, Patrik won't like this as it breaks non-gcc compilation :-/
</quote>

<p />

Anyway, Ulrich proposed a dirty hack (removing the static
attribute). The moral of this story might be not too use heavy
optimization with bleeding edge compilers...</section>


<section 
  title="Making Star Money 2.0 to work"
  subject="Star Money 2.0 crash"
  archive="http://www.integrita.com/cgi-local/lwgate.pl/WINE-DEVEL/archives/2000-06/Subject/article-158.html"
  posts="13"
  startdate="08 Jun 2000 00:00:00 -0800"
  enddate="09 Jun 2000 00:00:00 -0800"
>

<p />

Andreas Mohr reported a crash while running Star Money 2.0. He also
started digging into the traces, and reported some bad behavior
between windows handles and menu id. Speaking after himself, Andreas
smelled some mismatch between windows IDs and menu IDs. Alexandre
Julliard pointed back to <quote who="Alexandre Julliard">the recent changes to
SetParent which do not clear wIDmenu when making the window a
top-level one.</quote>

<p />

As a side note, Windows (at least in CreateWindow) uses the same
parameter for two different uses:
<ul>
   <li />if the window is a child/popup window, then this parameter is a
child  ID (which helps uniquely identify a child among his siblings)
   <li />if the window is not a child window (overlapped...), this
parameter is an ID to a menu control 
</ul>

<p />

Alexandre also suggested that <quote who="Alexandre Julliard">we should probably have
separate fields for id and menu to avoid this problem.</quote>

<p />

A naive Andreas asked whether <b>he</b> should do the work, and Alexandre
slapped the impetuous: <quote who="Alexandre Julliard">I want the patch in my mailbox
in 10 minutes. That will teach you what happens to people who dare to
find bugs. ;-)</quote>

<p />

Andreas missed the deadline but G&#233;rard Patel sent the proper fix in
SetParent that all of them suspected to be the culprit.

<p />

G&#233;rard gave also some more details on his fix:
<quote who="G&#233;rard Patel">
The combo listbox is now created like a child window in controls/combo.c
But this 'strange little beast' is not keeping its style when it's reparented 
in the wnd.c file (because of the code removed by my patch).
So, the style is turned from child to neither child nor popup - hence,
overlapped (main window).
An overlapped window can have a menu and has, of course, no
child Id. A child has an Id, but can't have a menu.
With my patch, the id can't be handled as a menu handle in the (rather
special) case of the combobox.

<p />

It's  an incredibly bad design, of course, but being compatible with Windows
and having a good design is a challenge.</quote>

</section>


<section 
  title="Feature: The X11 driver by Ove K&#229;ven"
>
<p />
Most Wine users run Wine under the windowing system known as X11. During most of
Wine's history, this was the only display driver available, but in recent years,
parts of Wine has been reorganized to allow for other display drivers (although
the only alternative currently available is Patrik Stridvall's ncurses-based
ttydrv, which he claims works for displaying calc.exe). The display driver is
chosen with the "GraphicsDriver" option in the [wine] section of wine.conf/.winerc,
but I will only cover the x11drv in this article.
<p />
<h3>x11drv modes of operation</h3>
The x11drv consists of two conceptually distinct pieces, the graphics driver
(GDI part), and the windowing driver (USER part). Both of these are linked
into the libx11drv.so module, though (which you load with the "GraphicsDriver"
option). In Wine, running on X11, the graphics driver must draw on drawables
(window interiors) provided by the windowing driver. This differs a bit from the Windows
model, where the windowing system creates and configures device contexts controlled
by the graphics driver, and applications are allowed to hook into this relationship
anywhere they like. Thus, to provide any reasonable tradeoff between compatibility
and usability, the x11drv has three different modes of operation.
<dl>
<dt />Unmanaged/Normal
<dd />The default. Window-manager-independent (any running window manager is
ignored completely). Window decorations (title bars, borders, etc) are drawn
by Wine to look and feel like the real Windows. This is compatible with
applications that depend on being able to compute the exact sizes of any
such decorations, or that want to draw their own.
<dt />Managed
<dd />Specified by using the --managed command-line option or the Managed
wine.conf option (see below). Ordinary top-level frame windows with thick borders,
title bars, and system menus will be managed by your window manager. This
lets these applications integrate better with the rest of your desktop, but
may not always work perfectly. (A rewrite of this mode of operation, to make
it more robust and less patchy, is highly desirable, though, and is
planned to be done before the Wine 1.0 release.)
<dt />Desktop-in-a-Box
<dd />Specified by using the --desktop command-line option (with a geometry,
e.g. --desktop 800x600 for a such-sized desktop, or even --desktop 800x600+0+0
to automatically position the desktop at the upper-left corner of the display).
This is the mode most compatible with the Windows model. All application windows
will just be Wine-drawn windows inside the Wine-provided desktop window
(which will itself be managed by your window manager), and Windows applications
can roam freely within this virtual workspace and think they own it all,
without disturbing your other X apps.
</dl>
<p />
<h3>The [x11drv] section</h3>
<dl>
<dt />AllocSystemColors
<dd />Applies only if you have a palette-based display, i.e. if your X server is set
to a depth of 8bpp, and if you haven't requested a private color map.
It specifies the maximum number of shared colormap cells (palette entries) Wine
should occupy. The higher this value, the less colors will be available to other
applications.
<dt />PrivateColorMap
<dd />Applies only if you have a palette-based display, i.e. if your X server is set
to a depth of 8bpp. It specifies that you don't want to use the shared color map,
but a private color map, where all 256 colors are available. The disadvantage is
that Wine's private color map is only seen while the mouse pointer is inside a
Wine window, so psychedelic flashing and funky colors will become routine
if you use the mouse a lot.
<dt />PerfectGraphics
<dd />This option only determines whether fast X11 routines or exact Wine routines
will be used for certain ROP codes in blit operations. Most users won't notice
any difference.
<dt />ScreenDepth
<dd />Applies only to multi-depth displays. It specifies which of the available depths
Wine should use (and tell Windows apps about).
<dt />Display
<dd />This specifies which X11 display to use, and if specified, will override both
the DISPLAY environment variable and the --display command-line option.
<dt />Managed
<dd />Wine can let frame windows be managed by your window manager. This option
specifies whether you want that by default.
<dt />UseDGA
<dd />This specifies whether you want DirectDraw to use XFree86's
Direct Graphics Architecture (DGA), which is able to take over the entire
display and run the game full-screen at maximum speed. (With DGA1 (XFree86 3.x),
you still have to configure the X server to the game's requested bpp first,
but with DGA2 (XFree86 4.x), runtime depth-switching may be possible, depending on
your driver's capabilities.) But be aware that if Wine crashes while in DGA mode,
it may not be possible to regain control over your computer without rebooting.
DGA normally requires either root privileges or read/write access to /dev/mem.
<dt />UseXShm
<dd />If you don't want DirectX to use DGA, you can at least use X Shared Memory
extensions (XShm). It is much slower than DGA, since the app doesn't have direct
access to the physical frame buffer, but using shared memory to draw the frame
is at least faster than sending the data through the standard X11 socket, even
though Wine's XShm support is still known to crash sometimes.
<dt />DXGrab
<dd />If you don't use DGA, you may want an alternative means to convince the mouse
cursor to stay within the game window. This option does that. Of course, as with DGA,
if Wine crashes, you're in trouble (although not as badly as in the DGA case,
since you can still use the keyboard to get out of X).
<dt />DesktopDoubleBuffered
<dd />Applies only if you use the --desktop command-line option to run in a
desktop window. Specifies whether to create the desktop window with a double-buffered
visual, something most OpenGL games need to run correctly.
</dl>
</section>

</kc>
